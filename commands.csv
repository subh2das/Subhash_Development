#TYPE System.Management.Automation.AliasInfo
"HelpUri","ResolvedCommandName","DisplayName","ReferencedCommand","ResolvedCommand","Definition","Options","Description","OutputType","Name","CommandType","Visibility","ModuleName","Module","RemotingCapability","Parameters","ParameterSets"
"http://go.microsoft.com/fwlink/?LinkId=289343",,"Add-ProvisionedAppxPackage",,,,"None","",,"Add-ProvisionedAppxPackage","Alias","Public","Dism","Dism","PowerShell",,
"http://go.microsoft.com/fwlink/?LinkId=289368",,"Apply-WindowsUnattend",,,,"None","",,"Apply-WindowsUnattend","Alias","Public","Dism","Dism","PowerShell",,
"",,"Flush-Volume",,,,"None","",,"Flush-Volume","Alias","Public","Storage","Storage","PowerShell",,
"",,"Get-PhysicalDiskSNV",,,,"None","",,"Get-PhysicalDiskSNV","Alias","Public","Storage","Storage","PowerShell",,
"http://go.microsoft.com/fwlink/?LinkId=289354",,"Get-ProvisionedAppxPackage",,,,"None","",,"Get-ProvisionedAppxPackage","Alias","Public","Dism","Dism","PowerShell",,
"",,"Initialize-Volume",,,,"None","",,"Initialize-Volume","Alias","Public","Storage","Storage","PowerShell",,
"http://go.microsoft.com/fwlink/?LinkID=241967",,"Move-SmbClient",,,,"None","",,"Move-SmbClient","Alias","Public","SmbWitness","SmbWitness","PowerShell",,
"http://go.microsoft.com/fwlink/?LinkId=289361",,"Remove-ProvisionedAppxPackage",,,,"None","",,"Remove-ProvisionedAppxPackage","Alias","Public","Dism","Dism","PowerShell",,
"",,"Write-FileSystemCache",,,,"None","",,"Write-FileSystemCache","Alias","Public","Storage","Storage","PowerShell",,
"",,,,,"Set-Location A:","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","A:","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${Credentials},

    ${ForestName},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${TargetAutodiscoverEpr},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${AccessMethod},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Add-AvailabilityAddressSpace') `
                            -Arg ('Add-AvailabilityAddressSpace', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Add-AvailabilityAddressSpace
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-AvailabilityAddressSpace","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-BitLockerKeyProtector","Function","Public","BitLocker","BitLocker","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    ${Member},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Add-DistributionGroupMember') `
                            -Arg ('Add-DistributionGroupMember', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Add-DistributionGroupMember
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-DistributionGroupMember","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])][OutputType('Microsoft.Management.Infrastructure.CimInstance#DnsClientNrptRule')]
    param(
    
    [Parameter(ParameterSetName='Add0', ValueFromPipelineByPropertyName=$true)]
    [string]
    ${GpoName},

    [Parameter(ParameterSetName='Add0', ValueFromPipelineByPropertyName=$true)]
    [Alias('DirectAccessDnsServers')]
    [string[]]
    ${DANameServers},

    [Parameter(ParameterSetName='Add0', ValueFromPipelineByPropertyName=$true)]
    [Alias('DirectAccessQueryIPsecRequired')]
    [switch]
    ${DAIPsecRequired},

    [Parameter(ParameterSetName='Add0', ValueFromPipelineByPropertyName=$true)]
    [Alias('DirectAccessQueryIPSSECEncryption')]
    [AllowEmptyString()]
    [AllowNull()]
    [ValidateSet('','None','Low','Medium','High')]
    [string]
    ${DAIPsecEncryptionType},

    [Parameter(ParameterSetName='Add0', ValueFromPipelineByPropertyName=$true)]
    [Alias('DirectAccessProxyName')]
    [string]
    ${DAProxyServerName},

    [Parameter(ParameterSetName='Add0', ValueFromPipelineByPropertyName=$true)]
    [Alias('DnsSecEnabled')]
    [switch]
    ${DnsSecEnable},

    [Parameter(ParameterSetName='Add0', ValueFromPipelineByPropertyName=$true)]
    [Alias('DnsSecQueryIPsecRequired')]
    [switch]
    ${DnsSecIPsecRequired},

    [Parameter(ParameterSetName='Add0', ValueFromPipelineByPropertyName=$true)]
    [Alias('DnsSecQueryIPsecEncryption')]
    [AllowEmptyString()]
    [AllowNull()]
    [ValidateSet('','None','Low','Medium','High')]
    [string]
    ${DnsSecIPsecEncryptionType},

    [Parameter(ParameterSetName='Add0', ValueFromPipelineByPropertyName=$true)]
    [string[]]
    ${NameServers},

    [Parameter(ParameterSetName='Add0', ValueFromPipelineByPropertyName=$true)]
    [ValidateSet('Disable','Utf8WithMapping','Utf8WithoutMapping','Punycode')]
    [string]
    ${NameEncoding},

    [Parameter(ParameterSetName='Add0', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${Namespace},

    [Parameter(ParameterSetName='Add0', ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Server},

    [Parameter(ParameterSetName='Add0', ValueFromPipelineByPropertyName=$true)]
    [Alias('DirectAccessProxyType')]
    [AllowEmptyString()]
    [AllowNull()]
    [ValidateSet('','NoProxy','UseDefault','UseProxyName')]
    [string]
    ${DAProxyType},

    [Parameter(ParameterSetName='Add0', ValueFromPipelineByPropertyName=$true)]
    [switch]
    ${DnsSecValidationRequired},

    [Parameter(ParameterSetName='Add0', ValueFromPipelineByPropertyName=$true)]
    [Alias('DirectAccessEnabled')]
    [switch]
    ${DAEnable},

    [Parameter(ParameterSetName='Add0', ValueFromPipelineByPropertyName=$true)]
    [Alias('IPsecCARestriction')]
    [string]
    ${IPsecTrustAuthority},

    [Parameter(ParameterSetName='Add0', ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Comment},

    [Parameter(ParameterSetName='Add0', ValueFromPipelineByPropertyName=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='Add0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${PassThru},

    [Parameter(ParameterSetName='Add0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Add0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Add0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GpoName')) {
          [object]$__cmdletization_value = ${GpoName}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'GpoName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'GpoName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DANameServers')) {
          [object]$__cmdletization_value = ${DANameServers}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DANameServers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DANameServers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DAIPsecRequired')) {
          [object]$__cmdletization_value = ${DAIPsecRequired}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DAIPsecRequired'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DAIPsecRequired'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DAIPsecEncryptionType')) {
          [object]$__cmdletization_value = ${DAIPsecEncryptionType}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DAIPsecEncryptionType'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DAIPsecEncryptionType'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DAProxyServerName')) {
          [object]$__cmdletization_value = ${DAProxyServerName}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DAProxyServerName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DAProxyServerName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DnsSecEnable')) {
          [object]$__cmdletization_value = ${DnsSecEnable}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DnsSecEnable'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DnsSecEnable'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DnsSecIPsecRequired')) {
          [object]$__cmdletization_value = ${DnsSecIPsecRequired}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DnsSecIPsecRequired'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DnsSecIPsecRequired'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DnsSecIPsecEncryptionType')) {
          [object]$__cmdletization_value = ${DnsSecIPsecEncryptionType}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DnsSecIPsecEncryptionType'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DnsSecIPsecEncryptionType'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('NameServers')) {
          [object]$__cmdletization_value = ${NameServers}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NameServers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NameServers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('NameEncoding')) {
          [object]$__cmdletization_value = ${NameEncoding}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NameEncoding'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NameEncoding'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Namespace')) {
          [object]$__cmdletization_value = ${Namespace}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Namespace'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Namespace'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Server')) {
          [object]$__cmdletization_value = ${Server}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Server'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Server'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DAProxyType')) {
          [object]$__cmdletization_value = ${DAProxyType}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DAProxyType'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DAProxyType'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DnsSecValidationRequired')) {
          [object]$__cmdletization_value = ${DnsSecValidationRequired}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DnsSecValidationRequired'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DnsSecValidationRequired'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DAEnable')) {
          [object]$__cmdletization_value = ${DAEnable}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DAEnable'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DAEnable'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IPsecTrustAuthority')) {
          [object]$__cmdletization_value = ${IPsecTrustAuthority}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IPsecTrustAuthority'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IPsecTrustAuthority'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Comment')) {
          [object]$__cmdletization_value = ${Comment}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Comment'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Comment'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DisplayName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DisplayName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PassThru')) {
          [object]$__cmdletization_value = ${PassThru}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PassThru'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PassThru'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#DnsClientNrptRule'
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Add', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP PS_DnsClientNRPTRule_v1.0.0.cdxml-Help.xml
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-DnsClientNrptRule","Function","Public","DnsClient","DnsClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-DtcClusterTMMapping","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-InitiatorIdToMaskingSet","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${AccessRights},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${User},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Add-MailboxFolderPermission') `
                            -Arg ('Add-MailboxFolderPermission', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Add-MailboxFolderPermission
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-MailboxFolderPermission","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${AccessRights},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Deny},

    ${AutoMapping},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${User},

    ${Owner},

    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wa')]
    ${WarningAction},

    ${InheritanceType},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Add-MailboxPermission') `
                            -Arg ('Add-MailboxPermission', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Add-MailboxPermission
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-MailboxPermission","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${ParentRoleEntry},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${Force},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Parameters},

    [switch]
    ${Overwrite},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    ${Type},

    [Alias('wa')]
    ${WarningAction},

    ${Role},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Add-ManagementRoleEntry') `
                            -Arg ('Add-ManagementRoleEntry', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Add-ManagementRoleEntry
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-ManagementRoleEntry","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-MpPreference","Function","Public","Defender","Defender","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-NetEventNetworkAdapter","Function","Public","NetEventPacketCapture","NetEventPacketCapture","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-NetEventPacketCaptureProvider","Function","Public","NetEventPacketCapture","NetEventPacketCapture","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-NetEventProvider","Function","Public","NetEventPacketCapture","NetEventPacketCapture","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-NetEventVmNetworkAdapter","Function","Public","NetEventPacketCapture","NetEventPacketCapture","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-NetEventVmSwitch","Function","Public","NetEventPacketCapture","NetEventPacketCapture","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-NetIPHttpsCertBinding","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-NetLbfoTeamMember","Function","Public","NetLbfo","NetLbfo","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-NetLbfoTeamNic","Function","Public","NetLbfo","NetLbfo","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-NetNatExternalAddress","Function","Public","NetNat","NetNat","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-NetNatStaticMapping","Function","Public","NetNat","NetNat","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-NetSwitchTeamMember","Function","Public","NetSwitchTeam","NetSwitchTeam","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-OdbcDsn","Function","Public","Wdac","Wdac","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-PartitionAccessPath","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-PhysicalDisk","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-Printer","Function","Public","PrintManagement","PrintManagement","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-PrinterDriver","Function","Public","PrintManagement","PrintManagement","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-PrinterPort","Function","Public","PrintManagement","PrintManagement","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${AccessRights},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${User},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Add-PublicFolderClientPermission') `
                            -Arg ('Add-PublicFolderClientPermission', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Add-PublicFolderClientPermission
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-PublicFolderClientPermission","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${AccessRights},

    ${Trustee},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Add-RecipientPermission') `
                            -Arg ('Add-RecipientPermission', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Add-RecipientPermission
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-RecipientPermission","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    ${Member},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Add-RoleGroupMember') `
                            -Arg ('Add-RoleGroupMember', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Add-RoleGroupMember
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-RoleGroupMember","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-TargetPortToMaskingSet","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${LinkType},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${Links},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Add-UnifiedGroupLinks') `
                            -Arg ('Add-UnifiedGroupLinks', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Add-UnifiedGroupLinks
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-UnifiedGroupLinks","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-VirtualDiskToMaskingSet","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-VpnConnection","Function","Public","VpnClient","VpnClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-VpnConnectionRoute","Function","Public","VpnClient","VpnClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-VpnConnectionTriggerApplication","Function","Public","VpnClient","VpnClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-VpnConnectionTriggerDnsConfiguration","Function","Public","VpnClient","VpnClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-VpnConnectionTriggerTrustedNetwork","Function","Public","VpnClient","VpnClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-Location B:","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","B:","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Backup-BitLockerKeyProtector","Function","Public","BitLocker","BitLocker","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Block-SmbShareAccess","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-Location C:","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","C:","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-Location ..","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","cd..","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-Location \","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","cd\","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Cancel},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${NotificationEmailAddresses},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Clear-ActiveSyncDevice') `
                            -Arg ('Clear-ActiveSyncDevice', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Clear-ActiveSyncDevice
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Clear-ActiveSyncDevice","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Clear-BitLockerAutoUnlock","Function","Public","BitLocker","BitLocker","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Clear-Disk","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Low', PositionalBinding=$false)]
    
    param(
    
    [Parameter(ParameterSetName='Clear0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Clear0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Clear0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Clear', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_DnsClientCache.cdxml-Help.xml
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Clear-DnsClientCache","Function","Public","DnsClient","DnsClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Clear-FileStorageTier","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=225747",,,,,"$space = New-Object System.Management.Automation.Host.BufferCell
$space.Character = ' '
$space.ForegroundColor = $host.ui.rawui.ForegroundColor
$space.BackgroundColor = $host.ui.rawui.BackgroundColor
$rect = New-Object System.Management.Automation.Host.Rectangle
$rect.Top = $rect.Bottom = $rect.Right = $rect.Left = -1
$origin = New-Object System.Management.Automation.Host.Coordinates
$Host.UI.RawUI.CursorPosition = $origin
$Host.UI.RawUI.SetBufferContents($rect, $space)
# .Link
# http://go.microsoft.com/fwlink/?LinkID=225747
# .ExternalHelp System.Management.Automation.dll-help.xml
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Clear-Host","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Cancel},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [switch]
    ${AccountOnly},

    [Alias('wa')]
    ${WarningAction},

    ${NotificationEmailAddresses},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Clear-MobileDevice') `
                            -Arg ('Clear-MobileDevice', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Clear-MobileDevice
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Clear-MobileDevice","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Clear-TextMessagingAccount') `
                            -Arg ('Clear-TextMessagingAccount', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Clear-TextMessagingAccount
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Clear-TextMessagingAccount","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Close-SmbOpenFile","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Close-SmbSession","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${VerificationCode},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    ${WarningVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Compare-TextMessagingVerificationCode') `
                            -Arg ('Compare-TextMessagingVerificationCode', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Compare-TextMessagingVerificationCode
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Compare-TextMessagingVerificationCode","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    ${NotificationEmails},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Complete-MigrationBatch') `
                            -Arg ('Complete-MigrationBatch', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Complete-MigrationBatch
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Complete-MigrationBatch","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Configuration","Function","Public","PSDesiredStateConfiguration","PSDesiredStateConfiguration","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Connect-IscsiTarget","Function","Public","iSCSI","iSCSI","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Connect-VirtualDisk","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Copy-NetFirewallRule","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Copy-NetIPsecMainModeCryptoSet","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Copy-NetIPsecMainModeRule","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Copy-NetIPsecPhase1AuthSet","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Copy-NetIPsecPhase2AuthSet","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Copy-NetIPsecQuickModeCryptoSet","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Copy-NetIPsecRule","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-Location D:","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","D:","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Debug-MMAppPrelaunch","Function","Public","MMAgent","MMAgent","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${Mailbox},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Disable-App') `
                            -Arg ('Disable-App', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Disable-App
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-App","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-BitLocker","Function","Public","BitLocker","BitLocker","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-BitLockerAutoUnlock","Function","Public","BitLocker","BitLocker","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-DAManualEntryPointSelection","Function","Public","DirectAccessClientComponents","DirectAccessClientComponents","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Disable-HostedContentFilterRule') `
                            -Arg ('Disable-HostedContentFilterRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Disable-HostedContentFilterRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-HostedContentFilterRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${AlwaysDeleteOutlookRulesBlob},

    ${Mailbox},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${Force},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Disable-InboxRule') `
                            -Arg ('Disable-InboxRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Disable-InboxRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-InboxRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [switch]
    ${PreserveMailUser},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Disable-JournalArchiving') `
                            -Arg ('Disable-JournalArchiving', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Disable-JournalArchiving
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-JournalArchiving","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Disable-JournalRule') `
                            -Arg ('Disable-JournalRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Disable-JournalRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-JournalRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Archive},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [switch]
    ${IgnoreLegalHold},

    [Alias('wa')]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Disable-Mailbox') `
                            -Arg ('Disable-Mailbox', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Disable-Mailbox
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-Mailbox","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Disable-MailPublicFolder') `
                            -Arg ('Disable-MailPublicFolder', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Disable-MailPublicFolder
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-MailPublicFolder","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Disable-MalwareFilterRule') `
                            -Arg ('Disable-MalwareFilterRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Disable-MalwareFilterRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-MalwareFilterRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-MMAgent","Function","Public","MMAgent","MMAgent","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-NetAdapter","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-NetAdapterBinding","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-NetAdapterChecksumOffload","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-NetAdapterEncapsulatedPacketTaskOffload","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-NetAdapterIPsecOffload","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-NetAdapterLso","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-NetAdapterPowerManagement","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-NetAdapterQos","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-NetAdapterRdma","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-NetAdapterRsc","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-NetAdapterRss","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-NetAdapterSriov","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-NetAdapterVmq","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-NetDnsTransitionConfiguration","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-NetFirewallRule","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-NetIPHttpsProfile","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-NetIPsecMainModeRule","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-NetIPsecRule","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-NetNatTransitionConfiguration","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-OdbcPerfCounter","Function","Public","Wdac","Wdac","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Disable-OutlookProtectionRule') `
                            -Arg ('Disable-OutlookProtectionRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Disable-OutlookProtectionRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-OutlookProtectionRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-PhysicalDiskIndication","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-PSTrace","Function","Public","PSDiagnostics","PSDiagnostics","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-PSWSManCombinedTrace","Function","Public","PSDiagnostics","PSDiagnostics","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-ScheduledTask","Function","Public","ScheduledTasks","ScheduledTasks","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-SmbDelegation","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-StorageEnclosureIdentification","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Disable-TransportRule') `
                            -Arg ('Disable-TransportRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Disable-TransportRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-TransportRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Disable-UMAutoAttendant') `
                            -Arg ('Disable-UMAutoAttendant', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Disable-UMAutoAttendant
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-UMAutoAttendant","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${Mailbox},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Disable-UMCallAnsweringRule') `
                            -Arg ('Disable-UMCallAnsweringRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Disable-UMCallAnsweringRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-UMCallAnsweringRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ea')]
    ${ErrorAction},

    ${Immediate},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Disable-UMIPGateway') `
                            -Arg ('Disable-UMIPGateway', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Disable-UMIPGateway
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-UMIPGateway","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    ${KeepProperties},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Disable-UMMailbox') `
                            -Arg ('Disable-UMMailbox', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Disable-UMMailbox
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-UMMailbox","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-WdacBidTrace","Function","Public","Wdac","Wdac","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-WSManTrace","Function","Public","PSDiagnostics","PSDiagnostics","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disconnect-IscsiTarget","Function","Public","iSCSI","iSCSI","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disconnect-VirtualDisk","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Dismount-DiskImage","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-Location E:","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","E:","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${Mailbox},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Enable-App') `
                            -Arg ('Enable-App', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Enable-App
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-App","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-BitLocker","Function","Public","BitLocker","BitLocker","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-BitLockerAutoUnlock","Function","Public","BitLocker","BitLocker","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-DAManualEntryPointSelection","Function","Public","DirectAccessClientComponents","DirectAccessClientComponents","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Enable-HostedContentFilterRule') `
                            -Arg ('Enable-HostedContentFilterRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Enable-HostedContentFilterRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-HostedContentFilterRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${AlwaysDeleteOutlookRulesBlob},

    ${Mailbox},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${Force},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Enable-InboxRule') `
                            -Arg ('Enable-InboxRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Enable-InboxRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-InboxRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Enable-JournalRule') `
                            -Arg ('Enable-JournalRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Enable-JournalRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-JournalRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${RoleAssignmentPolicy},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Archive},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    ${ArchiveName},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${Force},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Enable-Mailbox') `
                            -Arg ('Enable-Mailbox', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Enable-Mailbox
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-Mailbox","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${HiddenFromAddressListsEnabled},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${OverrideRecipientQuotas},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Enable-MailPublicFolder') `
                            -Arg ('Enable-MailPublicFolder', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Enable-MailPublicFolder
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-MailPublicFolder","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Enable-MalwareFilterRule') `
                            -Arg ('Enable-MalwareFilterRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Enable-MalwareFilterRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-MalwareFilterRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-MMAgent","Function","Public","MMAgent","MMAgent","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-NetAdapter","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-NetAdapterBinding","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-NetAdapterChecksumOffload","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-NetAdapterEncapsulatedPacketTaskOffload","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-NetAdapterIPsecOffload","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-NetAdapterLso","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-NetAdapterPowerManagement","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-NetAdapterQos","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-NetAdapterRdma","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-NetAdapterRsc","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-NetAdapterRss","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-NetAdapterSriov","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-NetAdapterVmq","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-NetDnsTransitionConfiguration","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-NetFirewallRule","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-NetIPHttpsProfile","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-NetIPsecMainModeRule","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-NetIPsecRule","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-NetNatTransitionConfiguration","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-OdbcPerfCounter","Function","Public","Wdac","Wdac","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Enable-OrganizationCustomization') `
                            -Arg ('Enable-OrganizationCustomization', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Enable-OrganizationCustomization
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-OrganizationCustomization","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Enable-OutlookProtectionRule') `
                            -Arg ('Enable-OutlookProtectionRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Enable-OutlookProtectionRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-OutlookProtectionRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-PhysicalDiskIndication","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-PSTrace","Function","Public","PSDiagnostics","PSDiagnostics","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-PSWSManCombinedTrace","Function","Public","PSDiagnostics","PSDiagnostics","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-ScheduledTask","Function","Public","ScheduledTasks","ScheduledTasks","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-SmbDelegation","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-StorageEnclosureIdentification","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${Mode},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    ${WarningVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Enable-TransportRule') `
                            -Arg ('Enable-TransportRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Enable-TransportRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-TransportRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Enable-UMAutoAttendant') `
                            -Arg ('Enable-UMAutoAttendant', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Enable-UMAutoAttendant
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-UMAutoAttendant","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${Mailbox},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Enable-UMCallAnsweringRule') `
                            -Arg ('Enable-UMCallAnsweringRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Enable-UMCallAnsweringRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-UMCallAnsweringRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Enable-UMIPGateway') `
                            -Arg ('Enable-UMIPGateway', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Enable-UMIPGateway
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-UMIPGateway","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${AutomaticSpeechRecognitionEnabled},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${ValidateOnly},

    [Alias('wa')]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    ${SendWelcomeMail},

    ${Extensions},

    [Alias('ob')]
    ${OutBuffer},

    ${PinExpired},

    ${NotifyEmail},

    ${Identity},

    ${SIPResourceIdentifier},

    [Alias('ev')]
    ${ErrorVariable},

    ${UMMailboxPolicy},

    ${Pin},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wv')]
    ${WarningVariable},

    ${PilotNumber},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Enable-UMMailbox') `
                            -Arg ('Enable-UMMailbox', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Enable-UMMailbox
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-UMMailbox","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-WdacBidTrace","Function","Public","Wdac","Wdac","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-WSManTrace","Function","Public","PSDiagnostics","PSDiagnostics","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Export-DlpPolicyCollection') `
                            -Arg ('Export-DlpPolicyCollection', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Export-DlpPolicyCollection
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Export-DlpPolicyCollection","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${ComponentName},

    [switch]
    ${ExtendedProperties},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Archive},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Export-MailboxDiagnosticLogs') `
                            -Arg ('Export-MailboxDiagnosticLogs', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Export-MailboxDiagnosticLogs
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Export-MailboxDiagnosticLogs","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${StartingRowIndex},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${RowCount},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${CsvStream},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Export-MigrationReport') `
                            -Arg ('Export-MigrationReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Export-MigrationReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Export-MigrationReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Export-ScheduledTask","Function","Public","ScheduledTasks","ScheduledTasks","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Export-TransportRuleCollection') `
                            -Arg ('Export-TransportRuleCollection', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Export-TransportRuleCollection
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Export-TransportRuleCollection","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${ClientStream},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${UMIPGateway},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${Date},

    ${UMDialPlan},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Export-UMCallDataRecord') `
                            -Arg ('Export-UMCallDataRecord', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Export-UMCallDataRecord
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Export-UMCallDataRecord","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${UMDialPlan},

    ${PromptFileName},

    ${UMAutoAttendant},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Export-UMPrompt') `
                            -Arg ('Export-UMPrompt', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Export-UMPrompt
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Export-UMPrompt","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-Location F:","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","F:","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Find-NetIPsecRule","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Find-NetRoute","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Format-Volume","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-Location G:","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","G:","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-AcceptedDomain') `
                            -Arg ('Get-AcceptedDomain', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-AcceptedDomain
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-AcceptedDomain","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${SortBy},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Mailbox},

    [Alias('ev')]
    ${ErrorVariable},

    ${OrganizationalUnit},

    ${Filter},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${Identity},

    ${ResultSize},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ActiveSyncDevice') `
                            -Arg ('Get-ActiveSyncDevice', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-ActiveSyncDevice
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ActiveSyncDevice","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ActiveSyncDeviceAccessRule') `
                            -Arg ('Get-ActiveSyncDeviceAccessRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-ActiveSyncDeviceAccessRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ActiveSyncDeviceAccessRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${SortBy},

    ${Filter},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ActiveSyncDeviceClass') `
                            -Arg ('Get-ActiveSyncDeviceClass', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-ActiveSyncDeviceClass
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ActiveSyncDeviceClass","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [switch]
    ${ShowRecoveryPassword},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Mailbox},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${GetMailboxLog},

    ${Identity},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    ${NotificationEmailAddresses},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ActiveSyncDeviceStatistics') `
                            -Arg ('Get-ActiveSyncDeviceStatistics', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-ActiveSyncDeviceStatistics
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ActiveSyncDeviceStatistics","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ActiveSyncMailboxPolicy') `
                            -Arg ('Get-ActiveSyncMailboxPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-ActiveSyncMailboxPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ActiveSyncMailboxPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ActiveSyncOrganizationSettings') `
                            -Arg ('Get-ActiveSyncOrganizationSettings', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-ActiveSyncOrganizationSettings
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ActiveSyncOrganizationSettings","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-AddressBookPolicy') `
                            -Arg ('Get-AddressBookPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-AddressBookPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-AddressBookPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-AdminAuditLogConfig') `
                            -Arg ('Get-AdminAuditLogConfig', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-AdminAuditLogConfig
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-AdminAuditLogConfig","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-AdministrativeUnit') `
                            -Arg ('Get-AdministrativeUnit', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-AdministrativeUnit
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-AdministrativeUnit","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${Mailbox},

    [switch]
    ${OrganizationApp},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-App') `
                            -Arg ('Get-App', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-App
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-App","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-AppBackgroundTask","Function","Public","AppBackgroundTask","AppBackgroundTask","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-AppxLastError","Function","Public","Appx","Appx","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-AppxLog","Function","Public","Appx","Appx","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-AuditConfig') `
                            -Arg ('Get-AuditConfig', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-AuditConfig
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-AuditConfig","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-AuditConfigurationPolicy') `
                            -Arg ('Get-AuditConfigurationPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-AuditConfigurationPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-AuditConfigurationPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-AuditConfigurationRule') `
                            -Arg ('Get-AuditConfigurationRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-AuditConfigurationRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-AuditConfigurationRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Type},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    ${CreatedAfter},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    ${CreatedBefore},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-AuditLogSearch') `
                            -Arg ('Get-AuditLogSearch', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-AuditLogSearch
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-AuditLogSearch","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-AuthServer') `
                            -Arg ('Get-AuthServer', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-AuthServer
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-AuthServer","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-AvailabilityAddressSpace') `
                            -Arg ('Get-AvailabilityAddressSpace', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-AvailabilityAddressSpace
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-AvailabilityAddressSpace","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-AvailabilityConfig') `
                            -Arg ('Get-AvailabilityConfig', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-AvailabilityConfig
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-AvailabilityConfig","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-BitLockerVolume","Function","Public","BitLocker","BitLocker","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    ${SenderAddress},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-BlockedSenderAddress') `
                            -Arg ('Get-BlockedSenderAddress', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-BlockedSenderAddress
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-BlockedSenderAddress","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${GlobalObjectId},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${LogLocation},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${OutputAs},

    [Alias('ev')]
    ${ErrorVariable},

    ${DetailLevel},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${CalendarLogs},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-CalendarDiagnosticAnalysis') `
                            -Arg ('Get-CalendarDiagnosticAnalysis', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-CalendarDiagnosticAnalysis
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CalendarDiagnosticAnalysis","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [switch]
    ${Latest},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Subject},

    ${LogLocation},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${EndDate},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    ${MeetingID},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    ${ExactMatch},

    ${StartDate},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-CalendarDiagnosticLog') `
                            -Arg ('Get-CalendarDiagnosticLog', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-CalendarDiagnosticLog
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CalendarDiagnosticLog","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Subject},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${EndDate},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ev')]
    ${ErrorVariable},

    ${OutputProperties},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    ${MeetingID},

    ${EntryID},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    ${ExactMatch},

    ${CustomPropertyNames},

    ${StartDate},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-CalendarDiagnosticObjects') `
                            -Arg ('Get-CalendarDiagnosticObjects', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-CalendarDiagnosticObjects
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CalendarDiagnosticObjects","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${ReadFromDomainController},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    ${Credential},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-CalendarNotification') `
                            -Arg ('Get-CalendarNotification', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-CalendarNotification
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CalendarNotification","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-CalendarProcessing') `
                            -Arg ('Get-CalendarProcessing', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-CalendarProcessing
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CalendarProcessing","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-CaseHoldPolicy') `
                            -Arg ('Get-CaseHoldPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-CaseHoldPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CaseHoldPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Policy},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-CaseHoldRule') `
                            -Arg ('Get-CaseHoldRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-CaseHoldRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CaseHoldRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${SortBy},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${ReadIsOptimizedForAccessibility},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Credential},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    ${OrganizationalUnit},

    [switch]
    ${ActiveSyncDebugLogging},

    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [switch]
    ${ProtocolSettings},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${RecalculateHasActiveSyncDevicePartnership},

    ${Filter},

    ${ResultSize},

    ${Anr},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-CASMailbox') `
                            -Arg ('Get-CASMailbox', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-CASMailbox
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CASMailbox","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${SortBy},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Credential},

    [Alias('ev')]
    ${ErrorVariable},

    ${Filter},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${Identity},

    ${ResultSize},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-CASMailboxPlan') `
                            -Arg ('Get-CASMailboxPlan', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-CASMailboxPlan
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CASMailboxPlan","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ClassificationRuleCollection') `
                            -Arg ('Get-ClassificationRuleCollection', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-ClassificationRuleCollection
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ClassificationRuleCollection","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ClusteredScheduledTask","Function","Public","ScheduledTasks","ScheduledTasks","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-Clutter') `
                            -Arg ('Get-Clutter', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-Clutter
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Clutter","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    ${DomainController},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-CompliancePolicyFileSyncNotification') `
                            -Arg ('Get-CompliancePolicyFileSyncNotification', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-CompliancePolicyFileSyncNotification
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CompliancePolicyFileSyncNotification","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-CompliancePolicySyncNotification') `
                            -Arg ('Get-CompliancePolicySyncNotification', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-CompliancePolicySyncNotification
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CompliancePolicySyncNotification","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    ${ReportType},

    ${StartDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ConnectionByClientTypeDetailReport') `
                            -Arg ('Get-ConnectionByClientTypeDetailReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-ConnectionByClientTypeDetailReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ConnectionByClientTypeDetailReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    ${ReportType},

    ${StartDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ConnectionByClientTypeReport') `
                            -Arg ('Get-ConnectionByClientTypeReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-ConnectionByClientTypeReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ConnectionByClientTypeReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${IncludeReport},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${Mailbox},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    [Alias('ov')]
    ${OutVariable},

    ${AggregationType},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ConnectSubscription') `
                            -Arg ('Get-ConnectSubscription', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-ConnectSubscription
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ConnectSubscription","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${SortBy},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ev')]
    ${ErrorVariable},

    ${OrganizationalUnit},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    ${RecipientTypeDetails},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    ${Filter},

    ${Anr},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-Contact') `
                            -Arg ('Get-Contact', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-Contact
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Contact","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    ${ReportType},

    ${StartDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-CsActiveUserReport') `
                            -Arg ('Get-CsActiveUserReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-CsActiveUserReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CsActiveUserReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    ${ReportType},

    ${StartDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-CsAVConferenceTimeReport') `
                            -Arg ('Get-CsAVConferenceTimeReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-CsAVConferenceTimeReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CsAVConferenceTimeReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ov')]
    ${OutVariable},

    ${UserName},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    ${StartDate},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-CsClientDeviceDetailReport') `
                            -Arg ('Get-CsClientDeviceDetailReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-CsClientDeviceDetailReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CsClientDeviceDetailReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ov')]
    ${OutVariable},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    ${StartDate},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-CsClientDeviceReport') `
                            -Arg ('Get-CsClientDeviceReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-CsClientDeviceReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CsClientDeviceReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    ${ReportType},

    ${StartDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-CsConferenceReport') `
                            -Arg ('Get-CsConferenceReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-CsConferenceReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CsConferenceReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    ${ReportType},

    ${StartDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-CsP2PAVTimeReport') `
                            -Arg ('Get-CsP2PAVTimeReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-CsP2PAVTimeReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CsP2PAVTimeReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    ${ReportType},

    ${StartDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-CsP2PSessionReport') `
                            -Arg ('Get-CsP2PSessionReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-CsP2PSessionReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CsP2PSessionReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    ${ReportType},

    ${StartDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-CsPSTNConferenceTimeReport') `
                            -Arg ('Get-CsPSTNConferenceTimeReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-CsPSTNConferenceTimeReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CsPSTNConferenceTimeReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ov')]
    ${OutVariable},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    ${StartDate},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-CsPSTNUsageDetailReport') `
                            -Arg ('Get-CsPSTNUsageDetailReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-CsPSTNUsageDetailReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CsPSTNUsageDetailReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ov')]
    ${OutVariable},

    ${UserName},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    ${StartDate},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-CsUserActivitiesReport') `
                            -Arg ('Get-CsUserActivitiesReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-CsUserActivitiesReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CsUserActivitiesReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ov')]
    ${OutVariable},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    ${StartDate},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-CsUsersBlockedReport') `
                            -Arg ('Get-CsUsersBlockedReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-CsUsersBlockedReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CsUsersBlockedReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DAClientExperienceConfiguration","Function","Public","DirectAccessClientComponents","DirectAccessClientComponents","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DAConnectionStatus","Function","Public","NetworkConnectivityStatus","NetworkConnectivityStatus","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DAEntryPointTableItem","Function","Public","DirectAccessClientComponents","DirectAccessClientComponents","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    ${ClassificationRuleCollectionIdentity},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-DataClassification') `
                            -Arg ('Get-DataClassification', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-DataClassification
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DataClassification","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-DataClassificationConfig') `
                            -Arg ('Get-DataClassificationConfig', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-DataClassificationConfig
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DataClassificationConfig","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    ${DeviceUserName},

    [Alias('db')]
    [switch]
    ${Debug},

    ${EndDate},

    [Alias('ev')]
    ${ErrorVariable},

    ${DeviceComplianceStatus},

    [Alias('ob')]
    ${OutBuffer},

    ${DevicePlatform},

    [Alias('wa')]
    ${WarningAction},

    ${DeviceCompliancePolicy},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-DeviceComplianceDetailsReport') `
                            -Arg ('Get-DeviceComplianceDetailsReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-DeviceComplianceDetailsReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DeviceComplianceDetailsReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-DeviceComplianceDetailsReportFilter') `
                            -Arg ('Get-DeviceComplianceDetailsReportFilter', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-DeviceComplianceDetailsReportFilter
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DeviceComplianceDetailsReportFilter","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-DeviceCompliancePolicyInventory') `
                            -Arg ('Get-DeviceCompliancePolicyInventory', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-DeviceCompliancePolicyInventory
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DeviceCompliancePolicyInventory","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-DeviceComplianceReportDate') `
                            -Arg ('Get-DeviceComplianceReportDate', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-DeviceComplianceReportDate
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DeviceComplianceReportDate","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    ${DeviceUserName},

    [Alias('db')]
    [switch]
    ${Debug},

    ${EndDate},

    [Alias('ev')]
    ${ErrorVariable},

    ${DeviceComplianceStatus},

    [Alias('ob')]
    ${OutBuffer},

    ${DevicePlatform},

    [Alias('wa')]
    ${WarningAction},

    ${DeviceCompliancePolicy},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-DeviceComplianceSummaryReport') `
                            -Arg ('Get-DeviceComplianceSummaryReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-DeviceComplianceSummaryReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DeviceComplianceSummaryReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-DeviceComplianceUserInventory') `
                            -Arg ('Get-DeviceComplianceUserInventory', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-DeviceComplianceUserInventory
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DeviceComplianceUserInventory","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-DeviceComplianceUserReport') `
                            -Arg ('Get-DeviceComplianceUserReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-DeviceComplianceUserReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DeviceComplianceUserReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-DeviceConditionalAccessPolicy') `
                            -Arg ('Get-DeviceConditionalAccessPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-DeviceConditionalAccessPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DeviceConditionalAccessPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-DeviceConditionalAccessRule') `
                            -Arg ('Get-DeviceConditionalAccessRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-DeviceConditionalAccessRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DeviceConditionalAccessRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-DeviceConfigurationPolicy') `
                            -Arg ('Get-DeviceConfigurationPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-DeviceConfigurationPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DeviceConfigurationPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-DeviceConfigurationRule') `
                            -Arg ('Get-DeviceConfigurationRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-DeviceConfigurationRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DeviceConfigurationRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-DevicePolicy') `
                            -Arg ('Get-DevicePolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-DevicePolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DevicePolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-DeviceTenantPolicy') `
                            -Arg ('Get-DeviceTenantPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-DeviceTenantPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DeviceTenantPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-DeviceTenantRule') `
                            -Arg ('Get-DeviceTenantRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-DeviceTenantRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DeviceTenantRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Disk","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DiskImage","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${SortBy},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Credential},

    [Alias('ev')]
    ${ErrorVariable},

    ${OrganizationalUnit},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    ${RecipientTypeDetails},

    [Alias('wa')]
    ${WarningAction},

    ${ManagedBy},

    ${Filter},

    ${ResultSize},

    ${Anr},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-DistributionGroup') `
                            -Arg ('Get-DistributionGroup', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-DistributionGroup
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DistributionGroup","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    ${Credential},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-DistributionGroupMember') `
                            -Arg ('Get-DistributionGroupMember', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-DistributionGroupMember
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DistributionGroupMember","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-DkimSigningConfig') `
                            -Arg ('Get-DkimSigningConfig', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-DkimSigningConfig
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DkimSigningConfig","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    ${DomainController},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-DlpCompliancePolicy') `
                            -Arg ('Get-DlpCompliancePolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-DlpCompliancePolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DlpCompliancePolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Policy},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    ${DomainController},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-DlpComplianceRule') `
                            -Arg ('Get-DlpComplianceRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-DlpComplianceRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DlpComplianceRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${Action},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Source},

    ${Page},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Actor},

    ${DlpCompliancePolicy},

    ${PageSize},

    [Alias('ob')]
    ${OutBuffer},

    ${Expression},

    ${EndDate},

    ${EventType},

    [Alias('ev')]
    ${ErrorVariable},

    ${DlpComplianceRule},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    ${StartDate},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-DlpDetailReport') `
                            -Arg ('Get-DlpDetailReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-DlpDetailReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DlpDetailReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${Action},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Source},

    ${Page},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${EndDate},

    ${DlpCompliancePolicy},

    ${PageSize},

    ${AggregateBy},

    ${Expression},

    ${EventType},

    [Alias('ev')]
    ${ErrorVariable},

    ${DlpComplianceRule},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    ${StartDate},

    ${SummarizeBy},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-DlpDetectionsReport') `
                            -Arg ('Get-DlpDetectionsReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-DlpDetectionsReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DlpDetectionsReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-DlpPolicy') `
                            -Arg ('Get-DlpPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-DlpPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DlpPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-DlpPolicyTemplate') `
                            -Arg ('Get-DlpPolicyTemplate', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-DlpPolicyTemplate
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DlpPolicyTemplate","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_DNSClient')]

    param(
    
    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNull()]
    [uint32[]]
    ${InterfaceIndex},

    [Parameter(ParameterSetName='ByName', Position=0)]
    [ValidateNotNull()]
    [string[]]
    ${InterfaceAlias},

    [Parameter(ParameterSetName='ByName')]
    [Alias('Suffix')]
    [ValidateNotNull()]
    [string[]]
    ${ConnectionSpecificSuffix},

    [Parameter(ParameterSetName='ByName')]
    [ValidateNotNull()]
    [bool[]]
    ${RegisterThisConnectionsAddress},

    [Parameter(ParameterSetName='ByName')]
    [ValidateNotNull()]
    [bool[]]
    ${UseSuffixWhenRegistering},

    [Parameter(ParameterSetName='ByName')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InterfaceIndex})
        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InterfaceAlias})
        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ConnectionSpecificSuffix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ConnectionSpecificSuffix})
        $__cmdletization_queryBuilder.FilterByProperty('ConnectionSpecificSuffix', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RegisterThisConnectionsAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RegisterThisConnectionsAddress})
        $__cmdletization_queryBuilder.FilterByProperty('RegisterThisConnectionsAddress', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('UseSuffixWhenRegistering') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${UseSuffixWhenRegistering})
        $__cmdletization_queryBuilder.FilterByProperty('UseSuffixWhenRegistering', $__cmdletization_values, $false, 'Default')
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_DnsClient.cdxml-Help.xml
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DnsClient","Function","Public","DnsClient","DnsClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_DNSClientCache')]

    param(
    
    [Parameter(ParameterSetName='ByName', Position=0)]
    [ValidateNotNull()]
    [string[]]
    ${Entry},

    [Parameter(ParameterSetName='ByName')]
    [Alias('RecordName')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByName')]
    [Alias('RecordType')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.DnsClientCache.Type[]]
    ${Type},

    [Parameter(ParameterSetName='ByName')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.DnsClientCache.Status[]]
    ${Status},

    [Parameter(ParameterSetName='ByName')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.DnsClientCache.Section[]]
    ${Section},

    [Parameter(ParameterSetName='ByName')]
    [Alias('TTL')]
    [ValidateNotNull()]
    [uint32[]]
    ${TimeToLive},

    [Parameter(ParameterSetName='ByName')]
    [ValidateNotNull()]
    [uint16[]]
    ${DataLength},

    [Parameter(ParameterSetName='ByName')]
    [ValidateNotNull()]
    [string[]]
    ${Data},

    [Parameter(ParameterSetName='ByName')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Entry') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Entry})
        $__cmdletization_queryBuilder.FilterByProperty('Entry', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Type') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Type})
        $__cmdletization_queryBuilder.FilterByProperty('Type', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Section') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Section})
        $__cmdletization_queryBuilder.FilterByProperty('Section', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('TimeToLive') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${TimeToLive})
        $__cmdletization_queryBuilder.FilterByProperty('TimeToLive', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DataLength') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DataLength})
        $__cmdletization_queryBuilder.FilterByProperty('DataLength', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Data') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Data})
        $__cmdletization_queryBuilder.FilterByProperty('Data', $__cmdletization_values, $true, 'Default')
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_DnsClientCache.cdxml-Help.xml
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DnsClientCache","Function","Public","DnsClient","DnsClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    [CmdletBinding(PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_DNSClientGlobalSetting')]

    param(
    
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [int]
    ${ThrottleLimit},

    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_DnsClientGlobalSetting.cdxml-Help.xml
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DnsClientGlobalSetting","Function","Public","DnsClient","DnsClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    [CmdletBinding(PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])][OutputType('Microsoft.Management.Infrastructure.CimInstance#DnsClientNrptGlobal')]
    param(
    
    [Parameter(ParameterSetName='Get0', ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Server},

    [Parameter(ParameterSetName='Get0', ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string]
    ${GpoName},

    [Parameter(ParameterSetName='Get0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Get0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Get0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Server')) {
          [object]$__cmdletization_value = ${Server}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Server'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Server'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GpoName')) {
          [object]$__cmdletization_value = ${GpoName}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'GpoName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'GpoName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#DnsClientNrptGlobal'
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Get', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP PS_DnsClientNRPTGlobal_v1.0.0.cdxml-Help.xml
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DnsClientNrptGlobal","Function","Public","DnsClient","DnsClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    [CmdletBinding(PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType('Microsoft.Management.Infrastructure.CimInstance#DnsClientPolicyConfiguration')]
    param(
    
    [Parameter(ParameterSetName='Get0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${Effective},

    [Parameter(ParameterSetName='Get0', Position=1, ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Namespace},

    [Parameter(ParameterSetName='Get0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Get0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Get0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Effective')) {
          [object]$__cmdletization_value = ${Effective}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Effective'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Effective'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Namespace')) {
          [object]$__cmdletization_value = ${Namespace}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Namespace'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Namespace'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#DnsClientPolicyConfiguration'
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Get', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP PS_DnsClientNrptPolicy_v1.0.0.cdxml-Help.xml
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DnsClientNrptPolicy","Function","Public","DnsClient","DnsClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    [CmdletBinding(PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType('Microsoft.Management.Infrastructure.CimInstance#DnsClientNrptRule')]
    param(
    
    [Parameter(ParameterSetName='Get1', ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string]
    ${GpoName},

    [Parameter(ParameterSetName='Get1', Position=1, ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='Get1', ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Server},

    [Parameter(ParameterSetName='Get1')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Get1')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Get1')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GpoName')) {
          [object]$__cmdletization_value = ${GpoName}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'GpoName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'GpoName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Name'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Name'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Server')) {
          [object]$__cmdletization_value = ${Server}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Server'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Server'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#DnsClientNrptRule'
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Get', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP PS_DnsClientNRPTRule_v1.0.0.cdxml-Help.xml
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DnsClientNrptRule","Function","Public","DnsClient","DnsClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_DNSClientServerAddress')]

    param(
    
    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNull()]
    [uint32[]]
    ${InterfaceIndex},

    [Parameter(ParameterSetName='ByName', Position=0)]
    [ValidateNotNull()]
    [string[]]
    ${InterfaceAlias},

    [Parameter(ParameterSetName='ByName')]
    [Alias('Family')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.DnsClientServerAddress.AddressFamily[]]
    ${AddressFamily},

    [Parameter(ParameterSetName='ByName')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InterfaceIndex})
        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InterfaceAlias})
        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AddressFamily})
        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_DnsClientServerAddress.cdxml-Help.xml
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DnsClientServerAddress","Function","Public","DnsClient","DnsClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DscConfiguration","Function","Public","PSDesiredStateConfiguration","PSDesiredStateConfiguration","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DscLocalConfigurationManager","Function","Public","PSDesiredStateConfiguration","PSDesiredStateConfiguration","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DscResource","Function","Public","PSDesiredStateConfiguration","PSDesiredStateConfiguration","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Dtc","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DtcAdvancedHostSetting","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DtcAdvancedSetting","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DtcClusterDefault","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DtcClusterTMMapping","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DtcDefault","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DtcLog","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DtcNetworkSetting","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DtcTransaction","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DtcTransactionsStatistics","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DtcTransactionsTraceSession","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DtcTransactionsTraceSetting","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${SortBy},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Credential},

    [Alias('ev')]
    ${ErrorVariable},

    ${OrganizationalUnit},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${ManagedBy},

    ${Filter},

    ${ResultSize},

    ${Anr},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-DynamicDistributionGroup') `
                            -Arg ('Get-DynamicDistributionGroup', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-DynamicDistributionGroup
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DynamicDistributionGroup","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-EmailAddressPolicy') `
                            -Arg ('Get-EmailAddressPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-EmailAddressPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-EmailAddressPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${ErrorCode},

    ${EndDate},

    ${FailureMode},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Archive},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('mailbox')]
    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    ${StartDate},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-FailedContentIndexDocuments') `
                            -Arg ('Get-FailedContentIndexDocuments', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-FailedContentIndexDocuments
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-FailedContentIndexDocuments","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [switch]
    ${IncludeExtendedDomainInfo},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-FederatedOrganizationIdentifier') `
                            -Arg ('Get-FederatedOrganizationIdentifier', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-FederatedOrganizationIdentifier
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-FederatedOrganizationIdentifier","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [switch]
    ${BypassAdditionalDomainValidation},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    ${TrustedHostnames},

    ${DomainName},

    [switch]
    ${Force},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-FederationInformation') `
                            -Arg ('Get-FederationInformation', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-FederationInformation
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-FederationInformation","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-FederationTrust') `
                            -Arg ('Get-FederationTrust', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-FederationTrust
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-FederationTrust","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${PageSize},

    ${Page},

    [Alias('ov')]
    ${OutVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ea')]
    ${ErrorAction},

    ${Expression},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-FfoMigrationReport') `
                            -Arg ('Get-FfoMigrationReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-FfoMigrationReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-FfoMigrationReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    [CmdletBinding(DefaultParameterSetName = ""Path"")]
    param(
        [Parameter(Mandatory, ParameterSetName=""Path"", Position = 0)]
        [System.String[]]
        $Path,

        [Parameter(Mandatory, ParameterSetName=""LiteralPath"", ValueFromPipelineByPropertyName = $true)]
        [Alias(""PSPath"")]
        [System.String[]]
        $LiteralPath,
        
        [Parameter(Mandatory, ParameterSetName=""Stream"")]
        [System.IO.Stream]
        $InputStream,

        [ValidateSet(""SHA1"", ""SHA256"", ""SHA384"", ""SHA512"", ""MACTripleDES"", ""MD5"", ""RIPEMD160"")]
        [System.String]
        $Algorithm=""SHA256""
    )
    
    begin
    {
        # Construct the strongly-typed crypto object
        $hasher = [System.Security.Cryptography.HashAlgorithm]::Create($Algorithm)
    }
    
    process
    {
        if($PSCmdlet.ParameterSetName -eq ""Stream"")
        {
            GetStreamHash -InputStream $InputStream -RelatedPath $null -Hasher $hasher
        }
        else
        {
            $pathsToProcess = @()
            if($PSCmdlet.ParameterSetName  -eq ""LiteralPath"")
            {
                $pathsToProcess += Resolve-Path -LiteralPath $LiteralPath | Foreach-Object ProviderPath
            }
            if($PSCmdlet.ParameterSetName -eq ""Path"")
            {
                $pathsToProcess += Resolve-Path $Path | Foreach-Object ProviderPath
            }

            foreach($filePath in $pathsToProcess)
            {
                if(Test-Path -LiteralPath $filePath -PathType Container)
                {
                    continue
                }

                try
                {
                    # Read the file specified in $FilePath as a Byte array
                    [system.io.stream]$stream = [system.io.file]::OpenRead($filePath)
                    GetStreamHash -InputStream $stream  -RelatedPath $filePath -Hasher $hasher
                }
                catch [Exception]
                {
                    $errorMessage = [Microsoft.PowerShell.Commands.UtilityResources]::FileReadError -f $FilePath, $_
                    Write-Error -Message $errorMessage -Category ReadError -ErrorId ""FileReadError"" -TargetObject $FilePath
                    return
                }
                finally
                {
                    if($stream)
                    {
                        $stream.Close()
                    }
                }                            
            }
        }
    }
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-FileHash","Function","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-FileIntegrity","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-FileStorageTier","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${SortBy},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ev')]
    ${ErrorVariable},

    ${OrganizationalUnit},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    ${RecipientTypeDetails},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    ${Filter},

    ${Anr},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-Group') `
                            -Arg ('Get-Group', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-Group
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Group","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    ${ReportType},

    ${StartDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-GroupActivityReport') `
                            -Arg ('Get-GroupActivityReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-GroupActivityReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-GroupActivityReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [switch]
    ${IncludeMailboxUrls},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${SortBy},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${IncludeMembers},

    [Alias('ev')]
    ${ErrorVariable},

    ${Filter},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${Identity},

    ${ResultSize},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-GroupMailbox') `
                            -Arg ('Get-GroupMailbox', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-GroupMailbox
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-GroupMailbox","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${JobId},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-HistoricalSearch') `
                            -Arg ('Get-HistoricalSearch', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-HistoricalSearch
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-HistoricalSearch","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-HoldCompliancePolicy') `
                            -Arg ('Get-HoldCompliancePolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-HoldCompliancePolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-HoldCompliancePolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Policy},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-HoldComplianceRule') `
                            -Arg ('Get-HoldComplianceRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-HoldComplianceRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-HoldComplianceRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-HostedConnectionFilterPolicy') `
                            -Arg ('Get-HostedConnectionFilterPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-HostedConnectionFilterPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-HostedConnectionFilterPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-HostedContentFilterPolicy') `
                            -Arg ('Get-HostedContentFilterPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-HostedContentFilterPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-HostedContentFilterPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    ${State},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-HostedContentFilterRule') `
                            -Arg ('Get-HostedContentFilterRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-HostedContentFilterRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-HostedContentFilterRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-HostedOutboundSpamFilterPolicy') `
                            -Arg ('Get-HostedOutboundSpamFilterPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-HostedOutboundSpamFilterPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-HostedOutboundSpamFilterPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${IncludeReport},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${Mailbox},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    [Alias('ov')]
    ${OutVariable},

    ${AggregationType},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-HotmailSubscription') `
                            -Arg ('Get-HotmailSubscription', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-HotmailSubscription
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-HotmailSubscription","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-HybridMailflow') `
                            -Arg ('Get-HybridMailflow', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-HybridMailflow
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-HybridMailflow","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-HybridMailflowDatacenterIPs') `
                            -Arg ('Get-HybridMailflowDatacenterIPs', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-HybridMailflowDatacenterIPs
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-HybridMailflowDatacenterIPs","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${IncludeReport},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${Mailbox},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    [Alias('ov')]
    ${OutVariable},

    ${AggregationType},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ImapSubscription') `
                            -Arg ('Get-ImapSubscription', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-ImapSubscription
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ImapSubscription","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-InboundConnector') `
                            -Arg ('Get-InboundConnector', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-InboundConnector
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-InboundConnector","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${Mailbox},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    ${DescriptionTimeFormat},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    ${DescriptionTimeZone},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-InboxRule') `
                            -Arg ('Get-InboxRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-InboxRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-InboxRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-InitiatorId","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-InitiatorPort","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    ${OrganizationGuid},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-IntraOrganizationConfiguration') `
                            -Arg ('Get-IntraOrganizationConfiguration', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-IntraOrganizationConfiguration
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-IntraOrganizationConfiguration","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-IntraOrganizationConnector') `
                            -Arg ('Get-IntraOrganizationConnector', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-IntraOrganizationConnector
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-IntraOrganizationConnector","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-IRMConfiguration') `
                            -Arg ('Get-IRMConfiguration', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-IRMConfiguration
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-IRMConfiguration","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-IscsiConnection","Function","Public","iSCSI","iSCSI","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-IscsiSession","Function","Public","iSCSI","iSCSI","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-IscsiTarget","Function","Public","iSCSI","iSCSI","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-IscsiTargetPortal","Function","Public","iSCSI","iSCSI","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-IseSnippet","Function","Public","ISE","ISE","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-JournalRule') `
                            -Arg ('Get-JournalRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-JournalRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-JournalRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-LicenseVsUsageSummaryReport') `
                            -Arg ('Get-LicenseVsUsageSummaryReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-LicenseVsUsageSummaryReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-LicenseVsUsageSummaryReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${SortBy},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ev')]
    ${ErrorVariable},

    ${OrganizationalUnit},

    ${Filter},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${Identity},

    ${ResultSize},

    ${Anr},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-LinkedUser') `
                            -Arg ('Get-LinkedUser', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-LinkedUser
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-LinkedUser","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-LogonStatistics') `
                            -Arg ('Get-LogonStatistics', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-LogonStatistics
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-LogonStatistics","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-LogProperties","Function","Public","PSDiagnostics","PSDiagnostics","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [switch]
    ${IncludeInactiveMailbox},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${SortBy},

    [switch]
    ${InactiveMailboxOnly},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${GroupMailbox},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${PublicFolder},

    [switch]
    ${Archive},

    [Alias('ev')]
    ${ErrorVariable},

    ${OrganizationalUnit},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [switch]
    ${SoftDeletedMailbox},

    ${RecipientTypeDetails},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    ${Filter},

    ${MailboxPlan},

    ${Anr},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-Mailbox') `
                            -Arg ('Get-Mailbox', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-Mailbox
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Mailbox","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    ${ReportType},

    ${StartDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailboxActivityReport') `
                            -Arg ('Get-MailboxActivityReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailboxActivityReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailboxActivityReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailboxAuditBypassAssociation') `
                            -Arg ('Get-MailboxAuditBypassAssociation', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailboxAuditBypassAssociation
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailboxAuditBypassAssociation","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${ReadFromDomainController},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    ${Credential},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailboxAutoReplyConfiguration') `
                            -Arg ('Get-MailboxAutoReplyConfiguration', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailboxAutoReplyConfiguration
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailboxAutoReplyConfiguration","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailboxCalendarConfiguration') `
                            -Arg ('Get-MailboxCalendarConfiguration', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailboxCalendarConfiguration
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailboxCalendarConfiguration","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailboxCalendarFolder') `
                            -Arg ('Get-MailboxCalendarFolder', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailboxCalendarFolder
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailboxCalendarFolder","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [switch]
    ${GetChildren},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ea')]
    ${ErrorAction},

    [switch]
    ${MailFolderOnly},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    [switch]
    ${Recurse},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailboxFolder') `
                            -Arg ('Get-MailboxFolder', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailboxFolder
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailboxFolder","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    ${User},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailboxFolderPermission') `
                            -Arg ('Get-MailboxFolderPermission', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailboxFolderPermission
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailboxFolderPermission","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${IncludeOldestAndNewestItems},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Archive},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [switch]
    ${IncludeAnalysis},

    [Alias('wa')]
    ${WarningAction},

    ${FolderScope},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailboxFolderStatistics') `
                            -Arg ('Get-MailboxFolderStatistics', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailboxFolderStatistics
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailboxFolderStatistics","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${ReadFromDomainController},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    ${Credential},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailboxJunkEmailConfiguration') `
                            -Arg ('Get-MailboxJunkEmailConfiguration', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailboxJunkEmailConfiguration
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailboxJunkEmailConfiguration","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${User},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${MailboxLocationType},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailboxLocation') `
                            -Arg ('Get-MailboxLocation', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailboxLocation
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailboxLocation","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${ReadFromDomainController},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    ${Credential},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailboxMessageConfiguration') `
                            -Arg ('Get-MailboxMessageConfiguration', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailboxMessageConfiguration
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailboxMessageConfiguration","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailboxOverrideConfiguration') `
                            -Arg ('Get-MailboxOverrideConfiguration', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailboxOverrideConfiguration
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailboxOverrideConfiguration","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [switch]
    ${Owner},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${ReadFromDomainController},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Credential},

    ${User},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailboxPermission') `
                            -Arg ('Get-MailboxPermission', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailboxPermission
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailboxPermission","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${SortBy},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Credential},

    [Alias('ev')]
    ${ErrorVariable},

    ${OrganizationalUnit},

    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AllMailboxPlanReleases},

    ${Filter},

    ${ResultSize},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailboxPlan') `
                            -Arg ('Get-MailboxPlan', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailboxPlan
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailboxPlan","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailboxPreferredLocation') `
                            -Arg ('Get-MailboxPreferredLocation', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailboxPreferredLocation
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailboxPreferredLocation","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${VerifyDefaultFolderNameLanguage},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailboxRegionalConfiguration') `
                            -Arg ('Get-MailboxRegionalConfiguration', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailboxRegionalConfiguration
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailboxRegionalConfiguration","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${BatchName},

    ${Name},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${Suspend},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    ${Status},

    ${HighPriority},

    ${TargetMailbox},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailboxRestoreRequest') `
                            -Arg ('Get-MailboxRestoreRequest', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailboxRestoreRequest
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailboxRestoreRequest","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    ${WarningVariable},

    ${DiagnosticArgument},

    [switch]
    ${Diagnostic},

    [switch]
    ${IncludeReport},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailboxRestoreRequestStatistics') `
                            -Arg ('Get-MailboxRestoreRequestStatistics', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailboxRestoreRequestStatistics
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailboxRestoreRequestStatistics","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${InPlaceHoldIdentity},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [switch]
    ${ShowDeletionInProgressSearches},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailboxSearch') `
                            -Arg ('Get-MailboxSearch', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailboxSearch
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailboxSearch","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailboxSpellingConfiguration') `
                            -Arg ('Get-MailboxSpellingConfiguration', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailboxSpellingConfiguration
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailboxSpellingConfiguration","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [switch]
    ${Archive},

    [switch]
    ${IncludeMoveHistory},

    [switch]
    ${IncludeMoveReport},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailboxStatistics') `
                            -Arg ('Get-MailboxStatistics', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailboxStatistics
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailboxStatistics","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ov')]
    ${OutVariable},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    ${StartDate},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailboxUsageDetailReport') `
                            -Arg ('Get-MailboxUsageDetailReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailboxUsageDetailReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailboxUsageDetailReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ov')]
    ${OutVariable},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    ${StartDate},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailboxUsageReport') `
                            -Arg ('Get-MailboxUsageReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailboxUsageReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailboxUsageReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${SortBy},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ev')]
    ${ErrorVariable},

    ${OrganizationalUnit},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    ${RecipientTypeDetails},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    ${Filter},

    ${Anr},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailContact') `
                            -Arg ('Get-MailContact', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailContact
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailContact","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${Action},

    ${Direction},

    ${Page},

    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Expression},

    [Alias('wa')]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    ${EndDate},

    [Alias('ov')]
    ${OutVariable},

    ${PageSize},

    [Alias('ob')]
    ${OutBuffer},

    ${MessageTraceId},

    ${Domain},

    ${DlpPolicy},

    ${EventType},

    [Alias('ev')]
    ${ErrorVariable},

    ${TransportRule},

    ${SenderAddress},

    ${RecipientAddress},

    ${MessageId},

    ${StartDate},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailDetailDlpPolicyReport') `
                            -Arg ('Get-MailDetailDlpPolicyReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailDetailDlpPolicyReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailDetailDlpPolicyReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${Action},

    ${Direction},

    ${Page},

    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Expression},

    [Alias('wa')]
    ${WarningAction},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${EndDate},

    [Alias('ov')]
    ${OutVariable},

    ${PageSize},

    [Alias('ob')]
    ${OutBuffer},

    ${MessageTraceId},

    ${Domain},

    ${EventType},

    [Alias('ev')]
    ${ErrorVariable},

    ${MalwareName},

    ${RecipientAddress},

    ${MessageId},

    ${StartDate},

    ${SenderAddress},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailDetailMalwareReport') `
                            -Arg ('Get-MailDetailMalwareReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailDetailMalwareReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailDetailMalwareReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${Action},

    ${Direction},

    ${Page},

    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Expression},

    [Alias('wa')]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    ${EndDate},

    [Alias('ov')]
    ${OutVariable},

    ${PageSize},

    [Alias('ob')]
    ${OutBuffer},

    ${MessageTraceId},

    ${Domain},

    ${EventType},

    [Alias('ev')]
    ${ErrorVariable},

    ${SenderAddress},

    ${RecipientAddress},

    ${MessageId},

    ${StartDate},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailDetailSpamReport') `
                            -Arg ('Get-MailDetailSpamReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailDetailSpamReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailDetailSpamReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${Action},

    ${Direction},

    ${Page},

    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Expression},

    [Alias('wa')]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    ${EndDate},

    [Alias('ov')]
    ${OutVariable},

    ${PageSize},

    [Alias('ob')]
    ${OutBuffer},

    ${MessageTraceId},

    ${Domain},

    ${EventType},

    [Alias('ev')]
    ${ErrorVariable},

    ${TransportRule},

    ${SenderAddress},

    ${RecipientAddress},

    ${MessageId},

    ${StartDate},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailDetailTransportRuleReport') `
                            -Arg ('Get-MailDetailTransportRuleReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailDetailTransportRuleReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailDetailTransportRuleReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${Domain},

    [Alias('ov')]
    ${OutVariable},

    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    ${SelectionTarget},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ea')]
    ${ErrorAction},

    ${Expression},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailFilterListReport') `
                            -Arg ('Get-MailFilterListReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailFilterListReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailFilterListReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${SortBy},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Credential},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    ${Filter},

    ${Anr},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailPublicFolder') `
                            -Arg ('Get-MailPublicFolder', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailPublicFolder
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailPublicFolder","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${Action},

    ${Direction},

    ${Page},

    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${EndDate},

    ${PageSize},

    ${AggregateBy},

    ${Expression},

    ${Domain},

    ${DlpPolicy},

    ${EventType},

    [Alias('ev')]
    ${ErrorVariable},

    ${TransportRule},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${StartDate},

    ${SummarizeBy},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailTrafficPolicyReport') `
                            -Arg ('Get-MailTrafficPolicyReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailTrafficPolicyReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailTrafficPolicyReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${Action},

    ${Direction},

    ${Page},

    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${EndDate},

    ${PageSize},

    ${AggregateBy},

    ${Expression},

    ${Domain},

    ${EventType},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${StartDate},

    ${SummarizeBy},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailTrafficReport') `
                            -Arg ('Get-MailTrafficReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailTrafficReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailTrafficReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Page},

    ${ProbeTag},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${EndDate},

    ${PageSize},

    [Alias('ob')]
    ${OutBuffer},

    ${Expression},

    ${Domain},

    ${DlpPolicy},

    [Alias('ev')]
    ${ErrorVariable},

    ${TransportRule},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    ${StartDate},

    ${Category},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailTrafficSummaryReport') `
                            -Arg ('Get-MailTrafficSummaryReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailTrafficSummaryReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailTrafficSummaryReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${Action},

    ${Direction},

    ${Page},

    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${EndDate},

    ${PageSize},

    ${AggregateBy},

    ${Expression},

    ${Domain},

    ${EventType},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${StartDate},

    ${SummarizeBy},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailTrafficTopReport') `
                            -Arg ('Get-MailTrafficTopReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailTrafficTopReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailTrafficTopReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${SortBy},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ev')]
    ${ErrorVariable},

    ${OrganizationalUnit},

    ${Filter},

    [switch]
    ${SoftDeletedMailUser},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${Identity},

    ${ResultSize},

    ${Anr},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MailUser') `
                            -Arg ('Get-MailUser', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MailUser
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MailUser","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MalwareFilterPolicy') `
                            -Arg ('Get-MalwareFilterPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MalwareFilterPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MalwareFilterPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    ${State},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MalwareFilterRule') `
                            -Arg ('Get-MalwareFilterRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MalwareFilterRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MalwareFilterRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${RoleType},

    ${CmdletParameters},

    ${ScriptParameters},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    ${Cmdlet},

    [Alias('wa')]
    ${WarningAction},

    ${Script},

    [switch]
    ${GetChildren},

    [switch]
    ${Recurse},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ManagementRole') `
                            -Arg ('Get-ManagementRole', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-ManagementRole
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ManagementRole","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${AssignmentMethod},

    ${Exclusive},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${CustomRecipientWriteScope},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wa')]
    ${WarningAction},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${RecipientAdministrativeUnitScope},

    ${WritableRecipient},

    ${ExclusiveRecipientWriteScope},

    [Alias('ob')]
    ${OutBuffer},

    ${RoleAssignee},

    ${Identity},

    [switch]
    ${GetEffectiveUsers},

    [Alias('ea')]
    ${ErrorAction},

    ${Role},

    ${Delegating},

    ${RoleAssigneeType},

    ${Enabled},

    ${RecipientWriteScope},

    ${RecipientOrganizationalUnitScope},

    ${ConfigWriteScope},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ManagementRoleAssignment') `
                            -Arg ('Get-ManagementRoleAssignment', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-ManagementRoleAssignment
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ManagementRoleAssignment","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${Parameters},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    ${Type},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${PSSnapinName},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    ${WarningVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ManagementRoleEntry') `
                            -Arg ('Get-ManagementRoleEntry', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-ManagementRoleEntry
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ManagementRoleEntry","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${Exclusive},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [switch]
    ${Orphan},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ManagementScope') `
                            -Arg ('Get-ManagementScope', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-ManagementScope
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ManagementScope","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MaskingSet","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${Mailbox},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MessageCategory') `
                            -Arg ('Get-MessageCategory', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MessageCategory
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MessageCategory","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${IncludeLocales},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MessageClassification') `
                            -Arg ('Get-MessageClassification', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MessageClassification
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MessageClassification","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('ov')]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${ToIP},

    ${Page},

    ${ProbeTag},

    [Alias('wa')]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    ${EndDate},

    ${FromIP},

    ${MessageTraceId},

    ${PageSize},

    [Alias('ob')]
    ${OutBuffer},

    ${Expression},

    [Alias('ev')]
    ${ErrorVariable},

    ${SenderAddress},

    ${RecipientAddress},

    ${Status},

    ${MessageId},

    ${StartDate},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MessageTrace') `
                            -Arg ('Get-MessageTrace', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MessageTrace
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MessageTrace","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${Action},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Page},

    ${ProbeTag},

    ${Expression},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${EndDate},

    [Alias('ov')]
    ${OutVariable},

    ${MessageTraceId},

    ${PageSize},

    [Alias('ob')]
    ${OutBuffer},

    ${SenderAddress},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wa')]
    ${WarningAction},

    ${RecipientAddress},

    ${Event},

    ${MessageId},

    ${StartDate},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MessageTraceDetail') `
                            -Arg ('Get-MessageTraceDetail', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MessageTraceDetail
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MessageTraceDetail","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${RecipientPathFilter},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${ReportTemplate},

    ${Recipients},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${BypassDelegateChecking},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [switch]
    ${DoNotResolve},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    ${Status},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MessageTrackingReport') `
                            -Arg ('Get-MessageTrackingReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MessageTrackingReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MessageTrackingReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${IncludeReport},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${Status},

    [switch]
    ${Diagnostic},

    ${Endpoint},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MigrationBatch') `
                            -Arg ('Get-MigrationBatch', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MigrationBatch
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MigrationBatch","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MigrationConfig') `
                            -Arg ('Get-MigrationConfig', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MigrationConfig
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MigrationConfig","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${Type},

    ${ConnectionSettings},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [switch]
    ${Diagnostic},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MigrationEndpoint') `
                            -Arg ('Get-MigrationEndpoint', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MigrationEndpoint
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MigrationEndpoint","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [switch]
    ${Diagnostic},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MigrationStatistics') `
                            -Arg ('Get-MigrationStatistics', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MigrationStatistics
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MigrationStatistics","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    ${MailboxGuid},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    ${BatchId},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    ${Status},

    ${StatusSummary},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MigrationUser') `
                            -Arg ('Get-MigrationUser', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MigrationUser
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MigrationUser","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [switch]
    ${IncludeSkippedItems},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${IncludeReport},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${SkipSubscription},

    [switch]
    ${Diagnostic},

    ${LimitSkippedItemsTo},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MigrationUserStatistics') `
                            -Arg ('Get-MigrationUserStatistics', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MigrationUserStatistics
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MigrationUserStatistics","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MMAgent","Function","Public","MMAgent","MMAgent","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [switch]
    ${OWAforDevices},

    ${SortBy},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${UniversalOutlook},

    ${Mailbox},

    [Alias('ev')]
    ${ErrorVariable},

    ${OrganizationalUnit},

    ${Identity},

    [switch]
    ${ActiveSync},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    ${Filter},

    [switch]
    ${RestApi},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MobileDevice') `
                            -Arg ('Get-MobileDevice', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MobileDevice
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MobileDevice","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ov')]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    ${DeviceType},

    ${StartDate},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MobileDeviceDashboardSummaryReport') `
                            -Arg ('Get-MobileDeviceDashboardSummaryReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MobileDeviceDashboardSummaryReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MobileDeviceDashboardSummaryReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MobileDeviceMailboxPolicy') `
                            -Arg ('Get-MobileDeviceMailboxPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MobileDeviceMailboxPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MobileDeviceMailboxPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [switch]
    ${ShowRecoveryPassword},

    [switch]
    ${OWAforDevices},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${UniversalOutlook},

    ${Mailbox},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${GetMailboxLog},

    ${Identity},

    [switch]
    ${ActiveSync},

    [Alias('wa')]
    ${WarningAction},

    ${NotificationEmailAddresses},

    [switch]
    ${RestApi},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MobileDeviceStatistics') `
                            -Arg ('Get-MobileDeviceStatistics', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MobileDeviceStatistics
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MobileDeviceStatistics","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${Flags},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${BatchName},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${SortBy},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${MoveStatus},

    ${ProxyToMailbox},

    ${Suspend},

    ${OrganizationalUnit},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wa')]
    ${WarningAction},

    ${RemoteHostName},

    ${SuspendWhenReadyToComplete},

    ${Offline},

    ${ResultSize},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MoveRequest') `
                            -Arg ('Get-MoveRequest', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MoveRequest
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MoveRequest","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${IncludeReport},

    ${ProxyToMailbox},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    ${DiagnosticArgument},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${Diagnostic},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MoveRequestStatistics') `
                            -Arg ('Get-MoveRequestStatistics', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MoveRequestStatistics
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MoveRequestStatistics","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MpComputerStatus","Function","Public","Defender","Defender","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MpPreference","Function","Public","Defender","Defender","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MpThreat","Function","Public","Defender","Defender","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MpThreatCatalog","Function","Public","Defender","Defender","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MpThreatDetection","Function","Public","Defender","Defender","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${Domain},

    [Alias('ov')]
    ${OutVariable},

    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ea')]
    ${ErrorAction},

    ${Expression},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-MxRecordReport') `
                            -Arg ('Get-MxRecordReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-MxRecordReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MxRecordReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NCSIPolicyConfiguration","Function","Public","NetworkConnectivityStatus","NetworkConnectivityStatus","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Net6to4Configuration","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetAdapter","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetAdapterAdvancedProperty","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetAdapterBinding","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetAdapterChecksumOffload","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetAdapterEncapsulatedPacketTaskOffload","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetAdapterHardwareInfo","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetAdapterIPsecOffload","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetAdapterLso","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetAdapterPowerManagement","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetAdapterQos","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetAdapterRdma","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetAdapterRsc","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetAdapterRss","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetAdapterSriov","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetAdapterSriovVf","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetAdapterStatistics","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetAdapterVmq","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetAdapterVMQQueue","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetAdapterVPort","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetCompartment","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetConnectionProfile","Function","Public","NetConnection","NetConnection","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetDnsTransitionConfiguration","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetDnsTransitionMonitoring","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetEventNetworkAdapter","Function","Public","NetEventPacketCapture","NetEventPacketCapture","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetEventPacketCaptureProvider","Function","Public","NetEventPacketCapture","NetEventPacketCapture","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetEventProvider","Function","Public","NetEventPacketCapture","NetEventPacketCapture","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetEventSession","Function","Public","NetEventPacketCapture","NetEventPacketCapture","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetEventVmNetworkAdapter","Function","Public","NetEventPacketCapture","NetEventPacketCapture","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetEventVmSwitch","Function","Public","NetEventPacketCapture","NetEventPacketCapture","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetFirewallAddressFilter","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetFirewallApplicationFilter","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetFirewallInterfaceFilter","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetFirewallInterfaceTypeFilter","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetFirewallPortFilter","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetFirewallProfile","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetFirewallRule","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetFirewallSecurityFilter","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetFirewallServiceFilter","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetFirewallSetting","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetIPAddress","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetIPConfiguration","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetIPHttpsConfiguration","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetIPHttpsState","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetIPInterface","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetIPsecDospSetting","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetIPsecMainModeCryptoSet","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetIPsecMainModeRule","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetIPsecMainModeSA","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetIPsecPhase1AuthSet","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetIPsecPhase2AuthSet","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetIPsecQuickModeCryptoSet","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetIPsecQuickModeSA","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetIPsecRule","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetIPv4Protocol","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetIPv6Protocol","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetIsatapConfiguration","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetLbfoTeam","Function","Public","NetLbfo","NetLbfo","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetLbfoTeamMember","Function","Public","NetLbfo","NetLbfo","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetLbfoTeamNic","Function","Public","NetLbfo","NetLbfo","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetNat","Function","Public","NetNat","NetNat","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetNatExternalAddress","Function","Public","NetNat","NetNat","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetNatGlobal","Function","Public","NetNat","NetNat","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetNatSession","Function","Public","NetNat","NetNat","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetNatStaticMapping","Function","Public","NetNat","NetNat","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetNatTransitionConfiguration","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetNatTransitionMonitoring","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetNeighbor","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetOffloadGlobalSetting","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetPrefixPolicy","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetQosPolicy","Function","Public","NetQos","NetQos","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetRoute","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetSwitchTeam","Function","Public","NetSwitchTeam","NetSwitchTeam","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetSwitchTeamMember","Function","Public","NetSwitchTeam","NetSwitchTeam","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetTCPConnection","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetTCPSetting","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetTeredoConfiguration","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetTeredoState","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetTransportFilter","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetUDPEndpoint","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-NetUDPSetting","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Summary},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    ${ProcessType},

    ${StartDate},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-Notification') `
                            -Arg ('Get-Notification', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-Notification
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Notification","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${EndDate},

    ${WindowsLiveID},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    ${Browser},

    ${BrowserVersion},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    ${StartDate},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-O365ClientBrowserDetailReport') `
                            -Arg ('Get-O365ClientBrowserDetailReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-O365ClientBrowserDetailReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-O365ClientBrowserDetailReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ov')]
    ${OutVariable},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Browser},

    ${StartDate},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-O365ClientBrowserReport') `
                            -Arg ('Get-O365ClientBrowserReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-O365ClientBrowserReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-O365ClientBrowserReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${OperatingSystem},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${OperatingSystemVersion},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${EndDate},

    ${WindowsLiveID},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    ${StartDate},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-O365ClientOSDetailReport') `
                            -Arg ('Get-O365ClientOSDetailReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-O365ClientOSDetailReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-O365ClientOSDetailReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ov')]
    ${OutVariable},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    ${OS},

    ${StartDate},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-O365ClientOSReport') `
                            -Arg ('Get-O365ClientOSReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-O365ClientOSReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-O365ClientOSReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-OdbcDriver","Function","Public","Wdac","Wdac","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-OdbcDsn","Function","Public","Wdac","Wdac","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-OdbcPerfCounter","Function","Public","Wdac","Wdac","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-OffloadDataTransferSetting","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-OMEConfiguration') `
                            -Arg ('Get-OMEConfiguration', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-OMEConfiguration
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-OMEConfiguration","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-OnlineMeetingConfiguration') `
                            -Arg ('Get-OnlineMeetingConfiguration', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-OnlineMeetingConfiguration
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-OnlineMeetingConfiguration","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-OnPremisesOrganization') `
                            -Arg ('Get-OnPremisesOrganization', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-OnPremisesOrganization
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-OnPremisesOrganization","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${SearchText},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${SingleNodeOnly},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    [switch]
    ${IncludeContainers},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-OrganizationalUnit') `
                            -Arg ('Get-OrganizationalUnit', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-OrganizationalUnit
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-OrganizationalUnit","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-OrganizationConfig') `
                            -Arg ('Get-OrganizationConfig', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-OrganizationConfig
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-OrganizationConfig","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-OrganizationRelationship') `
                            -Arg ('Get-OrganizationRelationship', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-OrganizationRelationship
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-OrganizationRelationship","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    ${IncludeTestModeConnectors},

    ${IsTransportRuleScoped},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-OutboundConnector') `
                            -Arg ('Get-OutboundConnector', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-OutboundConnector
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-OutboundConnector","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${Domain},

    [Alias('ov')]
    ${OutVariable},

    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ea')]
    ${ErrorAction},

    ${Expression},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-OutboundConnectorReport') `
                            -Arg ('Get-OutboundConnectorReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-OutboundConnectorReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-OutboundConnectorReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-OutlookProtectionRule') `
                            -Arg ('Get-OutlookProtectionRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-OutlookProtectionRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-OutlookProtectionRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-OwaMailboxPolicy') `
                            -Arg ('Get-OwaMailboxPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-OwaMailboxPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-OwaMailboxPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Partition","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PartitionSupportedSize","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-PartnerApplication') `
                            -Arg ('Get-PartnerApplication', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-PartnerApplication
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PartnerApplication","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ov')]
    ${OutVariable},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    ${StartDate},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-PartnerCustomerUserReport') `
                            -Arg ('Get-PartnerCustomerUserReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-PartnerCustomerUserReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PartnerCustomerUserReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PcsvDevice","Function","Public","PcsvDevice","PcsvDevice","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-PerimeterConfig') `
                            -Arg ('Get-PerimeterConfig', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-PerimeterConfig
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PerimeterConfig","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    ${Start},

    ${Recipient},

    ${End},

    ${Sender},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-PerimeterMessageTrace') `
                            -Arg ('Get-PerimeterMessageTrace', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-PerimeterMessageTrace
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PerimeterMessageTrace","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PhysicalDisk","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PhysicalDiskStorageNodeView","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ea')]
    ${ErrorAction},

    ${Action},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${Original},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wa')]
    ${WarningAction},

    ${Locale},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-PolicyTipConfig') `
                            -Arg ('Get-PolicyTipConfig', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-PolicyTipConfig
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PolicyTipConfig","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${IncludeReport},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${Mailbox},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    [Alias('ov')]
    ${OutVariable},

    ${AggregationType},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-PopSubscription') `
                            -Arg ('Get-PopSubscription', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-PopSubscription
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PopSubscription","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PrintConfiguration","Function","Public","PrintManagement","PrintManagement","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Printer","Function","Public","PrintManagement","PrintManagement","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PrinterDriver","Function","Public","PrintManagement","PrintManagement","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PrinterPort","Function","Public","PrintManagement","PrintManagement","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PrinterProperty","Function","Public","PrintManagement","PrintManagement","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PrintJob","Function","Public","PrintManagement","PrintManagement","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [switch]
    ${GetChildren},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [switch]
    ${LostAndFound},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ea')]
    ${ErrorAction},

    [switch]
    ${ResidentFolders},

    ${Mailbox},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    [switch]
    ${Recurse},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-PublicFolder') `
                            -Arg ('Get-PublicFolder', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-PublicFolder
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PublicFolder","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${Mailbox},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    ${User},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-PublicFolderClientPermission') `
                            -Arg ('Get-PublicFolderClientPermission', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-PublicFolderClientPermission
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PublicFolderClientPermission","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${Mailbox},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-PublicFolderItemStatistics') `
                            -Arg ('Get-PublicFolderItemStatistics', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-PublicFolderItemStatistics
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PublicFolderItemStatistics","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [switch]
    ${IncludeHierarchyInfo},

    [switch]
    ${IncludeDumpsterInfo},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-PublicFolderMailboxDiagnostics') `
                            -Arg ('Get-PublicFolderMailboxDiagnostics', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-PublicFolderMailboxDiagnostics
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PublicFolderMailboxDiagnostics","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${BatchName},

    ${Name},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Suspend},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    ${Status},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-PublicFolderMailboxMigrationRequest') `
                            -Arg ('Get-PublicFolderMailboxMigrationRequest', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-PublicFolderMailboxMigrationRequest
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PublicFolderMailboxMigrationRequest","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    ${WarningVariable},

    ${DiagnosticArgument},

    [switch]
    ${Diagnostic},

    [switch]
    ${IncludeReport},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-PublicFolderMailboxMigrationRequestStatistics') `
                            -Arg ('Get-PublicFolderMailboxMigrationRequestStatistics', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-PublicFolderMailboxMigrationRequestStatistics
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PublicFolderMailboxMigrationRequestStatistics","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${BatchName},

    ${Name},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Suspend},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    ${Status},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-PublicFolderMigrationRequest') `
                            -Arg ('Get-PublicFolderMigrationRequest', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-PublicFolderMigrationRequest
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PublicFolderMigrationRequest","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    ${WarningVariable},

    ${DiagnosticArgument},

    [switch]
    ${Diagnostic},

    [switch]
    ${IncludeReport},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-PublicFolderMigrationRequestStatistics') `
                            -Arg ('Get-PublicFolderMigrationRequestStatistics', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-PublicFolderMigrationRequestStatistics
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PublicFolderMigrationRequestStatistics","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${Mailbox},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-PublicFolderStatistics') `
                            -Arg ('Get-PublicFolderStatistics', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-PublicFolderStatistics
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PublicFolderStatistics","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${Direction},

    ${Reported},

    ${EndReceivedDate},

    ${EndExpiresDate},

    ${Page},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${StartExpiresDate},

    ${Type},

    ${PageSize},

    ${Subject},

    [Alias('ob')]
    ${OutBuffer},

    ${SenderAddress},

    ${Domain},

    ${Identity},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wa')]
    ${WarningAction},

    ${RecipientAddress},

    ${MessageId},

    ${StartReceivedDate},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-QuarantineMessage') `
                            -Arg ('Get-QuarantineMessage', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-QuarantineMessage
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-QuarantineMessage","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-QuarantineMessageHeader') `
                            -Arg ('Get-QuarantineMessageHeader', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-QuarantineMessageHeader
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-QuarantineMessageHeader","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    ${UserName},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-RbacDiagnosticInfo') `
                            -Arg ('Get-RbacDiagnosticInfo', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-RbacDiagnosticInfo
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-RbacDiagnosticInfo","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${PropertySet},

    ${Properties},

    [Alias('ob')]
    ${OutBuffer},

    ${SortBy},

    ${BookmarkDisplayName},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    ${RecipientTypeDetails},

    ${Identity},

    ${AuthenticationType},

    [Alias('ev')]
    ${ErrorVariable},

    ${OrganizationalUnit},

    ${RecipientType},

    ${RecipientPreviewFilter},

    ${Capabilities},

    [Alias('wa')]
    ${WarningAction},

    ${IncludeBookmarkObject},

    [Alias('ov')]
    ${OutVariable},

    ${Filter},

    ${ResultSize},

    ${Anr},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-Recipient') `
                            -Arg ('Get-Recipient', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-Recipient
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Recipient","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${ReadFromDomainController},

    [Alias('ov')]
    ${OutVariable},

    ${AccessRights},

    ${Trustee},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-RecipientPermission') `
                            -Arg ('Get-RecipientPermission', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-RecipientPermission
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-RecipientPermission","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-RecipientStatisticsReport') `
                            -Arg ('Get-RecipientStatisticsReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-RecipientStatisticsReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-RecipientStatisticsReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-RemoteDomain') `
                            -Arg ('Get-RemoteDomain', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-RemoteDomain
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-RemoteDomain","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${IncludeDLP},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ea')]
    ${ErrorAction},

    ${ScheduleId},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ReportSchedule') `
                            -Arg ('Get-ReportSchedule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-ReportSchedule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ReportSchedule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${IncludeDLP},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ReportScheduleList') `
                            -Arg ('Get-ReportScheduleList', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-ReportScheduleList
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ReportScheduleList","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ResiliencySetting","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ResourceConfig') `
                            -Arg ('Get-ResourceConfig', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-ResourceConfig
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ResourceConfig","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-RetentionCompliancePolicy') `
                            -Arg ('Get-RetentionCompliancePolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-RetentionCompliancePolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-RetentionCompliancePolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Policy},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-RetentionComplianceRule') `
                            -Arg ('Get-RetentionComplianceRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-RetentionComplianceRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-RetentionComplianceRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-RetentionPolicy') `
                            -Arg ('Get-RetentionPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-RetentionPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-RetentionPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${OptionalInMailbox},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${IncludeSystemTags},

    ${Mailbox},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    ${Types},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-RetentionPolicyTag') `
                            -Arg ('Get-RetentionPolicyTag', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-RetentionPolicyTag
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-RetentionPolicyTag","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${Type},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ea')]
    ${ErrorAction},

    ${TrustedPublishingDomain},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-RMSTemplate') `
                            -Arg ('Get-RMSTemplate', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-RMSTemplate
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-RMSTemplate","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [switch]
    ${Default},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-RMSTrustedPublishingDomain') `
                            -Arg ('Get-RMSTrustedPublishingDomain', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-RMSTrustedPublishingDomain
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-RMSTrustedPublishingDomain","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-RoleAssignmentPolicy') `
                            -Arg ('Get-RoleAssignmentPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-RoleAssignmentPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-RoleAssignmentPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${SortBy},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ev')]
    ${ErrorVariable},

    ${Filter},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${Identity},

    [switch]
    ${ShowPartnerLinked},

    ${ResultSize},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-RoleGroup') `
                            -Arg ('Get-RoleGroup', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-RoleGroup
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-RoleGroup","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-RoleGroupMember') `
                            -Arg ('Get-RoleGroupMember', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-RoleGroupMember
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-RoleGroupMember","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ScheduledTask","Function","Public","ScheduledTasks","ScheduledTasks","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ScheduledTaskInfo","Function","Public","ScheduledTasks","ScheduledTasks","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ov')]
    ${OutVariable},

    ${Category},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    ${StartDate},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ScorecardClientDeviceReport') `
                            -Arg ('Get-ScorecardClientDeviceReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-ScorecardClientDeviceReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ScorecardClientDeviceReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ov')]
    ${OutVariable},

    ${Category},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    ${StartDate},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ScorecardClientOSReport') `
                            -Arg ('Get-ScorecardClientOSReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-ScorecardClientOSReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ScorecardClientOSReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ov')]
    ${OutVariable},

    ${Category},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    ${StartDate},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ScorecardClientOutlookReport') `
                            -Arg ('Get-ScorecardClientOutlookReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-ScorecardClientOutlookReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ScorecardClientOutlookReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ov')]
    ${OutVariable},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    ${StartDate},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ScorecardMetricsReport') `
                            -Arg ('Get-ScorecardMetricsReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-ScorecardMetricsReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ScorecardMetricsReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-SearchDocumentFormat') `
                            -Arg ('Get-SearchDocumentFormat', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-SearchDocumentFormat
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SearchDocumentFormat","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wa')]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ev')]
    ${ErrorVariable},

    ${OrganizationalUnit},

    ${Filter},

    [Alias('ob')]
    ${OutBuffer},

    ${Types},

    ${Identity},

    ${ResultSize},

    [switch]
    ${RoleGroupAssignable},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-SecurityPrincipal') `
                            -Arg ('Get-SecurityPrincipal', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-SecurityPrincipal
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SecurityPrincipal","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${Mailbox},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    ${AddressId},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-SendAddress') `
                            -Arg ('Get-SendAddress', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-SendAddress
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SendAddress","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Recipient},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ea')]
    ${ErrorAction},

    ${Expression},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ServiceDeliveryReport') `
                            -Arg ('Get-ServiceDeliveryReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-ServiceDeliveryReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ServiceDeliveryReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    ${MaintenanceWindowDays},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ServiceStatus') `
                            -Arg ('Get-ServiceStatus', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-ServiceStatus
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ServiceStatus","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-SharingPolicy') `
                            -Arg ('Get-SharingPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-SharingPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SharingPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${ReadFromDomainController},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    [switch]
    ${BypassOwnerCheck},

    ${Anr},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-SiteMailbox') `
                            -Arg ('Get-SiteMailbox', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-SiteMailbox
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SiteMailbox","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${SendMeEmail},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${BypassOwnerCheck},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-SiteMailboxDiagnostics') `
                            -Arg ('Get-SiteMailboxDiagnostics', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-SiteMailboxDiagnostics
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SiteMailboxDiagnostics","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-SiteMailboxProvisioningPolicy') `
                            -Arg ('Get-SiteMailboxProvisioningPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-SiteMailboxProvisioningPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SiteMailboxProvisioningPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SmbBandWidthLimit","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SmbClientConfiguration","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SmbClientNetworkInterface","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SmbConnection","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SmbDelegation","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SmbMapping","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SmbMultichannelConnection","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SmbMultichannelConstraint","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SmbOpenFile","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SmbServerConfiguration","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SmbServerNetworkInterface","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SmbSession","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SmbShare","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SmbShareAccess","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=241966",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SmbWitnessClient","Function","Public","SmbWitness","SmbWitness","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-SmimeConfig') `
                            -Arg ('Get-SmimeConfig', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-SmimeConfig
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SmimeConfig","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    ${ReportType},

    ${StartDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-SPOActiveUserReport') `
                            -Arg ('Get-SPOActiveUserReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-SPOActiveUserReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SPOActiveUserReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${Action},

    ${Direction},

    ${Page},

    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${EndDate},

    ${PageSize},

    [Alias('ob')]
    ${OutBuffer},

    ${Expression},

    ${EventType},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    ${StartDate},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-SpoofMailReport') `
                            -Arg ('Get-SpoofMailReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-SpoofMailReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SpoofMailReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    ${ReportType},

    ${StartDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-SPOSkyDriveProDeployedReport') `
                            -Arg ('Get-SPOSkyDriveProDeployedReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-SPOSkyDriveProDeployedReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SPOSkyDriveProDeployedReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    ${ReportType},

    ${StartDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-SPOSkyDriveProStorageReport') `
                            -Arg ('Get-SPOSkyDriveProStorageReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-SPOSkyDriveProStorageReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SPOSkyDriveProStorageReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    ${ReportType},

    ${StartDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-SPOTeamSiteDeployedReport') `
                            -Arg ('Get-SPOTeamSiteDeployedReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-SPOTeamSiteDeployedReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SPOTeamSiteDeployedReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    ${ReportType},

    ${StartDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-SPOTeamSiteStorageReport') `
                            -Arg ('Get-SPOTeamSiteStorageReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-SPOTeamSiteStorageReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SPOTeamSiteStorageReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    ${ReportType},

    ${StartDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-SPOTenantStorageMetricReport') `
                            -Arg ('Get-SPOTenantStorageMetricReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-SPOTenantStorageMetricReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SPOTenantStorageMetricReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ov')]
    ${OutVariable},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    ${StartDate},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-StaleMailboxDetailReport') `
                            -Arg ('Get-StaleMailboxDetailReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-StaleMailboxDetailReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-StaleMailboxDetailReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ov')]
    ${OutVariable},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    ${StartDate},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-StaleMailboxReport') `
                            -Arg ('Get-StaleMailboxReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-StaleMailboxReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-StaleMailboxReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-StartApps","Function","Public","StartScreen","StartScreen","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-StorageEnclosure","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-StorageEnclosureVendorData","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-StorageJob","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-StorageNode","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-StoragePool","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-StorageProvider","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-StorageReliabilityCounter","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-StorageSetting","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-StorageSubSystem","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-StorageTier","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-StorageTierSupportedSize","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
        [System.IO.Stream]
        $InputStream,

        [System.String]
        $RelatedPath,

        [System.Security.Cryptography.HashAlgorithm]
        $Hasher)

    # Compute file-hash using the crypto object
    [Byte[]] $computedHash = $Hasher.ComputeHash($InputStream)
    [string] $hash = [BitConverter]::ToString($computedHash) -replace '-',''

    if ($RelatedPath -eq $null)
    {
        $retVal = [PSCustomObject] @{
            Algorithm = $Algorithm.ToUpperInvariant()
            Hash = $hash
        }
        $retVal.psobject.TypeNames.Insert(0, ""Microsoft.Powershell.Utility.FileHash"")
        $retVal
    }
    else
    {
        $retVal = [PSCustomObject] @{
            Algorithm = $Algorithm.ToUpperInvariant()
            Hash = $hash
            Path = $RelatedPath
        }
        $retVal.psobject.TypeNames.Insert(0, ""Microsoft.Powershell.Utility.FileHash"")
        $retVal

    }
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","GetStreamHash","Function","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${IncludeReport},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${Mailbox},

    [Alias('ev')]
    ${ErrorVariable},

    ${SubscriptionType},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    [Alias('ov')]
    ${OutVariable},

    ${AggregationType},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-Subscription') `
                            -Arg ('Get-Subscription', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-Subscription
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Subscription","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SupportedClusterSizes","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SupportedFileSystems","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-SyncConfig') `
                            -Arg ('Get-SyncConfig', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-SyncConfig
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SyncConfig","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${WorkloadType},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Name},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Mailbox},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    ${SyncProtocol},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    [Alias('ov')]
    ${OutVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-SyncRequest') `
                            -Arg ('Get-SyncRequest', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-SyncRequest
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SyncRequest","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${RequestGuid},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${IncludeReport},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    ${DiagnosticArgument},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${Diagnostic},

    ${RequestQueue},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-SyncRequestStatistics') `
                            -Arg ('Get-SyncRequestStatistics', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-SyncRequestStatistics
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SyncRequestStatistics","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-TargetPort","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-TargetPortal","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${ReadFromDomainController},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    ${Credential},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-TextMessagingAccount') `
                            -Arg ('Get-TextMessagingAccount', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-TextMessagingAccount
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-TextMessagingAccount","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${Version},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-ToolInformation') `
                            -Arg ('Get-ToolInformation', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-ToolInformation
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ToolInformation","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-TransportConfig') `
                            -Arg ('Get-TransportConfig', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-TransportConfig
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-TransportConfig","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ev')]
    ${ErrorVariable},

    ${DlpPolicy},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${Identity},

    ${State},

    ${Filter},

    ${ResultSize},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-TransportRule') `
                            -Arg ('Get-TransportRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-TransportRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-TransportRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ov')]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Name},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-TransportRuleAction') `
                            -Arg ('Get-TransportRuleAction', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-TransportRuleAction
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-TransportRuleAction","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ov')]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Name},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-TransportRulePredicate') `
                            -Arg ('Get-TransportRulePredicate', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-TransportRulePredicate
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-TransportRulePredicate","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    ${UMDialPlan},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-UMAutoAttendant') `
                            -Arg ('Get-UMAutoAttendant', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-UMAutoAttendant
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-UMAutoAttendant","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${Mailbox},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-UMCallAnsweringRule') `
                            -Arg ('Get-UMCallAnsweringRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-UMCallAnsweringRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-UMCallAnsweringRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    ${Mailbox},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-UMCallDataRecord') `
                            -Arg ('Get-UMCallDataRecord', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-UMCallDataRecord
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-UMCallDataRecord","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    ${UMDialPlan},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${UMIPGateway},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    ${GroupBy},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-UMCallSummaryReport') `
                            -Arg ('Get-UMCallSummaryReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-UMCallSummaryReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-UMCallSummaryReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-UMDialPlan') `
                            -Arg ('Get-UMDialPlan', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-UMDialPlan
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-UMDialPlan","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    ${UMDialPlan},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-UMHuntGroup') `
                            -Arg ('Get-UMHuntGroup', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-UMHuntGroup
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-UMHuntGroup","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${IncludeSimulator},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-UMIPGateway') `
                            -Arg ('Get-UMIPGateway', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-UMIPGateway
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-UMIPGateway","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${SortBy},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ev')]
    ${ErrorVariable},

    ${Filter},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${Identity},

    ${ResultSize},

    ${Anr},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-UMMailbox') `
                            -Arg ('Get-UMMailbox', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-UMMailbox
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-UMMailbox","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-UMMailboxConfiguration') `
                            -Arg ('Get-UMMailboxConfiguration', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-UMMailboxConfiguration
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-UMMailboxConfiguration","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${IgnoreErrors},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    ${Credential},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-UMMailboxPIN') `
                            -Arg ('Get-UMMailboxPIN', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-UMMailboxPIN
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-UMMailboxPIN","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${SortBy},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Credential},

    [Alias('ev')]
    ${ErrorVariable},

    ${Filter},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${Identity},

    ${ResultSize},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-UMMailboxPlan') `
                            -Arg ('Get-UMMailboxPlan', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-UMMailboxPlan
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-UMMailboxPlan","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    ${UMDialPlan},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-UMMailboxPolicy') `
                            -Arg ('Get-UMMailboxPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-UMMailboxPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-UMMailboxPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-UMPhoneSession') `
                            -Arg ('Get-UMPhoneSession', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-UMPhoneSession
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-UMPhoneSession","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-UnifiedAuditSetting') `
                            -Arg ('Get-UnifiedAuditSetting', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-UnifiedAuditSetting
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-UnifiedAuditSetting","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${SortBy},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ev')]
    ${ErrorVariable},

    ${Filter},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${Identity},

    ${ResultSize},

    ${Anr},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-UnifiedGroup') `
                            -Arg ('Get-UnifiedGroup', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-UnifiedGroup
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-UnifiedGroup","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${LinkType},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    ${DomainController},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-UnifiedGroupLinks') `
                            -Arg ('Get-UnifiedGroupLinks', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-UnifiedGroupLinks
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-UnifiedGroupLinks","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${SortBy},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${PublicFolder},

    [Alias('ev')]
    ${ErrorVariable},

    ${OrganizationalUnit},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    ${RecipientTypeDetails},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    ${Filter},

    ${Anr},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-User') `
                            -Arg ('Get-User', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-User
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-User","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${ReadFromDomainController},

    [Alias('ov')]
    ${OutVariable},

    ${SortBy},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${GroupMailbox},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Credential},

    [Alias('ev')]
    ${ErrorVariable},

    ${OrganizationalUnit},

    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    ${PhotoType},

    ${Filter},

    [switch]
    ${Preview},

    ${Anr},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Get-UserPhoto') `
                            -Arg ('Get-UserPhoto', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Get-UserPhoto
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-UserPhoto","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=160712",,,,,"
param(
    [Parameter(ValueFromPipeline=$true)]
    [string[]]
    $verb = '*'
)
begin {
    $allVerbs = [PSObject].Assembly.GetTypes() |
        Where-Object {$_.Name -match '^Verbs.'} |
        Get-Member -type Properties -static |
        Select-Object @{
            Name='Verb'
            Expression = {$_.Name}
        }, @{
            Name='Group'
            Expression = {
                $str = ""$($_.TypeName)""
                $str.Substring($str.LastIndexOf('Verbs') + 5)
            }
        }
}
process {
    foreach ($v in $verb) {
        $allVerbs | Where-Object { $_.Verb -like $v }
    }
}
# .Link
# http://go.microsoft.com/fwlink/?LinkID=160712
# .ExternalHelp System.Management.Automation.dll-help.xml
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Verb","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-VirtualDisk","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-VirtualDiskSupportedSize","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Volume","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-VolumeCorruptionCount","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-VolumeScrubPolicy","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-VpnConnection","Function","Public","VpnClient","VpnClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-VpnConnectionTrigger","Function","Public","VpnClient","VpnClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-WdacBidTrace","Function","Public","Wdac","Wdac","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-WindowsDeveloperLicense","Function","Public","WindowsDeveloperLicense","WindowsDeveloperLicense","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Grant-SmbShareAccess","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-Location H:","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","H:","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113316",,,,,"
<#
.FORWARDHELPTARGETNAME Get-Help
.FORWARDHELPCATEGORY Cmdlet
#>
[CmdletBinding(DefaultParameterSetName='AllUsersView', HelpUri='http://go.microsoft.com/fwlink/?LinkID=113316')]
param(
    [Parameter(Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Name},

    [string]
    ${Path},

    [ValidateSet('Alias','Cmdlet','Provider','General','FAQ','Glossary','HelpFile','ScriptCommand','Function','Filter','ExternalScript','All','DefaultHelp','Workflow')]
    [string[]]
    ${Category},

    [string[]]
    ${Component},

    [string[]]
    ${Functionality},

    [string[]]
    ${Role},

    [Parameter(ParameterSetName='DetailedView', Mandatory=$true)]
    [switch]
    ${Detailed},

    [Parameter(ParameterSetName='AllUsersView')]
    [switch]
    ${Full},

    [Parameter(ParameterSetName='Examples', Mandatory=$true)]
    [switch]
    ${Examples},

    [Parameter(ParameterSetName='Parameters', Mandatory=$true)]
    [string]
    ${Parameter},

    [Parameter(ParameterSetName='Online', Mandatory=$true)]
    [switch]
    ${Online},

    [Parameter(ParameterSetName='ShowWindow', Mandatory=$true)]
    [switch]
    ${ShowWindow})

      #Set the outputencoding to Console::OutputEncoding. More.com doesn't work well with Unicode.
      $outputEncoding=[System.Console]::OutputEncoding

      Get-Help @PSBoundParameters | more
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","help","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Hide-VirtualDisk","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-Location I:","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","I:","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${CSV},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${CSVData},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${CSVStream},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Import-ContactList') `
                            -Arg ('Import-ContactList', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Import-ContactList
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Import-ContactList","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [switch]
    ${Force},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${FileData},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Import-DlpPolicyCollection') `
                            -Arg ('Import-DlpPolicyCollection', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Import-DlpPolicyCollection
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Import-DlpPolicyCollection","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Import-IseSnippet","Function","Public","ISE","ISE","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [switch]
    ${Picture},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${SpokenName},

    ${FileData},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Import-RecipientDataProperty') `
                            -Arg ('Import-RecipientDataProperty', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Import-RecipientDataProperty
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Import-RecipientDataProperty","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${Password},

    [Alias('wa')]
    ${WarningAction},

    ${ExtranetCertificationUrl},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${RMSOnline},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${Default},

    ${ExtranetLicensingUrl},

    [switch]
    ${RefreshTemplates},

    [Alias('ov')]
    ${OutVariable},

    ${IntranetLicensingUrl},

    ${IntranetCertificationUrl},

    ${FileData},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Import-RMSTrustedPublishingDomain') `
                            -Arg ('Import-RMSTrustedPublishingDomain', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Import-RMSTrustedPublishingDomain
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Import-RMSTrustedPublishingDomain","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","ImportSystemModules","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [switch]
    ${Force},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${FileData},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Import-TransportRuleCollection') `
                            -Arg ('Import-TransportRuleCollection', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Import-TransportRuleCollection
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Import-TransportRuleCollection","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${PromptFileData},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${UMDialPlan},

    ${PromptFileName},

    ${UMAutoAttendant},

    ${PromptFileStream},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Import-UMPrompt') `
                            -Arg ('Import-UMPrompt', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Import-UMPrompt
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Import-UMPrompt","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Initialize-Disk","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Install-Dtc","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Invoke-AsWorkflow","Function","Public","PSWorkflowUtility","PSWorkflowUtility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-Location J:","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","J:","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-Location K:","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","K:","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-Location L:","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","L:","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Lock-BitLocker","Function","Public","BitLocker","BitLocker","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-Location M:","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","M:","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113353",,,,,"
<#
.FORWARDHELPTARGETNAME New-Item
.FORWARDHELPCATEGORY Cmdlet
#>
[CmdletBinding(DefaultParameterSetName='pathSet',
    SupportsShouldProcess=$true,
    SupportsTransactions=$true,
    ConfirmImpact='Medium')]
    [OutputType([System.IO.DirectoryInfo])]
param(
    [Parameter(ParameterSetName='nameSet', Position=0, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='pathSet', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [System.String[]]
    ${Path},

    [Parameter(ParameterSetName='nameSet', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [AllowNull()]
    [AllowEmptyString()]
    [System.String]
    ${Name},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Object]
    ${Value},

    [Switch]
    ${Force},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [System.Management.Automation.PSCredential]
    ${Credential}
)

begin {

    try {
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand('New-Item', [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd -Type Directory @PSBoundParameters }
        $steppablePipeline = $scriptCmd.GetSteppablePipeline()
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }

}

process {

    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }

}

end {

    try {
        $steppablePipeline.End()
    } catch {
        throw
    }

}

","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","mkdir","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"param([string[]]$paths)

$OutputEncoding = [System.Console]::OutputEncoding

if($paths)
{
    foreach ($file in $paths)
    {
        Get-Content $file | more.com
    }
}
else
{
    $input | more.com
}
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","more","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Mount-DiskImage","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=241967",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Move-SmbWitnessClient","Function","Public","SmbWitness","SmbWitness","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-Location N:","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","N:","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${QueryString},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Characteristic},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${AccessLevel},

    [Alias('wa')]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-ActiveSyncDeviceAccessRule') `
                            -Arg ('New-ActiveSyncDeviceAccessRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-ActiveSyncDeviceAccessRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-ActiveSyncDeviceAccessRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wa')]
    ${WarningAction},

    ${RequireManualSyncWhenRoaming},

    ${DevicePasswordHistory},

    ${RequireEncryptedSMIMEMessages},

    ${RequireSignedSMIMEAlgorithm},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${UNCAccessEnabled},

    ${MaxAttachmentSize},

    ${AllowDesktopSync},

    ${DeviceEncryptionEnabled},

    ${AllowSMIMESoftCerts},

    ${AllowExternalDeviceManagement},

    [Alias('db')]
    [switch]
    ${Debug},

    ${AllowConsumerEmail},

    ${RequireSignedSMIMEMessages},

    ${AllowUnsignedInstallationPackages},

    ${MaxEmailAgeFilter},

    ${AllowNonProvisionableDevices},

    [Alias('wv')]
    ${WarningVariable},

    ${AllowIrDA},

    ${AllowRemoteDesktop},

    ${AllowBluetooth},

    ${RequireStorageCardEncryption},

    [Alias('ea')]
    ${ErrorAction},

    ${IsDefault},

    [Alias('ov')]
    ${OutVariable},

    ${AllowTextMessaging},

    ${MaxCalendarAgeFilter},

    ${MaxEmailHTMLBodyTruncationSize},

    [Alias('ev')]
    ${ErrorVariable},

    ${AllowMobileOTAUpdate},

    ${AllowApplePushNotifications},

    ${UnapprovedInROMApplicationList},

    ${RequireEncryptionSMIMEAlgorithm},

    ${RequireDeviceEncryption},

    ${WSSAccessEnabled},

    ${IsDefaultPolicy},

    ${ApprovedApplicationList},

    ${AllowPOPIMAPEmail},

    ${AllowInternetSharing},

    ${MaxInactivityTimeDeviceLock},

    ${MinDevicePasswordLength},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${DevicePasswordExpiration},

    ${AllowCamera},

    ${IrmEnabled},

    ${MinDevicePasswordComplexCharacters},

    ${PasswordRecoveryEnabled},

    ${DevicePolicyRefreshInterval},

    ${MaxEmailBodyTruncationSize},

    ${AllowUnsignedApplications},

    ${MaxDevicePasswordFailedAttempts},

    ${AttachmentsEnabled},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${AllowStorageCard},

    ${AllowBrowser},

    [Alias('ob')]
    ${OutBuffer},

    ${Name},

    ${AllowSMIMEEncryptionAlgorithmNegotiation},

    ${AlphanumericDevicePasswordRequired},

    ${AllowWiFi},

    ${AllowHTMLEmail},

    ${AllowSimpleDevicePassword},

    ${DevicePasswordEnabled},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-ActiveSyncMailboxPolicy') `
                            -Arg ('New-ActiveSyncMailboxPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-ActiveSyncMailboxPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-ActiveSyncMailboxPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Name},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${EndDate},

    ${ObjectIds},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${ExternalAccess},

    [Alias('ob')]
    ${OutBuffer},

    ${StatusMailRecipients},

    ${Parameters},

    [Alias('ev')]
    ${ErrorVariable},

    ${Cmdlets},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    ${UserIds},

    ${StartDate},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-AdminAuditLogSearch') `
                            -Arg ('New-AdminAuditLogSearch', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-AdminAuditLogSearch
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-AdminAuditLogSearch","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wa')]
    ${WarningAction},

    ${Etoken},

    ${FileStream},

    ${Enabled},

    ${Url},

    ${Mailbox},

    [Alias('db')]
    [switch]
    ${Debug},

    ${MarketplaceServicesUrl},

    [switch]
    ${PrivateCatalog},

    ${MarketplaceCorrelationID},

    ${DefaultStateForUser},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${MarketplaceQueryMarket},

    ${MarketplaceUserProfileType},

    [switch]
    ${DownloadOnly},

    ${ProvidedTo},

    ${UserList},

    [switch]
    ${OrganizationApp},

    [Alias('ov')]
    ${OutVariable},

    ${MarketplaceAssetID},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${FileData},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AllowReadWriteMailbox},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-App') `
                            -Arg ('New-App', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-App
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-App","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${OrgWideAccount},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-AvailabilityConfig') `
                            -Arg ('New-AvailabilityConfig', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-AvailabilityConfig
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-AvailabilityConfig","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    ${FileData},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-ClassificationRuleCollection') `
                            -Arg ('New-ClassificationRuleCollection', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-ClassificationRuleCollection
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-ClassificationRuleCollection","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${SyncSvcUrl},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    ${SyncType},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${TargetWorkload},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-CompliancePolicyFileSyncNotification') `
                            -Arg ('New-CompliancePolicyFileSyncNotification', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-CompliancePolicyFileSyncNotification
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-CompliancePolicyFileSyncNotification","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${SyncSvcUrl},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${SyncChangeInfos},

    [switch]
    ${FullSync},

    [switch]
    ${SyncNow},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-CompliancePolicySyncNotification') `
                            -Arg ('New-CompliancePolicySyncNotification', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-CompliancePolicySyncNotification
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-CompliancePolicySyncNotification","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${RequestToken},

    [Alias('db')]
    [switch]
    ${Debug},

    ${OAuthVerifier},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${Mailbox},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${RequestSecret},

    [switch]
    ${LinkedIn},

    ${RedirectUri},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-ConnectSubscription') `
                            -Arg ('New-ConnectSubscription', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-ConnectSubscription
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-ConnectSubscription","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-DAEntryPointTableItem","Function","Public","DirectAccessClientComponents","DirectAccessClientComponents","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Name},

    ${Locale},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${ClassificationRuleCollectionIdentity},

    [Alias('wa')]
    ${WarningAction},

    ${Fingerprints},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-DataClassification') `
                            -Arg ('New-DataClassification', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-DataClassification
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-DataClassification","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wa')]
    ${WarningAction},

    ${ModeratedBy},

    ${RequireSenderAuthenticationEnabled},

    ${ModerationEnabled},

    ${DisplayName},

    ${MemberDepartRestriction},

    ${Name},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${IgnoreNamingPolicy},

    [switch]
    ${RoomList},

    [Alias('wv')]
    ${WarningVariable},

    ${BypassNestedModerationEnabled},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${CopyOwnerToMember},

    ${Members},

    [Alias('ov')]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${MemberJoinRestriction},

    [Alias('ob')]
    ${OutBuffer},

    ${Type},

    ${Alias},

    ${ManagedBy},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${PrimarySmtpAddress},

    ${SendModerationNotifications},

    ${Notes},

    ${OrganizationalUnit},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-DistributionGroup') `
                            -Arg ('New-DistributionGroup', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-DistributionGroup
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-DistributionGroup","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${AdminDisplayName},

    ${BodyCanonicalization},

    [Alias('wa')]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${KeySize},

    ${HeaderCanonicalization},

    ${DomainName},

    ${Enabled},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-DkimSigningConfig') `
                            -Arg ('New-DkimSigningConfig', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-DkimSigningConfig
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-DkimSigningConfig","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${TemplateData},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Parameters},

    ${Template},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${State},

    ${Mode},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-DlpPolicy') `
                            -Arg ('New-DlpPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-DlpPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-DlpPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-DscCheckSum","Function","Public","PSDesiredStateConfiguration","PSDesiredStateConfiguration","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wa')]
    ${WarningAction},

    ${ConditionalCustomAttribute5},

    ${ModeratedBy},

    ${ModerationEnabled},

    ${RecipientFilter},

    ${ConditionalCustomAttribute8},

    ${DisplayName},

    ${ConditionalCustomAttribute10},

    ${Name},

    [Alias('ev')]
    ${ErrorVariable},

    ${ConditionalCustomAttribute9},

    [Alias('db')]
    [switch]
    ${Debug},

    ${ConditionalCustomAttribute2},

    ${IncludedRecipients},

    ${ConditionalCompany},

    ${ConditionalCustomAttribute6},

    ${ConditionalCustomAttribute3},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${ConditionalCustomAttribute13},

    ${RecipientContainer},

    ${ConditionalCustomAttribute12},

    ${ConditionalDepartment},

    ${ConditionalStateOrProvince},

    [Alias('ov')]
    ${OutVariable},

    ${ConditionalCustomAttribute7},

    ${ConditionalCustomAttribute14},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${ConditionalCustomAttribute4},

    [Alias('ob')]
    ${OutBuffer},

    ${ConditionalCustomAttribute1},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${Alias},

    ${PrimarySmtpAddress},

    ${SendModerationNotifications},

    ${ConditionalCustomAttribute15},

    ${OrganizationalUnit},

    ${ConditionalCustomAttribute11},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-DynamicDistributionGroup') `
                            -Arg ('New-DynamicDistributionGroup', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-DynamicDistributionGroup
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-DynamicDistributionGroup","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-EapConfiguration","Function","Public","VpnClient","VpnClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Priority},

    ${Name},

    ${EnabledEmailAddressTemplates},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${EnabledPrimarySMTPAddressTemplate},

    [Alias('ev')]
    ${ErrorVariable},

    ${ManagedByFilter},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    [switch]
    ${IncludeUnifiedGroupRecipients},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-EmailAddressPolicy') `
                            -Arg ('New-EmailAddressPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-EmailAddressPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-EmailAddressPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    ${Description},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${FileData},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-Fingerprint') `
                            -Arg ('New-Fingerprint', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-Fingerprint
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-Fingerprint","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${ConfigurationXmlRaw},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Name},

    ${AdminDisplayName},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${EnableSafeList},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${IPBlockList},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${IPAllowList},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-HostedConnectionFilterPolicy') `
                            -Arg ('New-HostedConnectionFilterPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-HostedConnectionFilterPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-HostedConnectionFilterPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${HighConfidenceSpamAction},

    [Alias('wa')]
    ${WarningAction},

    ${TestModeAction},

    ${QuarantineRetentionPeriod},

    ${MarkAsSpamWebBugsInHtml},

    ${EndUserSpamNotificationCustomFromName},

    ${MarkAsSpamFromAddressAuthFail},

    ${EndUserSpamNotificationCustomFromAddress},

    ${MarkAsSpamEmbedTagsInHtml},

    ${BulkThreshold},

    ${EnableLanguageBlockList},

    ${Name},

    [Alias('ev')]
    ${ErrorVariable},

    ${EndUserSpamNotificationCustomSubject},

    ${MarkAsSpamSensitiveWordList},

    ${MarkAsSpamFormTagsInHtml},

    ${MarkAsSpamNdrBackscatter},

    ${AddXHeaderValue},

    ${ModifySubjectValue},

    [Alias('wv')]
    ${WarningVariable},

    ${IncreaseScoreWithImageLinks},

    ${MarkAsSpamEmptyMessages},

    ${MarkAsSpamSpfRecordHardFail},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${MarkAsSpamJavaScriptInHtml},

    ${EnableRegionBlockList},

    ${EnableEndUserSpamNotifications},

    ${RedirectToRecipients},

    ${AllowedSenderDomains},

    ${MarkAsSpamObjectTagsInHtml},

    [Alias('db')]
    [switch]
    ${Debug},

    ${MarkAsSpamFramesInHtml},

    ${IncreaseScoreWithRedirectToOtherPort},

    [Alias('ov')]
    ${OutVariable},

    ${EndUserSpamNotificationLanguage},

    ${EndUserSpamNotificationLimit},

    ${SpamAction},

    ${InlineSafetyTipsEnabled},

    ${ZapEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${BlockedSenders},

    ${AllowedSenders},

    ${LanguageBlockList},

    ${RegionBlockList},

    ${TestModeBccToRecipients},

    ${IncreaseScoreWithBizOrInfoUrls},

    ${AdminDisplayName},

    [Alias('ob')]
    ${OutBuffer},

    ${EndUserSpamNotificationFrequency},

    ${IncreaseScoreWithNumericIps},

    ${BlockedSenderDomains},

    ${MarkAsSpamBulkMail},

    ${DownloadLink},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-HostedContentFilterPolicy') `
                            -Arg ('New-HostedContentFilterPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-HostedContentFilterPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-HostedContentFilterPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Priority},

    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${SentToMemberOf},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${HostedContentFilterPolicy},

    ${SentTo},

    ${Comments},

    [Alias('ev')]
    ${ErrorVariable},

    ${RecipientDomainIs},

    [Alias('ob')]
    ${OutBuffer},

    ${ExceptIfRecipientDomainIs},

    [Alias('wa')]
    ${WarningAction},

    ${ExceptIfSentTo},

    [Alias('ov')]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${ExceptIfSentToMemberOf},

    ${Enabled},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-HostedContentFilterRule') `
                            -Arg ('New-HostedContentFilterRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-HostedContentFilterRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-HostedContentFilterRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${Password},

    ${EmailAddress},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Name},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${Mailbox},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-HotmailSubscription') `
                            -Arg ('New-HotmailSubscription', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-HotmailSubscription
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-HotmailSubscription","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${IncomingPort},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${DisplayName},

    [Alias('ob')]
    ${OutBuffer},

    ${IncomingPassword},

    [Alias('db')]
    [switch]
    ${Debug},

    ${IncomingSecurity},

    ${EmailAddress},

    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${Mailbox},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wv')]
    ${WarningVariable},

    ${IncomingUserName},

    ${IncomingServer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    ${IncomingAuth},

    [switch]
    ${Force},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-ImapSubscription') `
                            -Arg ('New-ImapSubscription', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-ImapSubscription
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-ImapSubscription","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${RestrictDomainsToCertificate},

    ${ConnectorSource},

    ${Name},

    [Alias('ob')]
    ${OutBuffer},

    ${TlsSenderCertificateName},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${SenderIPAddresses},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${ConnectorType},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${CloudServicesMailEnabled},

    ${Comment},

    ${RestrictDomainsToIPAddresses},

    ${SenderDomains},

    [Alias('wv')]
    ${WarningVariable},

    ${TreatMessagesAsInternal},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    ${AssociatedAcceptedDomains},

    ${RequireTls},

    ${Enabled},

    [Alias('ea')]
    ${ErrorAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-InboundConnector') `
                            -Arg ('New-InboundConnector', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-InboundConnector
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-InboundConnector","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${ExceptIfMyNameNotInToBox},

    ${ExceptIfMyNameInToOrCcBox},

    [Alias('wa')]
    ${WarningAction},

    ${PinMessage},

    ${WithinSizeRangeMaximum},

    ${ReceivedBeforeDate},

    ${ExceptIfFromAddressContainsWords},

    ${HasClassification},

    ${ExceptIfFromSubscription},

    ${ExceptIfWithinSizeRangeMaximum},

    ${WithinSizeRangeMinimum},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${MyNameInToOrCcBox},

    ${ExceptIfReceivedBeforeDate},

    ${Mailbox},

    [Alias('ea')]
    ${ErrorAction},

    ${ExceptIfFrom},

    ${RedirectTo},

    ${ReceivedAfterDate},

    ${ForwardTo},

    [Alias('ob')]
    ${OutBuffer},

    ${ExceptIfReceivedAfterDate},

    [Alias('ov')]
    ${OutVariable},

    ${ExceptIfWithImportance},

    ${HeaderContainsWords},

    ${ExceptIfSentOnlyToMe},

    ${ExceptIfSubjectOrBodyContainsWords},

    ${ExceptIfMessageTypeMatches},

    [Alias('db')]
    [switch]
    ${Debug},

    ${ExceptIfHasAttachment},

    ${DeleteMessage},

    ${ExceptIfMyNameInToBox},

    [switch]
    ${AlwaysDeleteOutlookRulesBlob},

    ${From},

    ${RecipientAddressContainsWords},

    ${FlaggedForAction},

    ${WithSensitivity},

    ${CopyToFolder},

    ${FromMessageId},

    ${ExceptIfSubjectContainsWords},

    ${MarkImportance},

    ${Priority},

    ${ApplyCategory},

    ${SubjectContainsWords},

    ${ExceptIfHeaderContainsWords},

    ${ExceptIfRecipientAddressContainsWords},

    ${HasAttachment},

    ${SubjectOrBodyContainsWords},

    ${ExceptIfFlaggedForAction},

    ${FromSubscription},

    ${BodyContainsWords},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${StopProcessingRules},

    ${DeleteSystemCategory},

    ${ExceptIfWithinSizeRangeMinimum},

    ${MessageTypeMatches},

    [Alias('wv')]
    ${WarningVariable},

    ${ApplySystemCategory},

    ${SendTextMessageNotificationTo},

    ${MarkAsRead},

    ${MoveToFolder},

    ${SentTo},

    ${MyNameInCcBox},

    [switch]
    ${ValidateOnly},

    ${WithImportance},

    ${MyNameInToBox},

    ${ExceptIfSentTo},

    [switch]
    ${Force},

    ${SentOnlyToMe},

    ${Name},

    ${ForwardAsAttachmentTo},

    ${ExceptIfBodyContainsWords},

    ${ExceptIfMyNameInCcBox},

    ${FromAddressContainsWords},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${MyNameNotInToBox},

    ${ExceptIfWithSensitivity},

    ${ExceptIfHasClassification},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-InboxRule') `
                            -Arg ('New-InboxRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-InboxRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-InboxRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${TargetAddressDomains},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${DiscoveryEndpoint},

    [Alias('ov')]
    ${OutVariable},

    ${Enabled},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-IntraOrganizationConnector') `
                            -Arg ('New-IntraOrganizationConnector', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-IntraOrganizationConnector
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-IntraOrganizationConnector","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-IscsiTargetPortal","Function","Public","iSCSI","iSCSI","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-IseSnippet","Function","Public","ISE","ISE","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${Scope},

    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${JournalEmailAddress},

    [Alias('ev')]
    ${ErrorVariable},

    ${Recipient},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    ${Enabled},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-JournalRule') `
                            -Arg ('New-JournalRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-JournalRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-JournalRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${Password},

    [Alias('wa')]
    ${WarningAction},

    ${ModeratedBy},

    ${Phone},

    ${Office},

    ${DisplayName},

    ${ResetPasswordOnNextLogon},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${TargetAllMDBs},

    ${RemovedMailbox},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${PublicFolder},

    [switch]
    ${Force},

    ${LastName},

    ${EnableRoomMailboxAccount},

    [Alias('wv')]
    ${WarningVariable},

    ${RoleAssignmentPolicy},

    ${ResourceCapacity},

    [switch]
    ${Archive},

    [switch]
    ${Equipment},

    ${ImmutableId},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${RoomMailboxPassword},

    [switch]
    ${Shared},

    ${IsExcludedFromServingHierarchy},

    ${MailboxPlan},

    ${ModerationEnabled},

    [switch]
    ${Room},

    ${Initials},

    [Alias('ov')]
    ${OutVariable},

    ${FederatedIdentity},

    ${ActiveSyncMailboxPolicy},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${HoldForMigration},

    [switch]
    ${Discovery},

    [Alias('ob')]
    ${OutBuffer},

    ${Alias},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${FirstName},

    ${PrimarySmtpAddress},

    ${SendModerationNotifications},

    ${InactiveMailbox},

    ${OrganizationalUnit},

    ${Name},

    ${RemotePowerShellEnabled},

    ${MicrosoftOnlineServicesID},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-Mailbox') `
                            -Arg ('New-Mailbox', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-Mailbox
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-Mailbox","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [switch]
    ${ShowDetails},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Name},

    ${LogonTypes},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${EndDate},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${ExternalAccess},

    [Alias('ob')]
    ${OutBuffer},

    ${StatusMailRecipients},

    ${Operations},

    [Alias('ea')]
    ${ErrorAction},

    ${Mailboxes},

    ${HasAttachments},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    ${StartDate},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-MailboxAuditLogSearch') `
                            -Arg ('New-MailboxAuditLogSearch', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-MailboxAuditLogSearch
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MailboxAuditLogSearch","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${Parent},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Name},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-MailboxFolder') `
                            -Arg ('New-MailboxFolder', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-MailboxFolder
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MailboxFolder","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${ExcludeDumpster},

    ${ConflictResolutionOption},

    ${AssociatedMessagesCopyOption},

    ${Name},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${SuspendComment},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${TargetIsArchive},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ea')]
    ${ErrorAction},

    ${IncludeFolders},

    ${LargeItemLimit},

    [switch]
    ${Suspend},

    ${BatchName},

    [Alias('ov')]
    ${OutVariable},

    ${DomainController},

    ${SourceMailbox},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${AcceptLargeDataLoss},

    ${BadItemLimit},

    [switch]
    ${SourceIsArchive},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AllowLegacyDNMismatch},

    ${ExcludeFolders},

    [Alias('ob')]
    ${OutBuffer},

    ${TargetRootFolder},

    ${SourceRootFolder},

    ${CompletedRequestAgeLimit},

    ${TargetMailbox},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-MailboxRestoreRequest') `
                            -Arg ('New-MailboxRestoreRequest', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-MailboxRestoreRequest
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MailboxRestoreRequest","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${InPlaceHoldIdentity},

    [Alias('wa')]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${InPlaceHoldEnabled},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${ItemHoldPeriod},

    [Alias('ov')]
    ${OutVariable},

    ${SourceMailboxes},

    [switch]
    ${Force},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-MailboxSearch') `
                            -Arg ('New-MailboxSearch', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-MailboxSearch
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MailboxSearch","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${LastName},

    ${UsePreferMessageFormat},

    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wa')]
    ${WarningAction},

    ${ModeratedBy},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Name},

    ${MessageBodyFormat},

    ${Alias},

    [Alias('ev')]
    ${ErrorVariable},

    ${OrganizationalUnit},

    ${Initials},

    ${MessageFormat},

    [Alias('ob')]
    ${OutBuffer},

    ${ModerationEnabled},

    ${MacAttachmentFormat},

    [Alias('ov')]
    ${OutVariable},

    ${SendModerationNotifications},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${ExternalEmailAddress},

    [Alias('wv')]
    ${WarningVariable},

    ${FirstName},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-MailContact') `
                            -Arg ('New-MailContact', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-MailContact
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MailContact","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${Body},

    ${Subject},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    ${WarningVariable},

    ${BodyFormat},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-MailMessage') `
                            -Arg ('New-MailMessage', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-MailMessage
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MailMessage","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${Password},

    [Alias('wa')]
    ${WarningAction},

    ${ModeratedBy},

    ${ModerationEnabled},

    ${MacAttachmentFormat},

    ${DisplayName},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${LastName},

    [Alias('wv')]
    ${WarningVariable},

    ${UsePreferMessageFormat},

    ${ImmutableId},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${MicrosoftOnlineServicesID},

    ${MessageBodyFormat},

    ${Initials},

    [Alias('ov')]
    ${OutVariable},

    ${FederatedIdentity},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${ExternalEmailAddress},

    ${Alias},

    ${MessageFormat},

    ${FirstName},

    ${SendModerationNotifications},

    [Alias('ob')]
    ${OutBuffer},

    ${OrganizationalUnit},

    ${Name},

    ${RemotePowerShellEnabled},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-MailUser') `
                            -Arg ('New-MailUser', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-MailUser
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MailUser","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wa')]
    ${WarningAction},

    [Alias('ob')]
    ${OutBuffer},

    ${CustomFromName},

    ${Action},

    ${AdminDisplayName},

    ${Name},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    ${WarningVariable},

    ${EnableExternalSenderNotifications},

    [Alias('ea')]
    ${ErrorAction},

    ${CustomNotifications},

    ${EnableInternalSenderNotifications},

    ${EnableExternalSenderAdminNotifications},

    ${InternalSenderAdminAddress},

    ${CustomAlertText},

    ${CustomExternalBody},

    ${FileTypes},

    ${EnableInternalSenderAdminNotifications},

    ${CustomFromAddress},

    [Alias('ov')]
    ${OutVariable},

    ${CustomExternalSubject},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${ExternalSenderAdminAddress},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${CustomInternalSubject},

    ${CustomInternalBody},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-MalwareFilterPolicy') `
                            -Arg ('New-MalwareFilterPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-MalwareFilterPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MalwareFilterPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Priority},

    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${SentToMemberOf},

    [Alias('wa')]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    ${SentTo},

    ${Comments},

    [Alias('ev')]
    ${ErrorVariable},

    ${RecipientDomainIs},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${ExceptIfRecipientDomainIs},

    ${MalwareFilterPolicy},

    ${ExceptIfSentTo},

    [Alias('ov')]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${ExceptIfSentToMemberOf},

    ${Enabled},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-MalwareFilterRule') `
                            -Arg ('New-MalwareFilterRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-MalwareFilterRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MalwareFilterRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${Parent},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    [switch]
    ${Force},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-ManagementRole') `
                            -Arg ('New-ManagementRole', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-ManagementRole
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-ManagementRole","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('ov')]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${CustomRecipientWriteScope},

    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${RecipientAdministrativeUnitScope},

    ${ExclusiveRecipientWriteScope},

    ${User},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${RecipientOrganizationalUnitScope},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${Delegating},

    ${Policy},

    ${SecurityGroup},

    ${Role},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${RecipientRelativeWriteScope},

    [switch]
    ${Force},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-ManagementRoleAssignment') `
                            -Arg ('New-ManagementRoleAssignment', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-ManagementRoleAssignment
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-ManagementRoleAssignment","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [switch]
    ${Exclusive},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${RecipientRoot},

    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${RecipientRestrictionFilter},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    [switch]
    ${Force},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-ManagementScope') `
                            -Arg ('New-ManagementScope', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-ManagementScope
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-ManagementScope","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MaskingSet","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${Locale},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${RecipientDescription},

    [Alias('wa')]
    ${WarningAction},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Name},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${PermissionMenuVisible},

    ${ClassificationID},

    [Alias('ea')]
    ${ErrorAction},

    ${SenderDescription},

    ${DisplayPrecedence},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${RetainClassificationEnabled},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-MessageClassification') `
                            -Arg ('New-MessageClassification', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-MessageClassification
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MessageClassification","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${AutoRetryCount},

    [Alias('wa')]
    ${WarningAction},

    ${SourceEndpoint},

    [switch]
    ${AutoStart},

    ${Users},

    ${UserIds},

    ${WorkflowControlFlags},

    [switch]
    ${DisallowExistingUsers},

    [Alias('ev')]
    ${ErrorVariable},

    ${TargetDatabases},

    ${TargetEndpoint},

    ${CSVData},

    ${NotificationEmails},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${SkipReports},

    ${TargetArchiveDatabases},

    ${AllowIncrementalSyncs},

    ${ReportInterval},

    [Alias('ea')]
    ${ErrorAction},

    ${LargeItemLimit},

    [Alias('db')]
    [switch]
    ${Debug},

    ${SkipMoving},

    [Alias('ov')]
    ${OutVariable},

    ${SkipSteps},

    [switch]
    ${PrimaryOnly},

    [switch]
    ${DisableOnCopy},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${TargetDeliveryDomain},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${ArchiveOnly},

    [Alias('ob')]
    ${OutBuffer},

    ${BadItemLimit},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${ExcludeFolders},

    ${SkipMerging},

    ${Name},

    [switch]
    ${AutoComplete},

    ${AllowUnknownColumnsInCsv},

    ${WorkflowTemplate},

    ${TimeZone},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-MigrationBatch') `
                            -Arg ('New-MigrationBatch', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-MigrationBatch
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MigrationBatch","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wa')]
    ${WarningAction},

    ${Name},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${ExchangeRemoteMove},

    ${MaxConcurrentMigrations},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${PublicFolder},

    ${TestMailbox},

    [Alias('wv')]
    ${WarningVariable},

    ${ExchangeServer},

    ${Authentication},

    [switch]
    ${ExchangeOutlookAnywhere},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${Compliance},

    ${Port},

    ${RemoteServer},

    [Alias('ov')]
    ${OutVariable},

    ${MailboxPermission},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${SourceMailboxLegacyDN},

    [switch]
    ${IMAP},

    [switch]
    ${Autodiscover},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${NspiServer},

    ${RpcProxyServer},

    ${EmailAddress},

    [Alias('ob')]
    ${OutBuffer},

    ${Security},

    [switch]
    ${SkipVerification},

    ${MaxConcurrentIncrementalSyncs},

    ${PublicFolderDatabaseServerLegacyDN},

    ${Credentials},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-MigrationEndpoint') `
                            -Arg ('New-MigrationEndpoint', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-MigrationEndpoint
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MigrationEndpoint","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${AllowMicrosoftPushNotifications},

    ${AllowUnsignedApplications},

    [Alias('wa')]
    ${WarningAction},

    ${AllowUnsignedInstallationPackages},

    ${MaxPasswordFailedAttempts},

    ${AllowExternalDeviceManagement},

    ${RequireDeviceEncryption},

    ${RequireSignedSMIMEMessages},

    ${AllowStorageCard},

    ${AllowIrDA},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${PasswordHistory},

    ${AllowNonProvisionableDevices},

    ${UnapprovedInROMApplicationList},

    ${RequireEncryptedSMIMEMessages},

    ${AllowInternetSharing},

    [Alias('ov')]
    ${OutVariable},

    ${PasswordEnabled},

    ${MaxEmailHTMLBodyTruncationSize},

    [Alias('db')]
    [switch]
    ${Debug},

    ${MinPasswordComplexCharacters},

    ${UNCAccessEnabled},

    ${AllowCamera},

    ${IrmEnabled},

    ${PasswordExpiration},

    ${AllowBrowser},

    ${MaxEmailAgeFilter},

    ${RequireSignedSMIMEAlgorithm},

    ${RequireManualSyncWhenRoaming},

    ${AlphanumericPasswordRequired},

    ${AllowSMIMEEncryptionAlgorithmNegotiation},

    ${MaxEmailBodyTruncationSize},

    ${AllowBluetooth},

    ${RequireEncryptionSMIMEAlgorithm},

    ${DevicePolicyRefreshInterval},

    ${AllowGooglePushNotifications},

    ${AllowMobileOTAUpdate},

    ${Name},

    ${MaxAttachmentSize},

    ${AllowSimplePassword},

    ${AllowConsumerEmail},

    ${AllowDesktopSync},

    ${RequireStorageCardEncryption},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${AttachmentsEnabled},

    [Alias('wv')]
    ${WarningVariable},

    ${AllowSMIMESoftCerts},

    ${AllowRemoteDesktop},

    ${PasswordRecoveryEnabled},

    ${MaxCalendarAgeFilter},

    [Alias('ea')]
    ${ErrorAction},

    ${AllowApplePushNotifications},

    ${AllowPOPIMAPEmail},

    ${IsDefault},

    ${MaxInactivityTimeLock},

    ${AllowWiFi},

    ${ApprovedApplicationList},

    ${AllowTextMessaging},

    ${WSSAccessEnabled},

    ${DeviceEncryptionEnabled},

    ${MinPasswordLength},

    ${AllowHTMLEmail},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-MobileDeviceMailboxPolicy') `
                            -Arg ('New-MobileDeviceMailboxPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-MobileDeviceMailboxPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MobileDeviceMailboxPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wa')]
    ${WarningAction},

    ${IncrementalSyncInterval},

    ${ProxyToMailbox},

    ${RemoteOrganizationName},

    ${Identity},

    [switch]
    ${SuspendWhenReadyToComplete},

    ${RemoteArchiveTargetDatabase},

    [switch]
    ${ForceOffline},

    [Alias('ev')]
    ${ErrorVariable},

    ${RequestExpiryInterval},

    [switch]
    ${PreventCompletion},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${LargeItemLimit},

    [switch]
    ${Suspend},

    [Alias('ov')]
    ${OutVariable},

    ${BatchName},

    ${SkipMoving},

    ${RemoteHostName},

    ${SuspendComment},

    ${CompleteAfter},

    [switch]
    ${PrimaryOnly},

    [switch]
    ${Remote},

    ${RemoteTargetDatabase},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${AcceptLargeDataLoss},

    [switch]
    ${ArchiveOnly},

    ${StartAfter},

    ${BadItemLimit},

    ${ArchiveDomain},

    ${RemoteGlobalCatalog},

    ${TargetDeliveryDomain},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    ${RemoteCredential},

    ${CompletedRequestAgeLimit},

    [switch]
    ${Outbound},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-MoveRequest') `
                            -Arg ('New-MoveRequest', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-MoveRequest
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MoveRequest","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-NetAdapterAdvancedProperty","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-NetEventSession","Function","Public","NetEventPacketCapture","NetEventPacketCapture","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-NetFirewallRule","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-NetIPAddress","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-NetIPHttpsConfiguration","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-NetIPsecDospSetting","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-NetIPsecMainModeCryptoSet","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-NetIPsecMainModeRule","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-NetIPsecPhase1AuthSet","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-NetIPsecPhase2AuthSet","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-NetIPsecQuickModeCryptoSet","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-NetIPsecRule","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-NetLbfoTeam","Function","Public","NetLbfo","NetLbfo","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-NetNat","Function","Public","NetNat","NetNat","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-NetNatTransitionConfiguration","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-NetNeighbor","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-NetQosPolicy","Function","Public","NetQos","NetQos","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-NetRoute","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-NetSwitchTeam","Function","Public","NetSwitchTeam","NetSwitchTeam","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-NetTransportFilter","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${InboundConnector},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Name},

    ${OutboundConnector},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${OrganizationName},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    ${OutBuffer},

    ${Comment},

    ${OrganizationGuid},

    [Alias('ev')]
    ${ErrorVariable},

    ${OrganizationRelationship},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    ${HybridDomains},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-OnPremisesOrganization') `
                            -Arg ('New-OnPremisesOrganization', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-OnPremisesOrganization
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-OnPremisesOrganization","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${TargetApplicationUri},

    [Alias('wa')]
    ${WarningAction},

    ${MailTipsAccessLevel},

    ${TargetAutodiscoverEpr},

    ${Enabled},

    ${Name},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${DeliveryReportEnabled},

    [Alias('wv')]
    ${WarningVariable},

    ${OrganizationContact},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ea')]
    ${ErrorAction},

    ${ArchiveAccessEnabled},

    ${FreeBusyAccessEnabled},

    ${MailTipsAccessScope},

    ${TargetOwaURL},

    [Alias('ov')]
    ${OutVariable},

    ${MailTipsAccessEnabled},

    ${PhotosEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${TargetSharingEpr},

    ${FreeBusyAccessLevel},

    ${DomainNames},

    [Alias('ob')]
    ${OutBuffer},

    ${FreeBusyAccessScope},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-OrganizationRelationship') `
                            -Arg ('New-OrganizationRelationship', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-OrganizationRelationship
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-OrganizationRelationship","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${Comment},

    ${RecipientDomains},

    ${TlsSettings},

    ${ConnectorSource},

    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ev')]
    ${ErrorVariable},

    ${TestMode},

    [Alias('db')]
    [switch]
    ${Debug},

    ${ConnectorType},

    ${TlsDomain},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${CloudServicesMailEnabled},

    [Alias('ob')]
    ${OutBuffer},

    ${IsTransportRuleScoped},

    ${RouteAllMessagesViaOnPremises},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('ea')]
    ${ErrorAction},

    ${AllAcceptedDomains},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    ${Enabled},

    ${SmartHosts},

    ${UseMXRecord},

    ${LinkForModifiedConnector},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-OutboundConnector') `
                            -Arg ('New-OutboundConnector', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-OutboundConnector
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-OutboundConnector","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Priority},

    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${SentToScope},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${SentTo},

    ${UserCanOverride},

    [Alias('ob')]
    ${OutBuffer},

    ${FromDepartment},

    ${ApplyRightsProtectionTemplate},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    ${Enabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Force},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-OutlookProtectionRule') `
                            -Arg ('New-OutlookProtectionRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-OutlookProtectionRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-OutlookProtectionRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${IsDefault},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Name},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-OwaMailboxPolicy') `
                            -Arg ('New-OwaMailboxPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-OwaMailboxPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-OwaMailboxPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-Partition","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${ApplicationIdentifier},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${LinkedAccount},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${AcceptSecurityIdentifierInformation},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    ${AccountType},

    ${Enabled},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-PartnerApplication') `
                            -Arg ('New-PartnerApplication', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-PartnerApplication
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-PartnerApplication","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Value},

    ${Name},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-PolicyTipConfig') `
                            -Arg ('New-PolicyTipConfig', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-PolicyTipConfig
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-PolicyTipConfig","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${IncomingPort},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${DisplayName},

    [Alias('ob')]
    ${OutBuffer},

    ${IncomingPassword},

    [Alias('db')]
    [switch]
    ${Debug},

    ${IncomingSecurity},

    ${EmailAddress},

    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${Mailbox},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wv')]
    ${WarningVariable},

    ${IncomingUserName},

    ${IncomingServer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    ${IncomingAuth},

    [switch]
    ${Force},

    ${LeaveOnServer},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-PopSubscription') `
                            -Arg ('New-PopSubscription', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-PopSubscription
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-PopSubscription","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-PSWorkflowSession","Function","Public","PSWorkflow","PSWorkflow","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Name},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${EformsLocaleId},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${Mailbox},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    ${Path},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-PublicFolder') `
                            -Arg ('New-PublicFolder', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-PublicFolder
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-PublicFolder","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${CSVStream},

    [Alias('wa')]
    ${WarningAction},

    ${RemoteMailboxLegacyDN},

    ${OutlookAnywhereHostName},

    ${Name},

    [Alias('db')]
    [switch]
    ${Debug},

    ${RequestExpiryInterval},

    ${SuspendComment},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${AuthenticationMethod},

    ${SkipMerging},

    ${LargeItemLimit},

    [switch]
    ${Suspend},

    ${BatchName},

    ${CSVData},

    [Alias('ov')]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${AcceptLargeDataLoss},

    ${BadItemLimit},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    ${RemoteCredential},

    ${CompletedRequestAgeLimit},

    ${RemoteMailboxServerLegacyDN},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-PublicFolderMigrationRequest') `
                            -Arg ('New-PublicFolderMigrationRequest', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-PublicFolderMigrationRequest
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-PublicFolderMigrationRequest","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    ${Name},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    ${DomainName},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-RemoteDomain') `
                            -Arg ('New-RemoteDomain', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-RemoteDomain
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-RemoteDomain","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${Locale},

    ${DlpRuleId},

    ${Direction},

    ${TransportRuleId},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ev')]
    ${ErrorVariable},

    ${ScheduleName},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [switch]
    ${IncludeDLP},

    [Alias('ob')]
    ${OutBuffer},

    ${SenderAddress},

    ${ExpiryDate},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    ${RecipientAddress},

    ${NotificationEmail},

    ${ReportFrequency},

    ${ReportType},

    ${StartDate},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-ReportSchedule') `
                            -Arg ('New-ReportSchedule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-ReportSchedule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-ReportSchedule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${RetentionPolicyTagLinks},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${RetentionId},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${IsDefaultArbitrationMailbox},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${IsDefault},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-RetentionPolicy') `
                            -Arg ('New-RetentionPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-RetentionPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-RetentionPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${MessageClass},

    [switch]
    ${IsDefaultAutoGroupPolicyTag},

    ${Type},

    ${RetentionEnabled},

    ${Name},

    ${LocalizedRetentionPolicyTagName},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wa')]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    ${RetentionAction},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${Comment},

    ${MustDisplayCommentEnabled},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('ea')]
    ${ErrorAction},

    ${LocalizedComment},

    ${RetentionId},

    ${AgeLimitForRetention},

    ${SystemTag},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${IsDefaultModeratedRecipientsPolicyTag},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-RetentionPolicyTag') `
                            -Arg ('New-RetentionPolicyTag', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-RetentionPolicyTag
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-RetentionPolicyTag","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    [switch]
    ${IsDefault},

    ${Roles},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-RoleAssignmentPolicy') `
                            -Arg ('New-RoleAssignmentPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-RoleAssignmentPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-RoleAssignmentPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${CustomRecipientWriteScope},

    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${Members},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Name},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${ManagedBy},

    [Alias('ov')]
    ${OutVariable},

    [switch]
    ${Force},

    ${Roles},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-RoleGroup') `
                            -Arg ('New-RoleGroup', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-RoleGroup
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-RoleGroup","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-ScheduledTask","Function","Public","ScheduledTasks","ScheduledTasks","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-ScheduledTaskAction","Function","Public","ScheduledTasks","ScheduledTasks","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-ScheduledTaskPrincipal","Function","Public","ScheduledTasks","ScheduledTasks","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-ScheduledTaskSettingsSet","Function","Public","ScheduledTasks","ScheduledTasks","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-ScheduledTaskTrigger","Function","Public","ScheduledTasks","ScheduledTasks","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${Domains},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${Default},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    ${Enabled},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-SharingPolicy') `
                            -Arg ('New-SharingPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-SharingPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-SharingPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Name},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${Alias},

    [Alias('ev')]
    ${ErrorVariable},

    ${OrganizationalUnit},

    [Alias('ob')]
    ${OutBuffer},

    ${SharePointUrl},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    [switch]
    ${Force},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-SiteMailbox') `
                            -Arg ('New-SiteMailbox', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-SiteMailbox
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-SiteMailbox","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-SiteMailboxProvisioningPolicy') `
                            -Arg ('New-SiteMailboxProvisioningPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-SiteMailboxProvisioningPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-SiteMailboxProvisioningPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-SmbMapping","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-SmbMultichannelConstraint","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-SmbShare","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-StoragePool","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-StorageSubsystemVirtualDisk","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-StorageTier","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${Password},

    ${EmailAddress},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Name},

    [Alias('ov')]
    ${OutVariable},

    [switch]
    ${Hotmail},

    ${Mailbox},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${Pop},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${Imap},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Force},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-Subscription') `
                            -Arg ('New-Subscription', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-Subscription
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-Subscription","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${WindowsEmailAddress},

    [Alias('wa')]
    ${WarningAction},

    ${CustomAttribute12},

    ${CustomAttribute10},

    ${RequireSenderAuthenticationEnabled},

    ${DeliverToMailboxAndForward},

    ${CustomAttribute8},

    ${DisplayName},

    ${CustomAttribute3},

    ${Name},

    [Alias('ev')]
    ${ErrorVariable},

    ${CustomAttribute7},

    [Alias('db')]
    [switch]
    ${Debug},

    ${ForwardingAddress},

    [switch]
    ${HiddenFromAddressListsEnabled},

    ${MaxSendSize},

    [Alias('wv')]
    ${WarningVariable},

    ${CustomAttribute6},

    ${CustomAttribute1},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${OverrideRecipientQuotas},

    ${CustomAttribute9},

    ${CustomAttribute14},

    ${RejectMessagesFrom},

    ${MaxReceiveSize},

    ${Contacts},

    ${AcceptMessagesOnlyFrom},

    ${CustomAttribute15},

    [Alias('ov')]
    ${OutVariable},

    ${CustomAttribute5},

    ${OnPremisesObjectId},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${ExternalEmailAddress},

    ${CustomAttribute4},

    ${Alias},

    ${GrantSendOnBehalfTo},

    ${CustomAttribute2},

    ${CustomAttribute13},

    [Alias('ob')]
    ${OutBuffer},

    ${CustomAttribute11},

    ${EmailAddresses},

    ${EntryId},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-SyncMailPublicFolder') `
                            -Arg ('New-SyncMailPublicFolder', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-SyncMailPublicFolder
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-SyncMailPublicFolder","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${Password},

    [switch]
    ${SunriseCalendarSync},

    ${IncrementalSyncInterval},

    ${ConflictResolutionOption},

    [switch]
    ${Unified},

    [switch]
    ${Mail},

    ${TokenSecret},

    [switch]
    ${Eas},

    ${DisplayName},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Name},

    ${RequestExpiryInterval},

    ${TargetRootFolder},

    ${OAuthProvider},

    [switch]
    ${Force},

    [switch]
    ${Contact},

    [switch]
    ${SendOnly},

    [Alias('wv')]
    ${WarningVariable},

    ${RemoteServerPort},

    ${Authentication},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${Pop},

    [switch]
    ${DoNotLeaveOnServer},

    ${IncludeFolders},

    [switch]
    ${UseTokenStore},

    ${UserName},

    [switch]
    ${RemoteSendEnabled},

    ${SmtpServerName},

    [switch]
    ${OnlySyncMessagesReceivedAfterRequestCreation},

    [Alias('ov')]
    ${OutVariable},

    ${Mailbox},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Calendar},

    [switch]
    ${Imap},

    [Alias('ev')]
    ${ErrorVariable},

    ${RemoteEmailAddress},

    ${RemoteUserIdentifier},

    ${SmtpServerPort},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${AccessToken},

    ${ExcludeFolders},

    ${SkipMerging},

    ${Security},

    ${RefreshToken},

    ${CompletedRequestAgeLimit},

    ${RemoteServerName},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-SyncRequest') `
                            -Arg ('New-SyncRequest', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-SyncRequest
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-SyncRequest","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${ActivationDate},

    ${AddToRecipients},

    ${ApplyHtmlDisclaimerFallbackAction},

    ${ExceptIfRecipientADAttributeContainsWords},

    ${RecipientADAttributeMatchesPatterns},

    ${AttachmentSizeOver},

    ${ExceptIfSenderADAttributeContainsWords},

    ${SetSCL},

    ${AnyOfToHeaderMemberOf},

    ${Disconnect},

    ${ExceptIfSentToMemberOf},

    ${ExceptIfAnyOfCcHeader},

    ${ExceptIfAttachmentMatchesPatterns},

    ${RecipientDomainIs},

    ${ManagerForEvaluatedUser},

    ${SmtpRejectMessageRejectStatusCode},

    [Alias('wv')]
    ${WarningVariable},

    ${ExceptIfHeaderMatchesPatterns},

    ${ExceptIfFromScope},

    ${ADComparisonAttribute},

    ${ExceptIfHeaderContainsWords},

    ${HeaderMatchesPatterns},

    ${ExceptIfAttachmentIsPasswordProtected},

    ${DeleteMessage},

    ${HasSenderOverride},

    ${ExceptIfSubjectOrBodyMatchesPatterns},

    ${ExceptIfHasClassification},

    ${Quarantine},

    ${ExceptIfAnyOfRecipientAddressMatchesPatterns},

    ${AnyOfCcHeaderMemberOf},

    ${ExceptIfContentCharacterSetContainsWords},

    ${BlindCopyTo},

    ${ApplyHtmlDisclaimerLocation},

    ${ExceptIfMessageTypeMatches},

    ${SenderIpRanges},

    ${ExceptIfMessageContainsDataClassifications},

    ${ModerateMessageByUser},

    ${HasNoClassification},

    ${ExceptIfSenderInRecipientList},

    ${HeaderContainsMessageHeader},

    ${RemoveHeader},

    ${HasClassification},

    ${MessageContainsDataClassifications},

    ${ExceptIfFromMemberOf},

    ${RuleSubType},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${SentToScope},

    ${AnyOfToCcHeaderMemberOf},

    ${From},

    ${ExceptIfAnyOfRecipientAddressContainsWords},

    ${ExceptIfWithImportance},

    ${ContentCharacterSetContainsWords},

    ${SubjectContainsWords},

    ${RejectMessageEnhancedStatusCode},

    ${SenderADAttributeMatchesPatterns},

    ${ExceptIfSenderADAttributeMatchesPatterns},

    ${IncidentReportContent},

    ${UseLegacyRegex},

    ${FromMemberOf},

    ${AttachmentContainsWords},

    ${ExceptIfSCLOver},

    [Alias('ob')]
    ${OutBuffer},

    ${ExceptIfBetweenMemberOf1},

    ${GenerateNotification},

    ${NotifySender},

    ${ExceptIfAttachmentNameMatchesPatterns},

    ${ExceptIfSenderManagementRelationship},

    ${SetAuditSeverity},

    ${AttachmentPropertyContainsWords},

    ${ExceptIfAnyOfToHeader},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${RouteMessageOutboundRequireTls},

    ${WithImportance},

    ${RuleErrorAction},

    ${FromScope},

    ${AttachmentNameMatchesPatterns},

    ${SentTo},

    ${ExceptIfFromAddressMatchesPatterns},

    ${Enabled},

    ${ExceptIfAttachmentSizeOver},

    ${ExceptIfManagerForEvaluatedUser},

    ${ExceptIfFromAddressContainsWords},

    ${AttachmentHasExecutableContent},

    ${RouteMessageOutboundConnector},

    ${SubjectMatchesPatterns},

    ${ExceptIfRecipientDomainIs},

    [Alias('wa')]
    ${WarningAction},

    ${ExceptIfSenderDomainIs},

    ${SenderManagementRelationship},

    ${ExceptIfBetweenMemberOf2},

    ${RedirectMessageTo},

    ${ApplyOME},

    ${AddManagerAsRecipientType},

    ${ExceptIfMessageSizeOver},

    ${RecipientInSenderList},

    ${SenderADAttributeContainsWords},

    ${MessageSizeOver},

    ${ExceptIfRecipientInSenderList},

    ${ExceptIfAttachmentHasExecutableContent},

    ${ExceptIfAttachmentIsUnsupported},

    ${RemoveOME},

    ${RejectMessageReasonText},

    ${RecipientAddressContainsWords},

    ${GenerateIncidentReport},

    ${FromAddressContainsWords},

    ${AnyOfRecipientAddressMatchesPatterns},

    ${ApplyHtmlDisclaimerText},

    ${RecipientAddressMatchesPatterns},

    ${ExceptIfSubjectContainsWords},

    ${ExceptIfFrom},

    ${AnyOfToCcHeader},

    ${ExceptIfSentToScope},

    ${ExceptIfAnyOfToCcHeaderMemberOf},

    ${ModerateMessageByManager},

    ${ADComparisonOperator},

    ${BetweenMemberOf2},

    ${SetHeaderName},

    ${AttachmentProcessingLimitExceeded},

    ${ExceptIfAnyOfCcHeaderMemberOf},

    ${ExceptIfSubjectMatchesPatterns},

    ${Name},

    ${ExceptIfRecipientAddressContainsWords},

    ${HeaderMatchesMessageHeader},

    ${AnyOfRecipientAddressContainsWords},

    ${HeaderContainsWords},

    ${Comments},

    ${SentToMemberOf},

    ${ExceptIfADComparisonAttribute},

    ${ExceptIfSentTo},

    [Alias('ov')]
    ${OutVariable},

    ${ExceptIfADComparisonOperator},

    ${ExceptIfAnyOfToHeaderMemberOf},

    ${Mode},

    ${ExceptIfAnyOfToCcHeader},

    ${SubjectOrBodyMatchesPatterns},

    [Alias('db')]
    [switch]
    ${Debug},

    ${ExceptIfAttachmentExtensionMatchesWords},

    [Alias('ev')]
    ${ErrorVariable},

    ${SenderDomainIs},

    ${ExceptIfRecipientAddressMatchesPatterns},

    ${ExceptIfHasNoClassification},

    ${ExceptIfSenderIpRanges},

    ${ExceptIfRecipientADAttributeMatchesPatterns},

    ${RecipientADAttributeContainsWords},

    ${AttachmentIsUnsupported},

    ${ExpiryDate},

    ${AttachmentExtensionMatchesWords},

    ${ExceptIfSubjectOrBodyContainsWords},

    ${LogEventText},

    ${ExceptIfManagerAddresses},

    ${SenderInRecipientList},

    ${AttachmentMatchesPatterns},

    ${DlpPolicy},

    ${ManagerAddresses},

    ${SenderAddressLocation},

    [Alias('ea')]
    ${ErrorAction},

    ${CopyTo},

    ${SubjectOrBodyContainsWords},

    ${ApplyClassification},

    ${SetHeaderValue},

    ${Priority},

    ${AttachmentIsPasswordProtected},

    ${BetweenMemberOf1},

    ${AnyOfCcHeader},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${ExceptIfAttachmentProcessingLimitExceeded},

    ${FromAddressMatchesPatterns},

    ${ExceptIfHeaderMatchesMessageHeader},

    ${SmtpRejectMessageRejectText},

    ${ExceptIfAttachmentContainsWords},

    ${AnyOfToHeader},

    ${ExceptIfHasSenderOverride},

    ${SCLOver},

    ${PrependSubject},

    ${ApplyRightsProtectionTemplate},

    ${MessageTypeMatches},

    ${ExceptIfAttachmentPropertyContainsWords},

    ${StopRuleProcessing},

    ${ExceptIfHeaderContainsMessageHeader},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-TransportRule') `
                            -Arg ('New-TransportRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-TransportRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-TransportRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Name},

    ${SpeechEnabled},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ev')]
    ${ErrorVariable},

    ${PilotIdentifierList},

    ${DTMFFallbackAutoAttendant},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${Status},

    ${UMDialPlan},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-UMAutoAttendant') `
                            -Arg ('New-UMAutoAttendant', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-UMAutoAttendant
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-UMAutoAttendant","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Priority},

    ${Name},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${CallerIds},

    [Alias('ov')]
    ${OutVariable},

    ${Mailbox},

    [Alias('ev')]
    ${ErrorVariable},

    ${CallersCanInterruptGreeting},

    ${ScheduleStatus},

    [Alias('wa')]
    ${WarningAction},

    ${TimeOfDay},

    ${CheckAutomaticReplies},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${ExtensionsDialed},

    ${KeyMappings},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-UMCallAnsweringRule') `
                            -Arg ('New-UMCallAnsweringRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-UMCallAnsweringRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-UMCallAnsweringRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Name},

    ${CountryOrRegionCode},

    ${GenerateUMMailboxPolicy},

    [Alias('wv')]
    ${WarningVariable},

    ${NumberOfDigitsInExtension},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${FaxEnabled},

    ${AccessTelephoneNumbers},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    ${DefaultLanguage},

    ${URIType},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-UMDialPlan') `
                            -Arg ('New-UMDialPlan', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-UMDialPlan
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-UMDialPlan","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Name},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${UMIPGateway},

    [Alias('ob')]
    ${OutBuffer},

    ${PilotIdentifier},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    ${UMDialPlan},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-UMHuntGroup') `
                            -Arg ('New-UMHuntGroup', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-UMHuntGroup
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-UMHuntGroup","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Name},

    ${IPAddressFamily},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${Address},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    ${UMDialPlan},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-UMIPGateway') `
                            -Arg ('New-UMIPGateway', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-UMIPGateway
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-UMIPGateway","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    ${UMDialPlan},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Name},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-UMMailboxPolicy') `
                            -Arg ('New-UMMailboxPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-UMMailboxPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-UMMailboxPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wa')]
    ${WarningAction},

    ${RequireSenderAuthenticationEnabled},

    [switch]
    ${ConvertClosedDlToPrivateGroup},

    ${DisplayName},

    ${Name},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Classification},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${HiddenGroupMembershipEnabled},

    [switch]
    ${AutoSubscribeNewMembers},

    [Alias('ea')]
    ${ErrorAction},

    ${ExecutingUser},

    [switch]
    ${SuppressWarmupMessage},

    [switch]
    ${SubscriptionEnabled},

    ${DlIdentity},

    ${Members},

    [switch]
    ${DeleteDlAfterMigration},

    [Alias('ov')]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${Notes},

    [Alias('ob')]
    ${OutBuffer},

    ${Alias},

    ${ManagedBy},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${Language},

    ${PrimarySmtpAddress},

    ${AccessType},

    [Alias('ev')]
    ${ErrorVariable},

    ${EmailAddresses},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'New-UnifiedGroup') `
                            -Arg ('New-UnifiedGroup', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName New-UnifiedGroup
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-UnifiedGroup","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-VirtualDisk","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-VirtualDiskClone","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-VirtualDiskSnapshot","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-Volume","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-VpnServerAddress","Function","Public","VpnClient","VpnClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-Location O:","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","O:","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Open-NetGPO","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Optimize-Volume","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113368",,,,,"
[CmdletBinding()]
param(
    [ValidateRange(2, 2147483647)]
    [int]
    ${Width},

    [Parameter(ValueFromPipeline=$true)]
    [psobject]
    ${InputObject})

begin
{
    try {
        $PSBoundParameters['Stream'] = $true
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand('Out-String',[System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters }
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process
{
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end
{
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
<#
.ForwardHelpTargetName Out-String
.ForwardHelpCategory Cmdlet
#>
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","oss","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-Location P:","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","P:","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Read-Host 'Press Enter to continue...' | Out-Null","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Pause","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Preview-QuarantineMessage') `
                            -Arg ('Preview-QuarantineMessage', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Preview-QuarantineMessage
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Preview-QuarantineMessage","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=225750",,,,,"""PS $($executionContext.SessionState.Path.CurrentLocation)$('>' * ($nestedPromptLevel + 1)) ""
# .Link
# http://go.microsoft.com/fwlink/?LinkID=225750
# .ExternalHelp System.Management.Automation.dll-help.xml
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","prompt","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-Location Q:","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Q:","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-Location R:","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","R:","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Read-PrinterNfcTag","Function","Public","PrintManagement","PrintManagement","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Register-ClusteredScheduledTask","Function","Public","ScheduledTasks","ScheduledTasks","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Low', PositionalBinding=$false)]
    
    param(
    
    [Parameter(ParameterSetName='Register0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Register0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Register0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Register', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_DnsClient.cdxml-Help.xml
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Register-DnsClient","Function","Public","DnsClient","DnsClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Register-IscsiSession","Function","Public","iSCSI","iSCSI","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Register-ScheduledTask","Function","Public","ScheduledTasks","ScheduledTasks","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Register-StorageSubsystem","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [switch]
    ${ReportFalsePositive},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${User},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [switch]
    ${ReleaseToAll},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${Force},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Release-QuarantineMessage') `
                            -Arg ('Release-QuarantineMessage', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Release-QuarantineMessage
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Release-QuarantineMessage","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-ActiveSyncDevice') `
                            -Arg ('Remove-ActiveSyncDevice', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-ActiveSyncDevice
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-ActiveSyncDevice","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-ActiveSyncDeviceAccessRule') `
                            -Arg ('Remove-ActiveSyncDeviceAccessRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-ActiveSyncDeviceAccessRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-ActiveSyncDeviceAccessRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [switch]
    ${Force},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    ${WarningVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-ActiveSyncMailboxPolicy') `
                            -Arg ('Remove-ActiveSyncMailboxPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-ActiveSyncMailboxPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-ActiveSyncMailboxPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${Mailbox},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${OrganizationApp},

    [switch]
    ${PrivateCatalog},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-App') `
                            -Arg ('Remove-App', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-App
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-App","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-AuditConfigurationPolicy') `
                            -Arg ('Remove-AuditConfigurationPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-AuditConfigurationPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-AuditConfigurationPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-AuditConfigurationRule') `
                            -Arg ('Remove-AuditConfigurationRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-AuditConfigurationRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-AuditConfigurationRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    ${FolderName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-AuditStubFolder') `
                            -Arg ('Remove-AuditStubFolder', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-AuditStubFolder
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-AuditStubFolder","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-AvailabilityAddressSpace') `
                            -Arg ('Remove-AvailabilityAddressSpace', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-AvailabilityAddressSpace
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-AvailabilityAddressSpace","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-AvailabilityConfig') `
                            -Arg ('Remove-AvailabilityConfig', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-AvailabilityConfig
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-AvailabilityConfig","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-BitLockerKeyProtector","Function","Public","BitLocker","BitLocker","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    ${SenderAddress},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    ${Reason},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-BlockedSenderAddress') `
                            -Arg ('Remove-BlockedSenderAddress', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-BlockedSenderAddress
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-BlockedSenderAddress","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-ClassificationRuleCollection') `
                            -Arg ('Remove-ClassificationRuleCollection', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-ClassificationRuleCollection
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-ClassificationRuleCollection","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    ${DomainController},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-CompliancePolicyFileSyncNotification') `
                            -Arg ('Remove-CompliancePolicyFileSyncNotification', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-CompliancePolicyFileSyncNotification
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-CompliancePolicyFileSyncNotification","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-CompliancePolicySyncNotification') `
                            -Arg ('Remove-CompliancePolicySyncNotification', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-CompliancePolicySyncNotification
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-CompliancePolicySyncNotification","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-ConnectSubscription') `
                            -Arg ('Remove-ConnectSubscription', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-ConnectSubscription
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-ConnectSubscription","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-DAEntryPointTableItem","Function","Public","DirectAccessClientComponents","DirectAccessClientComponents","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-DataClassification') `
                            -Arg ('Remove-DataClassification', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-DataClassification
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-DataClassification","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-DistributionGroup') `
                            -Arg ('Remove-DistributionGroup', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-DistributionGroup
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-DistributionGroup","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    ${Member},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-DistributionGroupMember') `
                            -Arg ('Remove-DistributionGroupMember', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-DistributionGroupMember
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-DistributionGroupMember","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-DlpPolicy') `
                            -Arg ('Remove-DlpPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-DlpPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-DlpPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])][OutputType('Microsoft.Management.Infrastructure.CimInstance#DnsClientNrptRule')]
    param(
    
    [Parameter(ParameterSetName='Remove2', ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string]
    ${GpoName},

    [Parameter(ParameterSetName='Remove2', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${PassThru},

    [Parameter(ParameterSetName='Remove2', ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Server},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Remove2')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Remove2')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GpoName')) {
          [object]$__cmdletization_value = ${GpoName}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'GpoName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'GpoName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PassThru')) {
          [object]$__cmdletization_value = ${PassThru}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PassThru'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PassThru'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Server')) {
          [object]$__cmdletization_value = ${Server}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Server'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Server'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Force')) {
          [object]$__cmdletization_value = ${Force}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#DnsClientNrptRule'
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Remove', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP PS_DnsClientNRPTRule_v1.0.0.cdxml-Help.xml
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-DnsClientNrptRule","Function","Public","DnsClient","DnsClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-DscConfigurationDocument","Function","Public","PSDesiredStateConfiguration","PSDesiredStateConfiguration","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-DtcClusterTMMapping","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-DynamicDistributionGroup') `
                            -Arg ('Remove-DynamicDistributionGroup', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-DynamicDistributionGroup
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-DynamicDistributionGroup","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-EmailAddressPolicy') `
                            -Arg ('Remove-EmailAddressPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-EmailAddressPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-EmailAddressPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-HostedConnectionFilterPolicy') `
                            -Arg ('Remove-HostedConnectionFilterPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-HostedConnectionFilterPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-HostedConnectionFilterPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-HostedContentFilterPolicy') `
                            -Arg ('Remove-HostedContentFilterPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-HostedContentFilterPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-HostedContentFilterPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-HostedContentFilterRule') `
                            -Arg ('Remove-HostedContentFilterRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-HostedContentFilterRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-HostedContentFilterRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-HybridConfiguration') `
                            -Arg ('Remove-HybridConfiguration', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-HybridConfiguration
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-HybridConfiguration","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-InboundConnector') `
                            -Arg ('Remove-InboundConnector', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-InboundConnector
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-InboundConnector","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${AlwaysDeleteOutlookRulesBlob},

    ${Mailbox},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${Force},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-InboxRule') `
                            -Arg ('Remove-InboxRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-InboxRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-InboxRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-InitiatorId","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-InitiatorIdFromMaskingSet","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-IntraOrganizationConnector') `
                            -Arg ('Remove-IntraOrganizationConnector', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-IntraOrganizationConnector
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-IntraOrganizationConnector","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-IscsiTargetPortal","Function","Public","iSCSI","iSCSI","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-JournalRule') `
                            -Arg ('Remove-JournalRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-JournalRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-JournalRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${PublicFolder},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${PermanentlyDelete},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [switch]
    ${IgnoreLegalHold},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${Force},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-Mailbox') `
                            -Arg ('Remove-Mailbox', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-Mailbox
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-Mailbox","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    ${User},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-MailboxFolderPermission') `
                            -Arg ('Remove-MailboxFolderPermission', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-MailboxFolderPermission
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MailboxFolderPermission","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [switch]
    ${ClearAutoMapping},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${AccessRights},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Deny},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${User},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${ResetDefault},

    ${InheritanceType},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-MailboxPermission') `
                            -Arg ('Remove-MailboxPermission', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-MailboxPermission
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MailboxPermission","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [switch]
    ${Force},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    ${WarningVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-MailboxRestoreRequest') `
                            -Arg ('Remove-MailboxRestoreRequest', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-MailboxRestoreRequest
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MailboxRestoreRequest","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-MailboxSearch') `
                            -Arg ('Remove-MailboxSearch', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-MailboxSearch
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MailboxSearch","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-MailContact') `
                            -Arg ('Remove-MailContact', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-MailContact
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MailContact","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ea')]
    ${ErrorAction},

    [switch]
    ${IgnoreLegalHold},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-MailUser') `
                            -Arg ('Remove-MailUser', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-MailUser
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MailUser","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-MalwareFilterPolicy') `
                            -Arg ('Remove-MalwareFilterPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-MalwareFilterPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MalwareFilterPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-MalwareFilterRule') `
                            -Arg ('Remove-MalwareFilterRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-MalwareFilterRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MalwareFilterRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [switch]
    ${Force},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${Recurse},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-ManagementRole') `
                            -Arg ('Remove-ManagementRole', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-ManagementRole
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-ManagementRole","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [switch]
    ${Force},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    ${WarningVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-ManagementRoleAssignment') `
                            -Arg ('Remove-ManagementRoleAssignment', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-ManagementRoleAssignment
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-ManagementRoleAssignment","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [switch]
    ${Force},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    ${WarningVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-ManagementRoleEntry') `
                            -Arg ('Remove-ManagementRoleEntry', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-ManagementRoleEntry
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-ManagementRoleEntry","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [switch]
    ${Force},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    ${WarningVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-ManagementScope') `
                            -Arg ('Remove-ManagementScope', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-ManagementScope
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-ManagementScope","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MaskingSet","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-MessageClassification') `
                            -Arg ('Remove-MessageClassification', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-MessageClassification
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MessageClassification","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-MigrationBatch') `
                            -Arg ('Remove-MigrationBatch', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-MigrationBatch
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MigrationBatch","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-MigrationEndpoint') `
                            -Arg ('Remove-MigrationEndpoint', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-MigrationEndpoint
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MigrationEndpoint","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-MigrationUser') `
                            -Arg ('Remove-MigrationUser', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-MigrationUser
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MigrationUser","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-MobileDevice') `
                            -Arg ('Remove-MobileDevice', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-MobileDevice
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MobileDevice","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [switch]
    ${Force},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    ${WarningVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-MobileDeviceMailboxPolicy') `
                            -Arg ('Remove-MobileDeviceMailboxPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-MobileDeviceMailboxPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MobileDeviceMailboxPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [switch]
    ${Force},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${ProxyToMailbox},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-MoveRequest') `
                            -Arg ('Remove-MoveRequest', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-MoveRequest
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MoveRequest","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MpPreference","Function","Public","Defender","Defender","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MpThreat","Function","Public","Defender","Defender","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetAdapterAdvancedProperty","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetEventNetworkAdapter","Function","Public","NetEventPacketCapture","NetEventPacketCapture","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetEventPacketCaptureProvider","Function","Public","NetEventPacketCapture","NetEventPacketCapture","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetEventProvider","Function","Public","NetEventPacketCapture","NetEventPacketCapture","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetEventSession","Function","Public","NetEventPacketCapture","NetEventPacketCapture","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetEventVmNetworkAdapter","Function","Public","NetEventPacketCapture","NetEventPacketCapture","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetEventVmSwitch","Function","Public","NetEventPacketCapture","NetEventPacketCapture","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetFirewallRule","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetIPAddress","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetIPHttpsCertBinding","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetIPHttpsConfiguration","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetIPsecDospSetting","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetIPsecMainModeCryptoSet","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetIPsecMainModeRule","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetIPsecMainModeSA","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetIPsecPhase1AuthSet","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetIPsecPhase2AuthSet","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetIPsecQuickModeCryptoSet","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetIPsecQuickModeSA","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetIPsecRule","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetLbfoTeam","Function","Public","NetLbfo","NetLbfo","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetLbfoTeamMember","Function","Public","NetLbfo","NetLbfo","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetLbfoTeamNic","Function","Public","NetLbfo","NetLbfo","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetNat","Function","Public","NetNat","NetNat","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetNatExternalAddress","Function","Public","NetNat","NetNat","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetNatStaticMapping","Function","Public","NetNat","NetNat","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetNatTransitionConfiguration","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetNeighbor","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetQosPolicy","Function","Public","NetQos","NetQos","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetRoute","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetSwitchTeam","Function","Public","NetSwitchTeam","NetSwitchTeam","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetSwitchTeamMember","Function","Public","NetSwitchTeam","NetSwitchTeam","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-NetTransportFilter","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-OdbcDsn","Function","Public","Wdac","Wdac","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-OnPremisesOrganization') `
                            -Arg ('Remove-OnPremisesOrganization', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-OnPremisesOrganization
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-OnPremisesOrganization","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-OrganizationRelationship') `
                            -Arg ('Remove-OrganizationRelationship', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-OrganizationRelationship
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-OrganizationRelationship","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-OutboundConnector') `
                            -Arg ('Remove-OutboundConnector', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-OutboundConnector
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-OutboundConnector","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-OutlookProtectionRule') `
                            -Arg ('Remove-OutlookProtectionRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-OutlookProtectionRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-OutlookProtectionRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [switch]
    ${Force},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    ${WarningVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-OwaMailboxPolicy') `
                            -Arg ('Remove-OwaMailboxPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-OwaMailboxPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-OwaMailboxPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-Partition","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-PartitionAccessPath","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-PartnerApplication') `
                            -Arg ('Remove-PartnerApplication', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-PartnerApplication
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-PartnerApplication","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-PhysicalDisk","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-PolicyTipConfig') `
                            -Arg ('Remove-PolicyTipConfig', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-PolicyTipConfig
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-PolicyTipConfig","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-Printer","Function","Public","PrintManagement","PrintManagement","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-PrinterDriver","Function","Public","PrintManagement","PrintManagement","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-PrinterPort","Function","Public","PrintManagement","PrintManagement","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-PrintJob","Function","Public","PrintManagement","PrintManagement","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${Recurse},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-PublicFolder') `
                            -Arg ('Remove-PublicFolder', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-PublicFolder
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-PublicFolder","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    ${User},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-PublicFolderClientPermission') `
                            -Arg ('Remove-PublicFolderClientPermission', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-PublicFolderClientPermission
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-PublicFolderClientPermission","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [switch]
    ${Force},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    ${WarningVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-PublicFolderMigrationRequest') `
                            -Arg ('Remove-PublicFolderMigrationRequest', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-PublicFolderMigrationRequest
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-PublicFolderMigrationRequest","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${AccessRights},

    ${Trustee},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-RecipientPermission') `
                            -Arg ('Remove-RecipientPermission', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-RecipientPermission
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-RecipientPermission","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-RemoteDomain') `
                            -Arg ('Remove-RemoteDomain', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-RemoteDomain
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-RemoteDomain","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${IncludeDLP},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ea')]
    ${ErrorAction},

    ${ScheduleId},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-ReportSchedule') `
                            -Arg ('Remove-ReportSchedule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-ReportSchedule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-ReportSchedule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [switch]
    ${Force},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    ${WarningVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-RetentionPolicy') `
                            -Arg ('Remove-RetentionPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-RetentionPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-RetentionPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-RetentionPolicyTag') `
                            -Arg ('Remove-RetentionPolicyTag', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-RetentionPolicyTag
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-RetentionPolicyTag","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [switch]
    ${Force},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    ${WarningVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-RMSTrustedPublishingDomain') `
                            -Arg ('Remove-RMSTrustedPublishingDomain', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-RMSTrustedPublishingDomain
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-RMSTrustedPublishingDomain","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-RoleAssignmentPolicy') `
                            -Arg ('Remove-RoleAssignmentPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-RoleAssignmentPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-RoleAssignmentPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [switch]
    ${Force},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-RoleGroup') `
                            -Arg ('Remove-RoleGroup', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-RoleGroup
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-RoleGroup","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    ${Member},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-RoleGroupMember') `
                            -Arg ('Remove-RoleGroupMember', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-RoleGroupMember
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-RoleGroupMember","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-SharingPolicy') `
                            -Arg ('Remove-SharingPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-SharingPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-SharingPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-SmbBandwidthLimit","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-SmbMapping","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-SmbMultichannelConstraint","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-SmbShare","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-StoragePool","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-StorageTier","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${Mailbox},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-Subscription') `
                            -Arg ('Remove-Subscription', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-Subscription
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-Subscription","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-SyncMailPublicFolder') `
                            -Arg ('Remove-SyncMailPublicFolder', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-SyncMailPublicFolder
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-SyncMailPublicFolder","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [switch]
    ${Force},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    ${WarningVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-SyncRequest') `
                            -Arg ('Remove-SyncRequest', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-SyncRequest
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-SyncRequest","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-TargetPortFromMaskingSet","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-TransportRule') `
                            -Arg ('Remove-TransportRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-TransportRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-TransportRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-UMAutoAttendant') `
                            -Arg ('Remove-UMAutoAttendant', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-UMAutoAttendant
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-UMAutoAttendant","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${Mailbox},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-UMCallAnsweringRule') `
                            -Arg ('Remove-UMCallAnsweringRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-UMCallAnsweringRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-UMCallAnsweringRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-UMDialPlan') `
                            -Arg ('Remove-UMDialPlan', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-UMDialPlan
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-UMDialPlan","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-UMHuntGroup') `
                            -Arg ('Remove-UMHuntGroup', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-UMHuntGroup
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-UMHuntGroup","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-UMIPGateway') `
                            -Arg ('Remove-UMIPGateway', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-UMIPGateway
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-UMIPGateway","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-UMMailboxPolicy') `
                            -Arg ('Remove-UMMailboxPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-UMMailboxPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-UMMailboxPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [switch]
    ${Force},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    ${WarningVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-UnifiedGroup') `
                            -Arg ('Remove-UnifiedGroup', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-UnifiedGroup
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-UnifiedGroup","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${LinkType},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${Links},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-UnifiedGroupLinks') `
                            -Arg ('Remove-UnifiedGroupLinks', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-UnifiedGroupLinks
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-UnifiedGroupLinks","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${GroupMailbox},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${PhotoType},

    [switch]
    ${ClearMailboxPhotoRecord},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Remove-UserPhoto') `
                            -Arg ('Remove-UserPhoto', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Remove-UserPhoto
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-UserPhoto","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-VirtualDisk","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-VirtualDiskFromMaskingSet","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-VpnConnection","Function","Public","VpnClient","VpnClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-VpnConnectionRoute","Function","Public","VpnClient","VpnClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-VpnConnectionTriggerApplication","Function","Public","VpnClient","VpnClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-VpnConnectionTriggerDnsConfiguration","Function","Public","VpnClient","VpnClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-VpnConnectionTriggerTrustedNetwork","Function","Public","VpnClient","VpnClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Rename-DAEntryPointTableItem","Function","Public","DirectAccessClientComponents","DirectAccessClientComponents","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Rename-MaskingSet","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Rename-NetAdapter","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Rename-NetFirewallRule","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Rename-NetIPHttpsConfiguration","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Rename-NetIPsecMainModeCryptoSet","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Rename-NetIPsecMainModeRule","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Rename-NetIPsecPhase1AuthSet","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Rename-NetIPsecPhase2AuthSet","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Rename-NetIPsecQuickModeCryptoSet","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Rename-NetIPsecRule","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Rename-NetLbfoTeam","Function","Public","NetLbfo","NetLbfo","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Rename-NetSwitchTeam","Function","Public","NetSwitchTeam","NetSwitchTeam","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Rename-Printer","Function","Public","PrintManagement","PrintManagement","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Repair-FileIntegrity","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Repair-VirtualDisk","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Repair-Volume","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Reset-DAClientExperienceConfiguration","Function","Public","DirectAccessClientComponents","DirectAccessClientComponents","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Reset-DAEntryPointTableItem","Function","Public","DirectAccessClientComponents","DirectAccessClientComponents","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Reset-DtcLog","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Reset-NCSIPolicyConfiguration","Function","Public","NetworkConnectivityStatus","NetworkConnectivityStatus","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Reset-Net6to4Configuration","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Reset-NetAdapterAdvancedProperty","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Reset-NetDnsTransitionConfiguration","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Reset-NetIPHttpsConfiguration","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Reset-NetIsatapConfiguration","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Reset-NetTeredoConfiguration","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Reset-PhysicalDisk","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Reset-StorageReliabilityCounter","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Resize-Partition","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Resize-StorageTier","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Resize-VirtualDisk","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Restart-NetAdapter","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Restart-PcsvDevice","Function","Public","PcsvDevice","PcsvDevice","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Restart-PrintJob","Function","Public","PrintManagement","PrintManagement","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Restore-DscConfiguration","Function","Public","PSDesiredStateConfiguration","PSDesiredStateConfiguration","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Resume-BitLocker","Function","Public","BitLocker","BitLocker","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Resume-MailboxRestoreRequest') `
                            -Arg ('Resume-MailboxRestoreRequest', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Resume-MailboxRestoreRequest
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Resume-MailboxRestoreRequest","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${ProxyToMailbox},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${SuspendWhenReadyToComplete},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Resume-MoveRequest') `
                            -Arg ('Resume-MoveRequest', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Resume-MoveRequest
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Resume-MoveRequest","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Resume-PrintJob","Function","Public","PrintManagement","PrintManagement","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Resume-PublicFolderMailboxMigrationRequest') `
                            -Arg ('Resume-PublicFolderMailboxMigrationRequest', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Resume-PublicFolderMailboxMigrationRequest
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Resume-PublicFolderMailboxMigrationRequest","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Resume-PublicFolderMigrationRequest') `
                            -Arg ('Resume-PublicFolderMigrationRequest', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Resume-PublicFolderMigrationRequest
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Resume-PublicFolderMigrationRequest","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [switch]
    ${Force},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    ${WarningVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Resume-SyncRequest') `
                            -Arg ('Resume-SyncRequest', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Resume-SyncRequest
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Resume-SyncRequest","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Revoke-SmbShareAccess","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    ${KeySize},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Rotate-DkimSigningConfig') `
                            -Arg ('Rotate-DkimSigningConfig', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Rotate-DkimSigningConfig
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Rotate-DkimSigningConfig","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-Location S:","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","S:","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Save-NetGPO","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${EndDate},

    ${ObjectIds},

    ${StartIndex},

    ${ExternalAccess},

    [Alias('ev')]
    ${ErrorVariable},

    ${Parameters},

    [Alias('ob')]
    ${OutBuffer},

    ${Cmdlets},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    ${UserIds},

    ${IsSuccess},

    ${StartDate},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Search-AdminAuditLog') `
                            -Arg ('Search-AdminAuditLog', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Search-AdminAuditLog
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Search-AdminAuditLog","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [switch]
    ${ShowDetails},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${LogonTypes},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${EndDate},

    ${ExternalAccess},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    ${Operations},

    ${Identity},

    [Alias('ea')]
    ${ErrorAction},

    ${Mailboxes},

    ${HasAttachments},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    ${StartDate},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Search-MailboxAuditLog') `
                            -Arg ('Search-MailboxAuditLog', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Search-MailboxAuditLog
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Search-MailboxAuditLog","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Subject},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${Recipients},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${BypassDelegateChecking},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [switch]
    ${DoNotResolve},

    [Alias('wa')]
    ${WarningAction},

    ${ResultSize},

    [Alias('ov')]
    ${OutVariable},

    ${Sender},

    ${MessageEntryId},

    ${MessageId},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Search-MessageTrackingReport') `
                            -Arg ('Search-MessageTrackingReport', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Search-MessageTrackingReport
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Search-MessageTrackingReport","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wa')]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    ${EndDate},

    ${ObjectIds},

    ${IPAddresses},

    [Alias('ev')]
    ${ErrorVariable},

    ${Operations},

    [switch]
    ${Formatted},

    ${FreeText},

    [Alias('ob')]
    ${OutBuffer},

    ${SessionId},

    ${SessionCommand},

    ${Identity},

    ${UserIds},

    ${RecordType},

    ${StartDate},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Search-UnifiedAuditLog') `
                            -Arg ('Search-UnifiedAuditLog', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Search-UnifiedAuditLog
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Search-UnifiedAuditLog","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Send-TextMessagingVerificationCode') `
                            -Arg ('Send-TextMessagingVerificationCode', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Send-TextMessagingVerificationCode
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Send-TextMessagingVerificationCode","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${OutboundOnly},

    ${EnableNego2Authentication},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${DomainType},

    ${MatchSubDomains},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-AcceptedDomain') `
                            -Arg ('Set-AcceptedDomain', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-AcceptedDomain
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-AcceptedDomain","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${AccessLevel},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-ActiveSyncDeviceAccessRule') `
                            -Arg ('Set-ActiveSyncDeviceAccessRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-ActiveSyncDeviceAccessRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-ActiveSyncDeviceAccessRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${AllowUnsignedApplications},

    [Alias('wa')]
    ${WarningAction},

    ${AllowUnsignedInstallationPackages},

    ${MaxInactivityTimeDeviceLock},

    [Alias('ov')]
    ${OutVariable},

    ${AllowExternalDeviceManagement},

    ${RequireDeviceEncryption},

    ${AllowStorageCard},

    ${AllowIrDA},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${AllowNonProvisionableDevices},

    [Alias('ea')]
    ${ErrorAction},

    ${UnapprovedInROMApplicationList},

    ${DevicePasswordEnabled},

    ${RequireEncryptedSMIMEMessages},

    ${DevicePasswordHistory},

    ${AllowInternetSharing},

    ${MinDevicePasswordComplexCharacters},

    ${MaxEmailHTMLBodyTruncationSize},

    [Alias('db')]
    [switch]
    ${Debug},

    ${DevicePasswordExpiration},

    ${UNCAccessEnabled},

    ${AllowCamera},

    ${AllowTextMessaging},

    ${MaxDevicePasswordFailedAttempts},

    ${AllowBrowser},

    ${MaxEmailAgeFilter},

    ${RequireSignedSMIMEAlgorithm},

    ${RequireManualSyncWhenRoaming},

    ${AllowSMIMEEncryptionAlgorithmNegotiation},

    ${DeviceEncryptionEnabled},

    ${MaxEmailBodyTruncationSize},

    ${AllowBluetooth},

    ${RequireEncryptionSMIMEAlgorithm},

    ${DevicePolicyRefreshInterval},

    ${AllowMobileOTAUpdate},

    ${MaxAttachmentSize},

    ${AllowConsumerEmail},

    ${AllowDesktopSync},

    ${PasswordRecoveryEnabled},

    ${AlphanumericDevicePasswordRequired},

    ${RequireStorageCardEncryption},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wv')]
    ${WarningVariable},

    ${AllowSMIMESoftCerts},

    ${AllowRemoteDesktop},

    ${AllowSimpleDevicePassword},

    ${AttachmentsEnabled},

    ${MaxCalendarAgeFilter},

    ${AllowWiFi},

    ${AllowApplePushNotifications},

    ${AllowPOPIMAPEmail},

    ${IsDefault},

    ${IsDefaultPolicy},

    ${ApprovedApplicationList},

    ${Name},

    ${WSSAccessEnabled},

    ${RequireSignedSMIMEMessages},

    ${AllowHTMLEmail},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    ${MinDevicePasswordLength},

    ${IrmEnabled},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-ActiveSyncMailboxPolicy') `
                            -Arg ('Set-ActiveSyncMailboxPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-ActiveSyncMailboxPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-ActiveSyncMailboxPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${UserMailInsert},

    ${DefaultAccessLevel},

    [Alias('db')]
    [switch]
    ${Debug},

    ${OtaNotificationMailInsert},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${AllowAccessForUnSupportedPlatform},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${Identity},

    ${AdminMailRecipients},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-ActiveSyncOrganizationSettings') `
                            -Arg ('Set-ActiveSyncOrganizationSettings', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-ActiveSyncOrganizationSettings
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-ActiveSyncOrganizationSettings","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${UnifiedAuditLogIngestionEnabled},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [switch]
    ${Force},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-AdminAuditLogConfig') `
                            -Arg ('Set-AdminAuditLogConfig', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-AdminAuditLogConfig
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-AdminAuditLogConfig","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    ${UserList},

    [Alias('db')]
    [switch]
    ${Debug},

    ${DefaultStateForUser},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${OrganizationApp},

    ${ProvidedTo},

    [switch]
    ${PrivateCatalog},

    ${Enabled},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-App') `
                            -Arg ('Set-App', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-App
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-App","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${OrgWideAccount},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-AvailabilityConfig') `
                            -Arg ('Set-AvailabilityConfig', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-AvailabilityConfig
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-AvailabilityConfig","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${DailyAgendaNotificationSendTime},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${DailyAgendaNotification},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${MeetingReminderSendDuringWorkHour},

    ${NextDays},

    ${CalendarUpdateNotification},

    ${MeetingReminderNotification},

    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wa')]
    ${WarningAction},

    ${CalendarUpdateSendDuringWorkHour},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-CalendarNotification') `
                            -Arg ('Set-CalendarNotification', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-CalendarNotification
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-CalendarNotification","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${MaximumConflictInstances},

    [Alias('wa')]
    ${WarningAction},

    ${ForwardRequestsToDelegates},

    ${Identity},

    ${ResourceDelegates},

    ${DeleteNonCalendarItems},

    ${DeleteComments},

    ${EnforceSchedulingHorizon},

    [Alias('ev')]
    ${ErrorVariable},

    ${EnableResponseDetails},

    ${RequestInPolicy},

    [switch]
    ${IgnoreDefaultScope},

    ${AllowConflicts},

    ${AllRequestInPolicy},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${BookInPolicy},

    ${ConflictPercentageAllowed},

    ${AutomateProcessing},

    ${AllRequestOutOfPolicy},

    ${AddNewRequestsTentatively},

    [Alias('ov')]
    ${OutVariable},

    ${AllBookInPolicy},

    ${ProcessExternalMeetingMessages},

    ${DeleteAttachments},

    ${ScheduleOnlyDuringWorkHours},

    ${RemovePrivateProperty},

    ${AdditionalResponse},

    ${TentativePendingApproval},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${MaximumDurationInMinutes},

    ${OrganizerInfo},

    ${RequestOutOfPolicy},

    ${RemoveOldMeetingMessages},

    ${BookingWindowInDays},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${AddAdditionalResponse},

    ${RemoveForwardedMeetingNotifications},

    ${DeleteSubject},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    ${AllowRecurringMeetings},

    ${AddOrganizerToSubject},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-CalendarProcessing') `
                            -Arg ('Set-CalendarProcessing', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-CalendarProcessing
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-CalendarProcessing","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wa')]
    ${WarningAction},

    ${IsOptimizedForAccessibility},

    ${ImapEnabled},

    ${ImapSuppressReadReceipt},

    ${Identity},

    ${EwsBlockList},

    ${EwsAllowEntourage},

    ${OwaMailboxPolicy},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${PopForceICalForCalendarRetrievalOption},

    ${ImapForceICalForCalendarRetrievalOption},

    ${ShowGalAsDefaultView},

    [Alias('wv')]
    ${WarningVariable},

    ${ActiveSyncBlockedDeviceIDs},

    ${MAPIEnabled},

    ${EwsAllowOutlook},

    [Alias('ea')]
    ${ErrorAction},

    ${PopEnabled},

    ${OWAforDevicesEnabled},

    ${ActiveSyncAllowedDeviceIDs},

    ${EwsEnabled},

    ${EwsAllowMacOutlook},

    ${EwsApplicationAccessPolicy},

    ${OWAEnabled},

    [Alias('ov')]
    ${OutVariable},

    ${ActiveSyncEnabled},

    ${ActiveSyncMailboxPolicy},

    ${UniversalOutlookEnabled},

    ${ImapUseProtocolDefaults},

    ${ActiveSyncDebugLogging},

    ${PopMessagesRetrievalMimeFormat},

    ${ImapMessagesRetrievalMimeFormat},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${PopSuppressReadReceipt},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    ${EwsAllowList},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${PopUseProtocolDefaults},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-CASMailbox') `
                            -Arg ('Set-CASMailbox', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-CASMailbox
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-CASMailbox","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    ${FileData},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-ClassificationRuleCollection') `
                            -Arg ('Set-ClassificationRuleCollection', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-ClassificationRuleCollection
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-ClassificationRuleCollection","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-ClusteredScheduledTask","Function","Public","ScheduledTasks","ScheduledTasks","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${Enable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    ${WarningVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-Clutter') `
                            -Arg ('Set-Clutter', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-Clutter
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-Clutter","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${RequestToken},

    [Alias('db')]
    [switch]
    ${Debug},

    ${RedirectUri},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    ${OAuthVerifier},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${RequestSecret},

    [switch]
    ${LinkedIn},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-ConnectSubscription') `
                            -Arg ('Set-ConnectSubscription', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-ConnectSubscription
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-ConnectSubscription","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${Company},

    [Alias('wa')]
    ${WarningAction},

    ${Phone},

    ${DisplayName},

    ${Identity},

    ${Office},

    ${CountryOrRegion},

    ${OtherTelephone},

    ${Pager},

    [Alias('ev')]
    ${ErrorVariable},

    ${PhoneticDisplayName},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Fax},

    ${PostOfficeBox},

    ${LastName},

    ${UMCallingLineIds},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('ea')]
    ${ErrorAction},

    ${SeniorityIndex},

    ${City},

    ${TelephoneAssistant},

    ${AllowUMCallsFromNonUsers},

    ${Title},

    ${MobilePhone},

    ${AssistantName},

    ${CreateDTMFMap},

    ${StateOrProvince},

    ${Initials},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${WebPage},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ov')]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Manager},

    ${HomePhone},

    ${OtherFax},

    ${SimpleDisplayName},

    [Alias('ob')]
    ${OutBuffer},

    ${Department},

    ${OtherHomePhone},

    ${FirstName},

    ${UMDtmfMap},

    ${WindowsEmailAddress},

    ${Notes},

    ${Name},

    ${GeoCoordinates},

    ${StreetAddress},

    ${PostalCode},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-Contact') `
                            -Arg ('Set-Contact', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-Contact
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-Contact","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-DAClientExperienceConfiguration","Function","Public","DirectAccessClientComponents","DirectAccessClientComponents","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-DAEntryPointTableItem","Function","Public","DirectAccessClientComponents","DirectAccessClientComponents","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Locale},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    ${Fingerprints},

    [switch]
    ${IsDefault},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-DataClassification') `
                            -Arg ('Set-DataClassification', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-DataClassification
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-DataClassification","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-Disk","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${EmailAddresses},

    ${RejectMessagesFromDLMembers},

    ${ModerationEnabled},

    ${AcceptMessagesOnlyFromSendersOrMembers},

    [Alias('wa')]
    ${WarningAction},

    ${ExtensionCustomAttribute5},

    ${CustomAttribute8},

    ${CustomAttribute5},

    ${AcceptMessagesOnlyFromDLMembers},

    ${SimpleDisplayName},

    [switch]
    ${IgnoreNamingPolicy},

    ${ReportToManagerEnabled},

    ${MailTip},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${ModeratedBy},

    ${GrantSendOnBehalfTo},

    ${AcceptMessagesOnlyFrom},

    ${BypassNestedModerationEnabled},

    ${MemberDepartRestriction},

    ${ExtensionCustomAttribute4},

    [Alias('ov')]
    ${OutVariable},

    ${CustomAttribute15},

    ${RejectMessagesFromSendersOrMembers},

    ${WindowsEmailAddress},

    ${ReportToOriginatorEnabled},

    ${Alias},

    ${DisplayName},

    ${BypassModerationFromSendersOrMembers},

    ${RejectMessagesFrom},

    ${CustomAttribute1},

    [switch]
    ${ForceUpgrade},

    ${UMDtmfMap},

    ${ManagedBy},

    ${ExtensionCustomAttribute1},

    ${CustomAttribute14},

    ${RequireSenderAuthenticationEnabled},

    ${CustomAttribute9},

    ${CustomAttribute6},

    ${SendOofMessageToOriginatorEnabled},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    ${CustomAttribute7},

    ${ExtensionCustomAttribute2},

    ${CustomAttribute13},

    ${CustomAttribute2},

    ${PrimarySmtpAddress},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${SendModerationNotifications},

    ${MemberJoinRestriction},

    ${CreateDTMFMap},

    [Alias('wv')]
    ${WarningVariable},

    ${HiddenFromAddressListsEnabled},

    ${MailTipTranslations},

    [Alias('ea')]
    ${ErrorAction},

    ${CustomAttribute4},

    ${CustomAttribute10},

    ${Name},

    ${ExtensionCustomAttribute3},

    [switch]
    ${RoomList},

    ${CustomAttribute12},

    ${CustomAttribute3},

    ${CustomAttribute11},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-DistributionGroup') `
                            -Arg ('Set-DistributionGroup', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-DistributionGroup
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-DistributionGroup","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${AdminDisplayName},

    ${BodyCanonicalization},

    [Alias('wa')]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${PublishTxtRecords},

    ${Identity},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${HeaderCanonicalization},

    ${Enabled},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-DkimSigningConfig') `
                            -Arg ('Set-DkimSigningConfig', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-DkimSigningConfig
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-DkimSigningConfig","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Name},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${State},

    ${Mode},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-DlpPolicy') `
                            -Arg ('Set-DlpPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-DlpPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-DlpPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    [CmdletBinding(DefaultParameterSetName='ByAlias', SupportsShouldProcess=$true, ConfirmImpact='Low', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_DNSClient')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNull()]
    [uint32[]]
    ${InterfaceIndex},

    [Parameter(ParameterSetName='ByAlias', Mandatory=$true, Position=0)]
    [ValidateNotNull()]
    [string[]]
    ${InterfaceAlias},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_DNSClient')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAlias')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Suffix')]
    [string]
    ${ConnectionSpecificSuffix},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAlias')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${RegisterThisConnectionsAddress},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAlias')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${UseSuffixWhenRegistering},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAlias')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('ResetSuffix')]
    [switch]
    ${ResetConnectionSpecificSuffix},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAlias')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAlias')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAlias')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAlias')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InterfaceIndex})
        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByAlias') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InterfaceAlias})
        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByAlias', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('ConnectionSpecificSuffix')) {
            [object]$__cmdletization_value = ${ConnectionSpecificSuffix}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ConnectionSpecificSuffix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ConnectionSpecificSuffix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RegisterThisConnectionsAddress')) {
            [object]$__cmdletization_value = ${RegisterThisConnectionsAddress}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RegisterThisConnectionsAddress'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RegisterThisConnectionsAddress'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('UseSuffixWhenRegistering')) {
            [object]$__cmdletization_value = ${UseSuffixWhenRegistering}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'UseSuffixWhenRegistering'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'UseSuffixWhenRegistering'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('ResetConnectionSpecificSuffix')) {
            [object]$__cmdletization_value = ${ResetConnectionSpecificSuffix}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:ResetConnectionSpecificSuffix'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:ResetConnectionSpecificSuffix'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_DnsClient.cdxml-Help.xml
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-DnsClient","Function","Public","DnsClient","DnsClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='Low', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_DNSClientGlobalSetting')]

    param(
    
    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_DNSClientGlobalSetting')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${SuffixSearchList},

    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${UseDevolution},

    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${DevolutionLevel},

    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('SuffixSearchList')) {
            [object]$__cmdletization_value = ${SuffixSearchList}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'SuffixSearchList'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'SuffixSearchList'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('UseDevolution')) {
            [object]$__cmdletization_value = ${UseDevolution}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'UseDevolution'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'UseDevolution'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DevolutionLevel')) {
            [object]$__cmdletization_value = ${DevolutionLevel}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DevolutionLevel'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DevolutionLevel'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_DnsClientGlobalSetting.cdxml-Help.xml
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-DnsClientGlobalSetting","Function","Public","DnsClient","DnsClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])][OutputType('Microsoft.Management.Infrastructure.CimInstance#DnsClientNrptGlobal')]
    param(
    
    [Parameter(ParameterSetName='Set1', ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('EnableOnNetworkID','EnableAlways','Disable','DisableDA')]
    [string]
    ${EnableDAForAllNetworks},

    [Parameter(ParameterSetName='Set1', ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string]
    ${GpoName},

    [Parameter(ParameterSetName='Set1', ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('Disable','FallbackSecure','FallbackUnsecure','FallbackPrivate')]
    [string]
    ${SecureNameQueryFallback},

    [Parameter(ParameterSetName='Set1', ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('Disable','QueryIPv6Only','QueryBoth')]
    [string]
    ${QueryPolicy},

    [Parameter(ParameterSetName='Set1', ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Server},

    [Parameter(ParameterSetName='Set1')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${PassThru},

    [Parameter(ParameterSetName='Set1')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Set1')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Set1')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EnableDAForAllNetworks')) {
          [object]$__cmdletization_value = ${EnableDAForAllNetworks}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EnableDAForAllNetworks'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EnableDAForAllNetworks'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GpoName')) {
          [object]$__cmdletization_value = ${GpoName}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'GpoName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'GpoName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SecureNameQueryFallback')) {
          [object]$__cmdletization_value = ${SecureNameQueryFallback}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'SecureNameQueryFallback'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'SecureNameQueryFallback'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('QueryPolicy')) {
          [object]$__cmdletization_value = ${QueryPolicy}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'QueryPolicy'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'QueryPolicy'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Server')) {
          [object]$__cmdletization_value = ${Server}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Server'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Server'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PassThru')) {
          [object]$__cmdletization_value = ${PassThru}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PassThru'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PassThru'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#DnsClientNrptGlobal'
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Set', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP PS_DnsClientNRPTGlobal_v1.0.0.cdxml-Help.xml
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-DnsClientNrptGlobal","Function","Public","DnsClient","DnsClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])][OutputType('Microsoft.Management.Infrastructure.CimInstance#DnsClientNrptRule')]
    param(
    
    [Parameter(ParameterSetName='Set3', ValueFromPipelineByPropertyName=$true)]
    [Alias('DirectAccessEnabled')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DAEnable},

    [Parameter(ParameterSetName='Set3', ValueFromPipelineByPropertyName=$true)]
    [Alias('DirectAccessQueryIPSSECEncryption')]
    [AllowEmptyString()]
    [AllowNull()]
    [ValidateSet('','None','Low','Medium','High')]
    [string]
    ${DAIPsecEncryptionType},

    [Parameter(ParameterSetName='Set3', ValueFromPipelineByPropertyName=$true)]
    [Alias('DirectAccessQueryIPsecRequired')]
    [System.Nullable[bool]]
    ${DAIPsecRequired},

    [Parameter(ParameterSetName='Set3', ValueFromPipelineByPropertyName=$true)]
    [Alias('DirectAccessDNSServers')]
    [string[]]
    ${DANameServers},

    [Parameter(ParameterSetName='Set3', ValueFromPipelineByPropertyName=$true)]
    [Alias('DirectAccessProxyName')]
    [string]
    ${DAProxyServerName},

    [Parameter(ParameterSetName='Set3', ValueFromPipelineByPropertyName=$true)]
    [Alias('DirectAccessProxyType')]
    [AllowEmptyString()]
    [AllowNull()]
    [ValidateSet('','NoProxy','UseDefault','UseProxyName')]
    [string]
    ${DAProxyType},

    [Parameter(ParameterSetName='Set3', ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Comment},

    [Parameter(ParameterSetName='Set3', ValueFromPipelineByPropertyName=$true)]
    [Alias('DnsSecEnabled')]
    [bool]
    ${DnsSecEnable},

    [Parameter(ParameterSetName='Set3', ValueFromPipelineByPropertyName=$true)]
    [Alias('DnsSecQueryIPsecEncryption')]
    [AllowEmptyString()]
    [AllowNull()]
    [ValidateSet('','None','Low','Medium','High')]
    [string]
    ${DnsSecIPsecEncryptionType},

    [Parameter(ParameterSetName='Set3', ValueFromPipelineByPropertyName=$true)]
    [Alias('DnsSecQueryIPsecRequired')]
    [System.Nullable[bool]]
    ${DnsSecIPsecRequired},

    [Parameter(ParameterSetName='Set3', ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${DnsSecValidationRequired},

    [Parameter(ParameterSetName='Set3', ValueFromPipelineByPropertyName=$true)]
    [string]
    ${GpoName},

    [Parameter(ParameterSetName='Set3', ValueFromPipelineByPropertyName=$true)]
    [Alias('IPsecCARestriction')]
    [string]
    ${IPsecTrustAuthority},

    [Parameter(ParameterSetName='Set3', Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [Parameter(ParameterSetName='Set3', ValueFromPipelineByPropertyName=$true)]
    [ValidateSet('Disable','Utf8WithMapping','Utf8WithoutMapping','Punycode')]
    [string]
    ${NameEncoding},

    [Parameter(ParameterSetName='Set3', ValueFromPipelineByPropertyName=$true)]
    [string[]]
    ${NameServers},

    [Parameter(ParameterSetName='Set3', ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${Namespace},

    [Parameter(ParameterSetName='Set3', ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Server},

    [Parameter(ParameterSetName='Set3', ValueFromPipelineByPropertyName=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='Set3')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${PassThru},

    [Parameter(ParameterSetName='Set3')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Set3')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Set3')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DAEnable')) {
          [object]$__cmdletization_value = ${DAEnable}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DAEnable'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DAEnable'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DAIPsecEncryptionType')) {
          [object]$__cmdletization_value = ${DAIPsecEncryptionType}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DAIPsecEncryptionType'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DAIPsecEncryptionType'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DAIPsecRequired')) {
          [object]$__cmdletization_value = ${DAIPsecRequired}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DAIPsecRequired'; ParameterType = 'System.Nullable`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DAIPsecRequired'; ParameterType = 'System.Nullable`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DANameServers')) {
          [object]$__cmdletization_value = ${DANameServers}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DANameServers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DANameServers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DAProxyServerName')) {
          [object]$__cmdletization_value = ${DAProxyServerName}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DAProxyServerName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DAProxyServerName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DAProxyType')) {
          [object]$__cmdletization_value = ${DAProxyType}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DAProxyType'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DAProxyType'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Comment')) {
          [object]$__cmdletization_value = ${Comment}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Comment'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Comment'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DnsSecEnable')) {
          [object]$__cmdletization_value = ${DnsSecEnable}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DnsSecEnable'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DnsSecEnable'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DnsSecIPsecEncryptionType')) {
          [object]$__cmdletization_value = ${DnsSecIPsecEncryptionType}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DnsSecIPsecEncryptionType'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DnsSecIPsecEncryptionType'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DnsSecIPsecRequired')) {
          [object]$__cmdletization_value = ${DnsSecIPsecRequired}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DnsSecIPsecRequired'; ParameterType = 'System.Nullable`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DnsSecIPsecRequired'; ParameterType = 'System.Nullable`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DnsSecValidationRequired')) {
          [object]$__cmdletization_value = ${DnsSecValidationRequired}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DnsSecValidationRequired'; ParameterType = 'System.Nullable`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DnsSecValidationRequired'; ParameterType = 'System.Nullable`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GpoName')) {
          [object]$__cmdletization_value = ${GpoName}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'GpoName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'GpoName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IPsecTrustAuthority')) {
          [object]$__cmdletization_value = ${IPsecTrustAuthority}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IPsecTrustAuthority'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IPsecTrustAuthority'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('NameEncoding')) {
          [object]$__cmdletization_value = ${NameEncoding}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NameEncoding'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NameEncoding'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('NameServers')) {
          [object]$__cmdletization_value = ${NameServers}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NameServers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NameServers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Namespace')) {
          [object]$__cmdletization_value = ${Namespace}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Namespace'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Namespace'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Server')) {
          [object]$__cmdletization_value = ${Server}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Server'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Server'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DisplayName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DisplayName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PassThru')) {
          [object]$__cmdletization_value = ${PassThru}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PassThru'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PassThru'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#DnsClientNrptRule'
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Set', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP PS_DnsClientNRPTRule_v1.0.0.cdxml-Help.xml
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-DnsClientNrptRule","Function","Public","DnsClient","DnsClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    [CmdletBinding(DefaultParameterSetName='ByAlias', SupportsShouldProcess=$true, ConfirmImpact='Low', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_DNSClientServerAddress')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNull()]
    [uint32[]]
    ${InterfaceIndex},

    [Parameter(ParameterSetName='ByAlias', Mandatory=$true, Position=0)]
    [ValidateNotNull()]
    [string[]]
    ${InterfaceAlias},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_DNSClientServerAddress')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAlias')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Addresses')]
    [string[]]
    ${ServerAddresses},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAlias')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${Validate},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAlias')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('ResetAddresses')]
    [switch]
    ${ResetServerAddresses},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAlias')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAlias')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAlias')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAlias')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InterfaceIndex})
        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByAlias') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InterfaceAlias})
        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByAlias', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('ServerAddresses')) {
            [object]$__cmdletization_value = ${ServerAddresses}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:ServerAddresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:ServerAddresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Validate')) {
            [object]$__cmdletization_value = ${Validate}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Validate'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Validate'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('ResetServerAddresses')) {
            [object]$__cmdletization_value = ${ResetServerAddresses}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:ResetServerAddresses'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:ResetServerAddresses'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_DnsClientServerAddress.cdxml-Help.xml
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-DnsClientServerAddress","Function","Public","DnsClient","DnsClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-DtcAdvancedHostSetting","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-DtcAdvancedSetting","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-DtcClusterDefault","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-DtcClusterTMMapping","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-DtcDefault","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-DtcLog","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-DtcNetworkSetting","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-DtcTransaction","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-DtcTransactionsTraceSession","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-DtcTransactionsTraceSetting","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${EmailAddresses},

    ${ConditionalCustomAttribute6},

    ${ModerationEnabled},

    [Alias('wa')]
    ${WarningAction},

    ${AcceptMessagesOnlyFromSendersOrMembers},

    ${ConditionalCustomAttribute7},

    ${CustomAttribute12},

    ${CustomAttribute10},

    ${ExtensionCustomAttribute5},

    ${CustomAttribute8},

    [Alias('ov')]
    ${OutVariable},

    ${CustomAttribute5},

    ${AcceptMessagesOnlyFromDLMembers},

    ${ConditionalCustomAttribute2},

    ${ConditionalCustomAttribute1},

    ${PhoneticDisplayName},

    ${MailTip},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${ModeratedBy},

    ${GrantSendOnBehalfTo},

    [Alias('ea')]
    ${ErrorAction},

    ${AcceptMessagesOnlyFrom},

    ${ConditionalCustomAttribute9},

    ${ConditionalCustomAttribute4},

    ${CustomAttribute15},

    ${RejectMessagesFromSendersOrMembers},

    ${WindowsEmailAddress},

    ${ConditionalCustomAttribute13},

    ${RejectMessagesFromDLMembers},

    ${RejectMessagesFrom},

    ${Alias},

    ${DisplayName},

    ${ReportToOriginatorEnabled},

    ${BypassModerationFromSendersOrMembers},

    ${IncludedRecipients},

    ${ConditionalCustomAttribute12},

    ${CustomAttribute1},

    ${ReportToManagerEnabled},

    [switch]
    ${ForceUpgrade},

    ${ConditionalCustomAttribute14},

    ${UMDtmfMap},

    ${ManagedBy},

    ${ExtensionCustomAttribute1},

    ${Notes},

    ${CustomAttribute14},

    ${RequireSenderAuthenticationEnabled},

    ${CustomAttribute9},

    ${RecipientFilter},

    ${CustomAttribute6},

    ${SendOofMessageToOriginatorEnabled},

    [Alias('db')]
    [switch]
    ${Debug},

    ${ExtensionCustomAttribute4},

    ${SimpleDisplayName},

    [Alias('ob')]
    ${OutBuffer},

    ${ConditionalCompany},

    ${CustomAttribute7},

    ${ConditionalStateOrProvince},

    ${CustomAttribute13},

    ${CustomAttribute2},

    ${PrimarySmtpAddress},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${ConditionalCustomAttribute15},

    ${SendModerationNotifications},

    ${CreateDTMFMap},

    [Alias('wv')]
    ${WarningVariable},

    ${ConditionalCustomAttribute10},

    ${ConditionalCustomAttribute5},

    ${MailTipTranslations},

    ${ConditionalCustomAttribute8},

    ${CustomAttribute4},

    ${RecipientContainer},

    ${CustomAttribute11},

    ${ExtensionCustomAttribute2},

    ${ConditionalCustomAttribute3},

    ${Name},

    ${ExtensionCustomAttribute3},

    ${ConditionalDepartment},

    ${CustomAttribute3},

    ${ConditionalCustomAttribute11},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Identity},

    ${HiddenFromAddressListsEnabled},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-DynamicDistributionGroup') `
                            -Arg ('Set-DynamicDistributionGroup', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-DynamicDistributionGroup
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-DynamicDistributionGroup","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Priority},

    ${Name},

    ${EnabledEmailAddressTemplates},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${EnabledPrimarySMTPAddressTemplate},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [switch]
    ${ForceUpgrade},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-EmailAddressPolicy') `
                            -Arg ('Set-EmailAddressPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-EmailAddressPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-EmailAddressPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${AccountNamespace},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${DelegationFederationTrust},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${OrganizationContact},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${DefaultDomain},

    ${Enabled},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-FederatedOrganizationIdentifier') `
                            -Arg ('Set-FederatedOrganizationIdentifier', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-FederatedOrganizationIdentifier
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-FederatedOrganizationIdentifier","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-FileIntegrity","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-FileStorageTier","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${IsHierarchicalGroup},

    ${DisplayName},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${SimpleDisplayName},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Universal},

    ${Notes},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    ${Name},

    ${Identity},

    ${PhoneticDisplayName},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    ${SeniorityIndex},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${ManagedBy},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${WindowsEmailAddress},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-Group') `
                            -Arg ('Set-Group', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-Group
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-Group","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${PrimarySmtpAddress},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${RequireSenderAuthenticationEnabled},

    ${Language},

    [switch]
    ${AutoSubscribeNewGroupMembers},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-GroupMailbox') `
                            -Arg ('Set-GroupMailbox', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-GroupMailbox
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-GroupMailbox","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${ConfigurationXmlRaw},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${AdminDisplayName},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${EnableSafeList},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${IPBlockList},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    ${IPAllowList},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${MakeDefault},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-HostedConnectionFilterPolicy') `
                            -Arg ('Set-HostedConnectionFilterPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-HostedConnectionFilterPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-HostedConnectionFilterPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${HighConfidenceSpamAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${MakeDefault},

    ${QuarantineRetentionPeriod},

    ${MarkAsSpamWebBugsInHtml},

    ${EndUserSpamNotificationCustomFromName},

    ${MarkAsSpamFromAddressAuthFail},

    ${Identity},

    ${EndUserSpamNotificationCustomFromAddress},

    ${IncreaseScoreWithRedirectToOtherPort},

    ${BulkThreshold},

    ${EnableLanguageBlockList},

    [Alias('ev')]
    ${ErrorVariable},

    ${EndUserSpamNotificationCustomSubject},

    ${MarkAsSpamSensitiveWordList},

    ${MarkAsSpamFormTagsInHtml},

    ${MarkAsSpamNdrBackscatter},

    ${AddXHeaderValue},

    ${ModifySubjectValue},

    [Alias('wv')]
    ${WarningVariable},

    ${IncreaseScoreWithImageLinks},

    ${MarkAsSpamEmptyMessages},

    ${MarkAsSpamSpfRecordHardFail},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${MarkAsSpamJavaScriptInHtml},

    ${EnableRegionBlockList},

    ${EnableEndUserSpamNotifications},

    [Alias('ov')]
    ${OutVariable},

    ${TestModeAction},

    ${RedirectToRecipients},

    ${AllowedSenderDomains},

    ${MarkAsSpamObjectTagsInHtml},

    [Alias('db')]
    [switch]
    ${Debug},

    ${MarkAsSpamFramesInHtml},

    ${TestModeBccToRecipients},

    ${MarkAsSpamEmbedTagsInHtml},

    ${EndUserSpamNotificationLanguage},

    ${EndUserSpamNotificationLimit},

    ${SpamAction},

    ${MarkAsSpamBulkMail},

    ${ZapEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${BlockedSenders},

    ${AllowedSenders},

    ${LanguageBlockList},

    ${RegionBlockList},

    ${IncreaseScoreWithBizOrInfoUrls},

    ${AdminDisplayName},

    [Alias('ob')]
    ${OutBuffer},

    ${EndUserSpamNotificationFrequency},

    ${IncreaseScoreWithNumericIps},

    ${BlockedSenderDomains},

    ${DownloadLink},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-HostedContentFilterPolicy') `
                            -Arg ('Set-HostedContentFilterPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-HostedContentFilterPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-HostedContentFilterPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Priority},

    ${Name},

    ${SentToMemberOf},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${HostedContentFilterPolicy},

    ${SentTo},

    ${Comments},

    [Alias('ev')]
    ${ErrorVariable},

    ${RecipientDomainIs},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    ${ExceptIfRecipientDomainIs},

    [Alias('wa')]
    ${WarningAction},

    ${ExceptIfSentTo},

    [Alias('ov')]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${ExceptIfSentToMemberOf},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-HostedContentFilterRule') `
                            -Arg ('Set-HostedContentFilterRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-HostedContentFilterRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-HostedContentFilterRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${AdminDisplayName},

    ${BccSuspiciousOutboundAdditionalRecipients},

    [Alias('wv')]
    ${WarningVariable},

    ${NotifyOutboundSpamRecipients},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${NotifyOutboundSpam},

    ${BccSuspiciousOutboundMail},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-HostedOutboundSpamFilterPolicy') `
                            -Arg ('Set-HostedOutboundSpamFilterPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-HostedOutboundSpamFilterPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-HostedOutboundSpamFilterPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${Password},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${Mailbox},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    ${Enabled},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-HotmailSubscription') `
                            -Arg ('Set-HotmailSubscription', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-HotmailSubscription
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-HotmailSubscription","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${CertificateSubject},

    ${CentralizedTransportEnabled},

    [Alias('db')]
    [switch]
    ${Debug},

    ${OnPremisesFQDN},

    ${SecureMailEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${OutboundDomains},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ob')]
    ${OutBuffer},

    ${InboundIPs},

    [Alias('wa')]
    ${WarningAction},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-HybridMailflow') `
                            -Arg ('Set-HybridMailflow', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-HybridMailflow
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-HybridMailflow","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [switch]
    ${Force},

    ${IncomingPort},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${DisplayName},

    [Alias('ob')]
    ${OutBuffer},

    ${IncomingPassword},

    [Alias('db')]
    [switch]
    ${Debug},

    ${IncomingSecurity},

    ${EmailAddress},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${ValidateSecret},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${Mailbox},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${ResendVerification},

    ${Identity},

    [Alias('wv')]
    ${WarningVariable},

    ${IncomingUserName},

    ${IncomingServer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    ${IncomingAuth},

    ${Enabled},

    [Alias('ea')]
    ${ErrorAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-ImapSubscription') `
                            -Arg ('Set-ImapSubscription', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-ImapSubscription
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-ImapSubscription","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${SenderDomains},

    ${ConnectorSource},

    ${Name},

    [Alias('ob')]
    ${OutBuffer},

    ${TlsSenderCertificateName},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${SenderIPAddresses},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${ConnectorType},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${CloudServicesMailEnabled},

    ${Comment},

    ${RestrictDomainsToIPAddresses},

    ${Identity},

    [Alias('wv')]
    ${WarningVariable},

    ${TreatMessagesAsInternal},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    ${AssociatedAcceptedDomains},

    ${RequireTls},

    ${RestrictDomainsToCertificate},

    ${Enabled},

    [Alias('ea')]
    ${ErrorAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-InboundConnector') `
                            -Arg ('Set-InboundConnector', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-InboundConnector
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-InboundConnector","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${ExceptIfMyNameNotInToBox},

    ${ExceptIfMyNameInToOrCcBox},

    [Alias('wa')]
    ${WarningAction},

    ${PinMessage},

    ${WithinSizeRangeMaximum},

    ${ReceivedBeforeDate},

    ${ExceptIfFromAddressContainsWords},

    ${HasClassification},

    ${ExceptIfFromSubscription},

    ${ExceptIfWithinSizeRangeMaximum},

    ${WithinSizeRangeMinimum},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${MyNameInToOrCcBox},

    ${ExceptIfReceivedBeforeDate},

    ${Mailbox},

    [Alias('ea')]
    ${ErrorAction},

    ${ExceptIfFrom},

    ${RedirectTo},

    ${ReceivedAfterDate},

    ${ForwardTo},

    [Alias('ob')]
    ${OutBuffer},

    ${ExceptIfReceivedAfterDate},

    [Alias('ov')]
    ${OutVariable},

    ${ExceptIfWithImportance},

    ${HeaderContainsWords},

    ${ExceptIfSentOnlyToMe},

    ${ExceptIfSubjectOrBodyContainsWords},

    ${ExceptIfMessageTypeMatches},

    [Alias('db')]
    [switch]
    ${Debug},

    ${ExceptIfHasAttachment},

    ${DeleteMessage},

    ${ExceptIfMyNameInToBox},

    [switch]
    ${AlwaysDeleteOutlookRulesBlob},

    ${From},

    ${RecipientAddressContainsWords},

    ${FlaggedForAction},

    ${WithSensitivity},

    ${CopyToFolder},

    ${ExceptIfSubjectContainsWords},

    ${MarkImportance},

    ${Priority},

    ${ApplyCategory},

    ${SubjectContainsWords},

    ${ExceptIfHeaderContainsWords},

    ${ExceptIfRecipientAddressContainsWords},

    ${HasAttachment},

    ${SubjectOrBodyContainsWords},

    ${ExceptIfFlaggedForAction},

    ${FromSubscription},

    ${BodyContainsWords},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${StopProcessingRules},

    ${DeleteSystemCategory},

    ${ExceptIfWithinSizeRangeMinimum},

    ${MessageTypeMatches},

    [Alias('wv')]
    ${WarningVariable},

    ${ApplySystemCategory},

    ${SendTextMessageNotificationTo},

    ${MarkAsRead},

    ${MoveToFolder},

    ${SentTo},

    ${MyNameInCcBox},

    ${WithImportance},

    ${MyNameInToBox},

    ${ExceptIfSentTo},

    [switch]
    ${Force},

    ${SentOnlyToMe},

    ${Name},

    ${ForwardAsAttachmentTo},

    ${ExceptIfBodyContainsWords},

    ${ExceptIfMyNameInCcBox},

    ${FromAddressContainsWords},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${MyNameNotInToBox},

    ${Identity},

    ${ExceptIfWithSensitivity},

    ${ExceptIfHasClassification},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-InboxRule') `
                            -Arg ('Set-InboxRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-InboxRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-InboxRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-InitiatorPort","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${TargetAddressDomains},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${DiscoveryEndpoint},

    ${Enabled},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-IntraOrganizationConnector') `
                            -Arg ('Set-IntraOrganizationConnector', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-IntraOrganizationConnector
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-IntraOrganizationConnector","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${InternalLicensingEnabled},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    ${RMSOnlineKeySharingLocation},

    [Alias('db')]
    [switch]
    ${Debug},

    ${ExternalLicensingEnabled},

    [Alias('ob')]
    ${OutBuffer},

    ${EDiscoverySuperUserEnabled},

    ${ClientAccessServerEnabled},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wa')]
    ${WarningAction},

    ${SearchEnabled},

    ${JournalReportDecryptionEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Force},

    ${TransportDecryptionSetting},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-IRMConfiguration') `
                            -Arg ('Set-IRMConfiguration', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-IRMConfiguration
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-IRMConfiguration","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-IscsiChapSecret","Function","Public","iSCSI","iSCSI","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${Scope},

    ${Name},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${JournalEmailAddress},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    ${Recipient},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-JournalRule') `
                            -Arg ('Set-JournalRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-JournalRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-JournalRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${CertificateSubject},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    ${WarningVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-LinkedUser') `
                            -Arg ('Set-LinkedUser', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-LinkedUser
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-LinkedUser","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-LogProperties","Function","Public","PSDiagnostics","PSDiagnostics","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${EmailAddresses},

    ${RejectMessagesFromDLMembers},

    ${AuditOwner},

    [Alias('wa')]
    ${WarningAction},

    ${AcceptMessagesOnlyFromSendersOrMembers},

    ${Type},

    ${UserCertificate},

    ${CustomAttribute10},

    ${DeliverToMailboxAndForward},

    ${RetentionUrl},

    ${ExtensionCustomAttribute5},

    ${CustomAttribute8},

    ${ProhibitSendReceiveQuota},

    ${CustomAttribute5},

    ${RoomMailboxPassword},

    ${SimpleDisplayName},

    ${StartDateForRetentionHold},

    ${MailTip},

    ${IssueWarningQuota},

    ${ModeratedBy},

    ${GrantSendOnBehalfTo},

    [Alias('ea')]
    ${ErrorAction},

    ${AuditLogAgeLimit},

    ${UserSMimeCertificate},

    ${AcceptMessagesOnlyFrom},

    ${SingleItemRecoveryEnabled},

    ${Languages},

    ${UseDatabaseQuotaDefaults},

    ${JournalArchiveAddress},

    ${LitigationHoldDuration},

    ${ModerationEnabled},

    [switch]
    ${InactiveMailbox},

    ${RetentionComment},

    ${MaxReceiveSize},

    [Alias('ov')]
    ${OutVariable},

    ${MessageCopyForSendOnBehalfEnabled},

    ${CustomAttribute15},

    ${LitigationHoldEnabled},

    ${ImmutableId},

    ${WindowsEmailAddress},

    ${UseDatabaseRetentionDefaults},

    ${SharingPolicy},

    ${SecondaryAddress},

    ${RejectMessagesFrom},

    ${RulesQuota},

    ${Alias},

    ${RejectMessagesFromSendersOrMembers},

    ${DisplayName},

    ${ResourceCustom},

    ${DefaultPublicFolderMailbox},

    ${BypassModerationFromSendersOrMembers},

    ${ProhibitSendQuota},

    ${ResourceCapacity},

    ${AcceptMessagesOnlyFromDLMembers},

    ${CustomAttribute1},

    ${CalendarRepairDisabled},

    ${StsRefreshTokensValidFrom},

    ${SecondaryDialPlan},

    ${UMDtmfMap},

    ${AddressBookPolicy},

    ${LitigationHoldOwner},

    ${ExtensionCustomAttribute1},

    ${AccountDisabled},

    ${AuditDelegate},

    ${CustomAttribute14},

    [switch]
    ${ApplyMandatoryProperties},

    ${RequireSenderAuthenticationEnabled},

    ${CustomAttribute9},

    ${CustomAttribute6},

    [Alias('db')]
    [switch]
    ${Debug},

    ${ExtensionCustomAttribute4},

    ${LitigationHoldDate},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${EnableRoomMailboxAccount},

    ${RetentionPolicy},

    ${RetainDeletedItemsFor},

    ${MicrosoftOnlineServicesID},

    ${MessageTrackingReadStatusEnabled},

    ${AuditAdmin},

    ${ExtensionCustomAttribute2},

    ${RetentionHoldEnabled},

    ${CustomAttribute13},

    ${Identity},

    ${CustomAttribute2},

    ${ExternalOofOptions},

    ${ImListMigrationCompleted},

    ${SendModerationNotifications},

    ${EndDateForRetentionHold},

    ${RoleAssignmentPolicy},

    ${IsExcludedFromServingHierarchy},

    ${Office},

    ${MaxSendSize},

    ${CreateDTMFMap},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${MessageCopyForSentAsEnabled},

    [switch]
    ${PublicFolder},

    ${MailTipTranslations},

    ${CustomAttribute7},

    ${CustomAttribute4},

    ${CalendarVersionStoreDisabled},

    ${ArchiveName},

    ${AuditEnabled},

    ${Password},

    [switch]
    ${Force},

    ${Name},

    ${ExtensionCustomAttribute3},

    ${ForwardingAddress},

    ${CustomAttribute12},

    ${CustomAttribute3},

    ${CustomAttribute11},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${ForwardingSmtpAddress},

    ${HiddenFromAddressListsEnabled},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-Mailbox') `
                            -Arg ('Set-Mailbox', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-Mailbox
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-Mailbox","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${AuditBypassEnabled},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-MailboxAuditBypassAssociation') `
                            -Arg ('Set-MailboxAuditBypassAssociation', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-MailboxAuditBypassAssociation
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MailboxAuditBypassAssociation","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [switch]
    ${IgnoreDefaultScope},

    ${ExternalMessage},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${AutoDeclineFutureRequestsWhenOOF},

    [Alias('wv')]
    ${WarningVariable},

    ${ExternalAudience},

    [Alias('db')]
    [switch]
    ${Debug},

    ${OOFEventSubject},

    ${StartTime},

    ${CreateOOFEvent},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    ${EventsToDeleteIDs},

    ${DeclineAllEventsForScheduledOOF},

    ${DeclineMeetingMessage},

    [Alias('wa')]
    ${WarningAction},

    ${AutoReplyState},

    ${InternalMessage},

    ${EndTime},

    ${DeclineEventsForScheduledOOF},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ea')]
    ${ErrorAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-MailboxAutoReplyConfiguration') `
                            -Arg ('Set-MailboxAutoReplyConfiguration', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-MailboxAutoReplyConfiguration
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MailboxAutoReplyConfiguration","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wa')]
    ${WarningAction},

    ${WeatherLocationBookmark},

    ${HotelEventsFromEmailEnabled},

    ${SkipAgendaMailOnFreeDays},

    ${DiningEventsFromEmailEnabled},

    ${Identity},

    ${CreateEventsFromEmailAsPrivate},

    ${PackageDeliveryEventsFromEmailEnabled},

    [Alias('ev')]
    ${ErrorVariable},

    ${RentalCarEventsFromEmailEnabled},

    ${WorkingHoursEndTime},

    [Alias('wv')]
    ${WarningVariable},

    ${UseBrightCalendarColorThemeInOwa},

    ${DefaultReminderTime},

    [Alias('ea')]
    ${ErrorAction},

    ${WorkDays},

    ${ReminderSoundEnabled},

    ${TimeIncrement},

    ${ShowWeekNumbers},

    ${RemindersEnabled},

    ${WeekStartDay},

    ${FirstWeekOfYear},

    ${WorkingHoursStartTime},

    [Alias('ov')]
    ${OutVariable},

    ${WeatherLocations},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${WeatherUnit},

    ${WorkingHoursTimeZone},

    [Alias('ob')]
    ${OutBuffer},

    ${EntertainmentEventsFromEmailEnabled},

    [Alias('db')]
    [switch]
    ${Debug},

    ${EventsFromEmailEnabled},

    ${FlightEventsFromEmailEnabled},

    ${WeatherEnabled},

    ${AgendaMailEnabled},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-MailboxCalendarConfiguration') `
                            -Arg ('Set-MailboxCalendarConfiguration', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-MailboxCalendarConfiguration
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MailboxCalendarConfiguration","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${DetailLevel},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${ResetUrl},

    [Alias('db')]
    [switch]
    ${Debug},

    ${SearchableUrlEnabled},

    ${PublishEnabled},

    ${PublishDateRangeTo},

    ${PublishDateRangeFrom},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-MailboxCalendarFolder') `
                            -Arg ('Set-MailboxCalendarFolder', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-MailboxCalendarFolder
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MailboxCalendarFolder","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${AccessRights},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${User},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-MailboxFolderPermission') `
                            -Arg ('Set-MailboxFolderPermission', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-MailboxFolderPermission
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MailboxFolderPermission","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    ${TrustedSendersAndDomains},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${TrustedListsOnly},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    ${OutBuffer},

    ${BlockedSendersAndDomains},

    [Alias('wa')]
    ${WarningAction},

    ${ContactsTrusted},

    ${TrustedRecipientsAndDomains},

    ${Enabled},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-MailboxJunkEmailConfiguration') `
                            -Arg ('Set-MailboxJunkEmailConfiguration', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-MailboxJunkEmailConfiguration
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MailboxJunkEmailConfiguration","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${SendAddressDefault},

    [Alias('wa')]
    ${WarningAction},

    ${AutoAddSignature},

    ${NewItemNotification},

    ${SignatureText},

    ${ShowPreviewTextInListView},

    ${ShowReadingPaneOnFirstLoad},

    ${Identity},

    ${LinkPreviewEnabled},

    ${AfterMoveOrDeleteBehavior},

    ${DefaultFontColor},

    ${GlobalReadingPanePosition},

    ${PreviewMarkAsReadDelaytime},

    [Alias('ev')]
    ${ErrorVariable},

    ${AlwaysShowFrom},

    ${ShowSenderOnTopInListView},

    ${IsReplyAllTheDefaultResponse},

    ${SignatureHtml},

    [switch]
    ${IgnoreDefaultScope},

    ${UseDefaultSignatureOnMobile},

    ${DefaultFontName},

    ${NavigationPaneViewOption},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${EmailComposeMode},

    ${AutoAddSignatureOnReply},

    ${HideDeletedItems},

    ${ShowConversationAsTree},

    ${CheckForForgottenAttachments},

    ${IsFavoritesFolderTreeCollapsed},

    [Alias('ov')]
    ${OutVariable},

    ${SignatureTextOnMobile},

    ${IsMailRootFolderTreeCollapsed},

    [Alias('ob')]
    ${OutBuffer},

    ${ConversationSortOrder},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${EmptyDeletedItemsOnLogoff},

    ${ReadReceiptResponse},

    [Alias('wv')]
    ${WarningVariable},

    ${DefaultFontSize},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('db')]
    [switch]
    ${Debug},

    ${MailFolderPaneExpanded},

    ${AlwaysShowBcc},

    ${AutoAddSignatureOnMobile},

    ${PreviewMarkAsReadBehavior},

    ${DefaultFontFlags},

    ${DefaultFormat},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-MailboxMessageConfiguration') `
                            -Arg ('Set-MailboxMessageConfiguration', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-MailboxMessageConfiguration
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MailboxMessageConfiguration","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${RoleAssignmentPolicy},

    ${IssueWarningQuota},

    [switch]
    ${Force},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${MaxSendSize},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${ProhibitSendQuota},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    ${RetainDeletedItemsFor},

    ${ProhibitSendReceiveQuota},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    ${MaxReceiveSize},

    [switch]
    ${IsDefault},

    [Alias('ea')]
    ${ErrorAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-MailboxPlan') `
                            -Arg ('Set-MailboxPlan', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-MailboxPlan
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MailboxPlan","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${DateFormat},

    ${TimeFormat},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${LocalizeDefaultFolderName},

    ${TimeZone},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${Language},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-MailboxRegionalConfiguration') `
                            -Arg ('Set-MailboxRegionalConfiguration', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-MailboxRegionalConfiguration
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MailboxRegionalConfiguration","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${LargeItemLimit},

    ${BatchName},

    [Alias('ov')]
    ${OutVariable},

    ${BadItemLimit},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${SkipMerging},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${CompletedRequestAgeLimit},

    [switch]
    ${AcceptLargeDataLoss},

    ${RequestExpiryInterval},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-MailboxRestoreRequest') `
                            -Arg ('Set-MailboxRestoreRequest', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-MailboxRestoreRequest
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MailboxRestoreRequest","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wa')]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${InPlaceHoldEnabled},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${ItemHoldPeriod},

    [Alias('ov')]
    ${OutVariable},

    ${SourceMailboxes},

    [switch]
    ${Force},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-MailboxSearch') `
                            -Arg ('Set-MailboxSearch', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-MailboxSearch
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MailboxSearch","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${DictionaryLanguage},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${CheckBeforeSend},

    [Alias('ev')]
    ${ErrorVariable},

    ${IgnoreMixedDigits},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${IgnoreUppercase},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-MailboxSpellingConfiguration') `
                            -Arg ('Set-MailboxSpellingConfiguration', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-MailboxSpellingConfiguration
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MailboxSpellingConfiguration","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${WindowsEmailAddress},

    ${RejectMessagesFromSendersOrMembers},

    ${AcceptMessagesOnlyFromDLMembers},

    ${CustomAttribute10},

    ${RequireSenderAuthenticationEnabled},

    ${HiddenFromAddressListsEnabled},

    ${ExtensionCustomAttribute4},

    ${CreateDTMFMap},

    ${MacAttachmentFormat},

    ${CustomAttribute8},

    ${DisplayName},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${CustomAttribute3},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Name},

    ${CustomAttribute5},

    ${CustomAttribute7},

    ${BypassModerationFromSendersOrMembers},

    ${Identity},

    ${AcceptMessagesOnlyFromSendersOrMembers},

    ${ExtensionCustomAttribute2},

    ${RejectMessagesFrom},

    [Alias('wv')]
    ${WarningVariable},

    ${CustomAttribute6},

    ${SecondaryDialPlan},

    ${CustomAttribute1},

    [Alias('ea')]
    ${ErrorAction},

    ${UseMapiRichTextFormat},

    ${ExtensionCustomAttribute3},

    [Alias('ov')]
    ${OutVariable},

    ${UsePreferMessageFormat},

    ${CustomAttribute9},

    [Alias('ev')]
    ${ErrorVariable},

    ${ModeratedBy},

    ${CustomAttribute14},

    ${MailTip},

    ${UMDtmfMap},

    ${ModerationEnabled},

    [switch]
    ${ForceUpgrade},

    ${AcceptMessagesOnlyFrom},

    ${MailTipTranslations},

    ${CustomAttribute15},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${SecondaryAddress},

    ${ExtensionCustomAttribute1},

    ${MessageFormat},

    ${RejectMessagesFromDLMembers},

    ${MessageBodyFormat},

    ${ExtensionCustomAttribute5},

    ${ExternalEmailAddress},

    ${CustomAttribute4},

    ${Alias},

    ${GrantSendOnBehalfTo},

    ${SimpleDisplayName},

    ${CustomAttribute2},

    ${CustomAttribute13},

    ${SendModerationNotifications},

    [Alias('ob')]
    ${OutBuffer},

    ${CustomAttribute11},

    ${EmailAddresses},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${CustomAttribute12},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-MailContact') `
                            -Arg ('Set-MailContact', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-MailContact
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MailContact","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${EmailAddresses},

    ${RejectMessagesFromDLMembers},

    ${ModerationEnabled},

    ${AcceptMessagesOnlyFromSendersOrMembers},

    ${CustomAttribute14},

    [Alias('wa')]
    ${WarningAction},

    ${DeliverToMailboxAndForward},

    ${ExtensionCustomAttribute5},

    ${CustomAttribute8},

    ${CustomAttribute5},

    ${SimpleDisplayName},

    ${PhoneticDisplayName},

    ${MailTip},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${ModeratedBy},

    ${GrantSendOnBehalfTo},

    ${AcceptMessagesOnlyFrom},

    ${MaxReceiveSize},

    [Alias('ov')]
    ${OutVariable},

    ${EmailAddressPolicyEnabled},

    ${CustomAttribute15},

    [switch]
    ${IgnoreDefaultScope},

    ${RejectMessagesFromSendersOrMembers},

    ${WindowsEmailAddress},

    ${RejectMessagesFrom},

    ${Alias},

    ${DisplayName},

    ${IgnoreMissingFolderLink},

    ${BypassModerationFromSendersOrMembers},

    ${AcceptMessagesOnlyFromDLMembers},

    ${CustomAttribute1},

    ${Contacts},

    [Alias('db')]
    [switch]
    ${Debug},

    ${ExtensionCustomAttribute1},

    ${EntryId},

    ${RequireSenderAuthenticationEnabled},

    ${CustomAttribute9},

    ${CustomAttribute6},

    ${ExtensionCustomAttribute4},

    ${CustomAttribute7},

    ${ExtensionCustomAttribute2},

    ${CustomAttribute13},

    ${CustomAttribute2},

    ${PrimarySmtpAddress},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${SendModerationNotifications},

    ${ExternalEmailAddress},

    ${MaxSendSize},

    [Alias('wv')]
    ${WarningVariable},

    ${HiddenFromAddressListsEnabled},

    ${MailTipTranslations},

    [Alias('ea')]
    ${ErrorAction},

    ${CustomAttribute4},

    ${CustomAttribute10},

    ${OnPremisesObjectId},

    ${Name},

    ${ExtensionCustomAttribute3},

    ${ForwardingAddress},

    ${CustomAttribute12},

    ${CustomAttribute3},

    ${CustomAttribute11},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-MailPublicFolder') `
                            -Arg ('Set-MailPublicFolder', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-MailPublicFolder
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MailPublicFolder","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${EmailAddresses},

    ${RejectMessagesFromDLMembers},

    ${ModerationEnabled},

    [Alias('wa')]
    ${WarningAction},

    ${AcceptMessagesOnlyFromSendersOrMembers},

    ${UserCertificate},

    ${CustomAttribute10},

    ${ExtensionCustomAttribute5},

    ${CustomAttribute8},

    ${CustomAttribute5},

    ${SimpleDisplayName},

    ${ExchangeGuid},

    ${MailTip},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${ModeratedBy},

    ${GrantSendOnBehalfTo},

    [Alias('ea')]
    ${ErrorAction},

    ${UserSMimeCertificate},

    ${AcceptMessagesOnlyFrom},

    ${JournalArchiveAddress},

    ${MessageBodyFormat},

    [Alias('ov')]
    ${OutVariable},

    ${CustomAttribute15},

    ${FederatedIdentity},

    ${WindowsEmailAddress},

    ${RejectMessagesFrom},

    ${Alias},

    ${RejectMessagesFromSendersOrMembers},

    ${DisplayName},

    ${BypassModerationFromSendersOrMembers},

    ${AcceptMessagesOnlyFromDLMembers},

    ${CustomAttribute1},

    [switch]
    ${ForceUpgrade},

    ${UMDtmfMap},

    ${Password},

    ${MessageFormat},

    ${ExtensionCustomAttribute1},

    ${ResetPasswordOnNextLogon},

    ${CustomAttribute14},

    ${RequireSenderAuthenticationEnabled},

    ${CustomAttribute9},

    ${CustomAttribute6},

    [Alias('db')]
    [switch]
    ${Debug},

    ${ExtensionCustomAttribute4},

    [Alias('ob')]
    ${OutBuffer},

    ${UsePreferMessageFormat},

    ${HiddenFromAddressListsEnabled},

    ${MicrosoftOnlineServicesID},

    ${ImmutableId},

    ${ExtensionCustomAttribute2},

    ${CustomAttribute13},

    ${CustomAttribute2},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${UseMapiRichTextFormat},

    ${SendModerationNotifications},

    ${ExternalEmailAddress},

    ${CreateDTMFMap},

    [Alias('wv')]
    ${WarningVariable},

    ${SecondaryAddress},

    ${MailTipTranslations},

    ${CustomAttribute7},

    ${CustomAttribute4},

    ${Name},

    ${ExtensionCustomAttribute3},

    ${CustomAttribute12},

    ${MacAttachmentFormat},

    ${CustomAttribute3},

    ${CustomAttribute11},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Identity},

    ${SecondaryDialPlan},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-MailUser') `
                            -Arg ('Set-MailUser', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-MailUser
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MailUser","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${MakeDefault},

    ${CustomFromName},

    ${Identity},

    ${AdminDisplayName},

    ${Action},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    ${WarningVariable},

    ${EnableExternalSenderNotifications},

    [Alias('ea')]
    ${ErrorAction},

    ${CustomNotifications},

    ${EnableInternalSenderNotifications},

    ${EnableExternalSenderAdminNotifications},

    ${InternalSenderAdminAddress},

    ${CustomAlertText},

    ${CustomExternalBody},

    ${FileTypes},

    ${EnableInternalSenderAdminNotifications},

    ${CustomFromAddress},

    [Alias('ov')]
    ${OutVariable},

    ${CustomExternalSubject},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${ExternalSenderAdminAddress},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${CustomInternalSubject},

    [Alias('ob')]
    ${OutBuffer},

    ${CustomInternalBody},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-MalwareFilterPolicy') `
                            -Arg ('Set-MalwareFilterPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-MalwareFilterPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MalwareFilterPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Priority},

    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${SentToMemberOf},

    [Alias('wa')]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    ${SentTo},

    ${Comments},

    [Alias('ev')]
    ${ErrorVariable},

    ${RecipientDomainIs},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    ${ExceptIfRecipientDomainIs},

    ${MalwareFilterPolicy},

    ${ExceptIfSentTo},

    [Alias('ov')]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${ExceptIfSentToMemberOf},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-MalwareFilterRule') `
                            -Arg ('Set-MalwareFilterRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-MalwareFilterRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MalwareFilterRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [switch]
    ${Force},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${CustomRecipientWriteScope},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${RecipientAdministrativeUnitScope},

    ${ExclusiveRecipientWriteScope},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${Enabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${RecipientRelativeWriteScope},

    ${RecipientOrganizationalUnitScope},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-ManagementRoleAssignment') `
                            -Arg ('Set-ManagementRoleAssignment', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-ManagementRoleAssignment
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-ManagementRoleAssignment","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Parameters},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${RemoveParameter},

    [switch]
    ${AddParameter},

    [switch]
    ${Force},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-ManagementRoleEntry') `
                            -Arg ('Set-ManagementRoleEntry', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-ManagementRoleEntry
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-ManagementRoleEntry","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${RecipientRoot},

    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${RecipientRestrictionFilter},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    [switch]
    ${Force},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-ManagementScope') `
                            -Arg ('Set-ManagementScope', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-ManagementScope
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-ManagementScope","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${RecipientDescription},

    [Alias('wa')]
    ${WarningAction},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Name},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    ${OutBuffer},

    ${PermissionMenuVisible},

    ${Identity},

    ${ClassificationID},

    [Alias('ev')]
    ${ErrorVariable},

    ${SenderDescription},

    ${DisplayPrecedence},

    [Alias('ov')]
    ${OutVariable},

    ${RetainClassificationEnabled},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-MessageClassification') `
                            -Arg ('Set-MessageClassification', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-MessageClassification
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MessageClassification","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${CSVData},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${LargeItemLimit},

    ${SkipMoving},

    ${BadItemLimit},

    ${AllowIncrementalSyncs},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    ${AutoRetryCount},

    ${SkipMerging},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    ${ReportInterval},

    ${Identity},

    [Alias('ea')]
    ${ErrorAction},

    ${SkipReports},

    [Alias('wa')]
    ${WarningAction},

    ${AllowUnknownColumnsInCsv},

    [switch]
    ${SyncNow},

    ${NotificationEmails},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-MigrationBatch') `
                            -Arg ('Set-MigrationBatch', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-MigrationBatch
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MigrationBatch","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wa')]
    ${WarningAction},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    ${MaxConcurrentMigrations},

    [Alias('db')]
    [switch]
    ${Debug},

    ${TestMailbox},

    [Alias('wv')]
    ${WarningVariable},

    ${ExchangeServer},

    ${Authentication},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Port},

    ${RemoteServer},

    [Alias('ov')]
    ${OutVariable},

    ${MailboxPermission},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${SourceMailboxLegacyDN},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${NspiServer},

    ${RpcProxyServer},

    ${EmailAddress},

    [Alias('ob')]
    ${OutBuffer},

    ${Security},

    [switch]
    ${SkipVerification},

    ${MaxConcurrentIncrementalSyncs},

    ${PublicFolderDatabaseServerLegacyDN},

    ${Credentials},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-MigrationEndpoint') `
                            -Arg ('Set-MigrationEndpoint', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-MigrationEndpoint
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MigrationEndpoint","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MMAgent","Function","Public","MMAgent","MMAgent","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${AllowMicrosoftPushNotifications},

    ${AllowUnsignedApplications},

    [Alias('wa')]
    ${WarningAction},

    ${AllowUnsignedInstallationPackages},

    ${MaxPasswordFailedAttempts},

    ${AllowExternalDeviceManagement},

    ${RequireDeviceEncryption},

    ${RequireSignedSMIMEMessages},

    ${AllowStorageCard},

    ${AllowIrDA},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${PasswordHistory},

    ${AllowNonProvisionableDevices},

    ${UnapprovedInROMApplicationList},

    ${RequireEncryptedSMIMEMessages},

    ${AllowInternetSharing},

    [Alias('ov')]
    ${OutVariable},

    ${PasswordEnabled},

    ${MaxEmailHTMLBodyTruncationSize},

    [Alias('db')]
    [switch]
    ${Debug},

    ${MinPasswordComplexCharacters},

    ${UNCAccessEnabled},

    ${AllowCamera},

    ${IrmEnabled},

    ${PasswordExpiration},

    ${AllowBrowser},

    ${MaxEmailAgeFilter},

    ${RequireSignedSMIMEAlgorithm},

    ${RequireManualSyncWhenRoaming},

    ${AlphanumericPasswordRequired},

    ${AllowSMIMEEncryptionAlgorithmNegotiation},

    ${MaxEmailBodyTruncationSize},

    ${AllowBluetooth},

    ${RequireEncryptionSMIMEAlgorithm},

    ${DevicePolicyRefreshInterval},

    ${AllowGooglePushNotifications},

    ${AllowMobileOTAUpdate},

    ${Name},

    ${MaxAttachmentSize},

    ${AllowSimplePassword},

    ${AllowConsumerEmail},

    ${AllowDesktopSync},

    ${RequireStorageCardEncryption},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${AttachmentsEnabled},

    [Alias('wv')]
    ${WarningVariable},

    ${AllowSMIMESoftCerts},

    ${AllowRemoteDesktop},

    ${PasswordRecoveryEnabled},

    ${MaxCalendarAgeFilter},

    [Alias('ea')]
    ${ErrorAction},

    ${AllowApplePushNotifications},

    ${AllowPOPIMAPEmail},

    ${IsDefault},

    ${MaxInactivityTimeLock},

    ${AllowWiFi},

    ${ApprovedApplicationList},

    ${AllowTextMessaging},

    ${WSSAccessEnabled},

    ${DeviceEncryptionEnabled},

    ${MinPasswordLength},

    ${AllowHTMLEmail},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-MobileDeviceMailboxPolicy') `
                            -Arg ('Set-MobileDeviceMailboxPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-MobileDeviceMailboxPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MobileDeviceMailboxPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wa')]
    ${WarningAction},

    ${IncrementalSyncInterval},

    ${ProxyToMailbox},

    ${Identity},

    ${SuspendWhenReadyToComplete},

    [Alias('db')]
    [switch]
    ${Debug},

    ${RequestExpiryInterval},

    ${PreventCompletion},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${LargeItemLimit},

    ${BatchName},

    ${SkipMoving},

    ${RemoteHostName},

    ${CompleteAfter},

    [Alias('ov')]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${AcceptLargeDataLoss},

    ${StartAfter},

    ${BadItemLimit},

    ${RemoteGlobalCatalog},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    ${RemoteCredential},

    ${CompletedRequestAgeLimit},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-MoveRequest') `
                            -Arg ('Set-MoveRequest', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-MoveRequest
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MoveRequest","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MpPreference","Function","Public","Defender","Defender","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NCSIPolicyConfiguration","Function","Public","NetworkConnectivityStatus","NetworkConnectivityStatus","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-Net6to4Configuration","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetAdapter","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetAdapterAdvancedProperty","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetAdapterBinding","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetAdapterChecksumOffload","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetAdapterEncapsulatedPacketTaskOffload","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetAdapterIPsecOffload","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetAdapterLso","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetAdapterPowerManagement","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetAdapterQos","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetAdapterRdma","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetAdapterRsc","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetAdapterRss","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetAdapterSriov","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetAdapterVmq","Function","Public","NetAdapter","NetAdapter","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetConnectionProfile","Function","Public","NetConnection","NetConnection","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetDnsTransitionConfiguration","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetEventPacketCaptureProvider","Function","Public","NetEventPacketCapture","NetEventPacketCapture","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetEventProvider","Function","Public","NetEventPacketCapture","NetEventPacketCapture","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetEventSession","Function","Public","NetEventPacketCapture","NetEventPacketCapture","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetFirewallAddressFilter","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetFirewallApplicationFilter","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetFirewallInterfaceFilter","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetFirewallInterfaceTypeFilter","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetFirewallPortFilter","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetFirewallProfile","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetFirewallRule","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetFirewallSecurityFilter","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetFirewallServiceFilter","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetFirewallSetting","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetIPAddress","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetIPHttpsConfiguration","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetIPInterface","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetIPsecDospSetting","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetIPsecMainModeCryptoSet","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetIPsecMainModeRule","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetIPsecPhase1AuthSet","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetIPsecPhase2AuthSet","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetIPsecQuickModeCryptoSet","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetIPsecRule","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetIPv4Protocol","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetIPv6Protocol","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetIsatapConfiguration","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetLbfoTeam","Function","Public","NetLbfo","NetLbfo","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetLbfoTeamMember","Function","Public","NetLbfo","NetLbfo","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetLbfoTeamNic","Function","Public","NetLbfo","NetLbfo","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetNat","Function","Public","NetNat","NetNat","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetNatGlobal","Function","Public","NetNat","NetNat","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetNatTransitionConfiguration","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetNeighbor","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetOffloadGlobalSetting","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetQosPolicy","Function","Public","NetQos","NetQos","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetRoute","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetTCPSetting","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetTeredoConfiguration","Function","Public","NetworkTransition","NetworkTransition","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-NetUDPSetting","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    ${NotificationEmails},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-Notification') `
                            -Arg ('Set-Notification', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-Notification
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-Notification","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-OdbcDriver","Function","Public","Wdac","Wdac","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-OdbcDsn","Function","Public","Wdac","Wdac","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${PortalText},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Image},

    ${OTPEnabled},

    [Alias('ev')]
    ${ErrorVariable},

    ${DisclaimerText},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${EmailText},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-OMEConfiguration') `
                            -Arg ('Set-OMEConfiguration', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-OMEConfiguration
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-OMEConfiguration","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${InboundConnector},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${OutboundConnector},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${OrganizationName},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${Comment},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    ${OrganizationRelationship},

    [Alias('wa')]
    ${WarningAction},

    ${HybridDomains},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-OnPremisesOrganization') `
                            -Arg ('Set-OnPremisesOrganization', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-OnPremisesOrganization
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-OnPremisesOrganization","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wa')]
    ${WarningAction},

    ${ExchangeNotificationRecipients},

    ${MailTipsLargeAudienceThreshold},

    ${PreferredInternetCodePageForShiftJis},

    ${EwsBlockList},

    ${EwsAllowEntourage},

    ${ActivityBasedAuthenticationTimeoutEnabled},

    ${LinkPreviewEnabled},

    ${DefaultPublicFolderAgeLimit},

    ${HierarchicalAddressBookRoot},

    ${DistributionGroupNameBlockedWordsList},

    ${ReadTrackingEnabled},

    ${IsAgendaMailEnabled},

    ${DistributionGroupDefaultOU},

    ${RequiredCharsetCoverage},

    [Alias('wv')]
    ${WarningVariable},

    ${DefaultPublicFolderProhibitPostQuota},

    ${AsyncSendEnabled},

    ${EwsAllowOutlook},

    ${AppsForOfficeEnabled},

    ${UnblockUnsafeSenderPromptEnabled},

    ${ByteEncoderTypeFor7BitCharsets},

    ${MailTipsGroupMetricsEnabled},

    ${RemotePublicFolderMailboxes},

    ${EwsEnabled},

    [Alias('ea')]
    ${ErrorAction},

    ${MailTipsAllTipsEnabled},

    ${SiteMailboxCreationURL},

    ${EwsAllowMacOutlook},

    ${EwsApplicationAccessPolicy},

    ${OAuth2ClientProfileEnabled},

    ${MailTipsExternalRecipientsTipsEnabled},

    ${ExchangeNotificationEnabled},

    ${ActivityBasedAuthenticationTimeoutWithSingleSignOnEnabled},

    ${CalendarVersionStoreEnabled},

    ${DefaultPublicFolderMovedItemRetention},

    [Alias('ov')]
    ${OutVariable},

    ${DefaultPublicFolderDeletedItemRetention},

    ${RefreshSessionEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${ActivityBasedAuthenticationTimeoutInterval},

    ${DefaultPublicFolderMaxItemSize},

    ${DefaultPublicFolderIssueWarningQuota},

    [Alias('ev')]
    ${ErrorVariable},

    ${ConnectorsEnabled},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${PublicFoldersEnabled},

    ${MailTipsMailboxSourcedTipsEnabled},

    ${PublicComputersDetectionEnabled},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    ${EwsAllowList},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${DistributionGroupNamingPolicy},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-OrganizationConfig') `
                            -Arg ('Set-OrganizationConfig', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-OrganizationConfig
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-OrganizationConfig","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${TargetApplicationUri},

    [Alias('wa')]
    ${WarningAction},

    ${MailTipsAccessLevel},

    ${TargetAutodiscoverEpr},

    ${Identity},

    ${Enabled},

    ${Name},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    ${DeliveryReportEnabled},

    [Alias('wv')]
    ${WarningVariable},

    ${OrganizationContact},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ea')]
    ${ErrorAction},

    ${ArchiveAccessEnabled},

    ${FreeBusyAccessEnabled},

    ${MailTipsAccessScope},

    ${TargetOwaURL},

    [Alias('ov')]
    ${OutVariable},

    ${MailTipsAccessEnabled},

    ${PhotosEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${TargetSharingEpr},

    ${FreeBusyAccessLevel},

    ${DomainNames},

    [Alias('ob')]
    ${OutBuffer},

    ${FreeBusyAccessScope},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-OrganizationRelationship') `
                            -Arg ('Set-OrganizationRelationship', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-OrganizationRelationship
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-OrganizationRelationship","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wa')]
    ${WarningAction},

    ${RouteAllMessagesViaOnPremises},

    ${RecipientDomains},

    ${CloudServicesMailEnabled},

    ${Identity},

    ${Enabled},

    ${Name},

    [Alias('ev')]
    ${ErrorVariable},

    ${TestMode},

    ${AllAcceptedDomains},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Comment},

    ${IsTransportRuleScoped},

    ${IsValidated},

    ${UseMXRecord},

    ${LastValidationTimestamp},

    ${TlsSettings},

    [Alias('ov')]
    ${OutVariable},

    ${ValidationRecipients},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${ConnectorType},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${SmartHosts},

    ${TlsDomain},

    [Alias('ob')]
    ${OutBuffer},

    ${ConnectorSource},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-OutboundConnector') `
                            -Arg ('Set-OutboundConnector', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-OutboundConnector
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-OutboundConnector","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Priority},

    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${SentToScope},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${SentTo},

    ${UserCanOverride},

    [Alias('ob')]
    ${OutBuffer},

    ${FromDepartment},

    ${ApplyRightsProtectionTemplate},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Force},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-OutlookProtectionRule') `
                            -Arg ('Set-OutlookProtectionRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-OutlookProtectionRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-OutlookProtectionRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('cf')]
    [switch]
    ${Confirm},

    ${DefaultClientLanguage},

    ${ContactsEnabled},

    [Alias('wa')]
    ${WarningAction},

    ${ExplicitLogonEnabled},

    ${WebPartsFrameOptionsType},

    ${BlockedFileTypes},

    ${LinkedInEnabled},

    ${DirectFileAccessOnPrivateComputersEnabled},

    ${ChangePasswordEnabled},

    ${AllowedMimeTypes},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${WacViewingOnPublicComputersEnabled},

    [Alias('ea')]
    ${ErrorAction},

    ${ExternalSPMySiteHostURL},

    ${ForceSaveMimeTypes},

    ${JournalEnabled},

    [Alias('ov')]
    ${OutVariable},

    ${SpellCheckerEnabled},

    ${DisplayPhotosEnabled},

    ${TasksEnabled},

    ${GroupCreationEnabled},

    ${ForceSaveFileTypes},

    ${ForceWacViewingFirstOnPublicComputers},

    [Alias('db')]
    [switch]
    ${Debug},

    ${PlacesEnabled},

    ${WacViewingOnPrivateComputersEnabled},

    ${TextMessagingEnabled},

    ${SearchFoldersEnabled},

    ${UserVoiceEnabled},

    ${CalendarEnabled},

    ${GlobalAddressListEnabled},

    ${IRMEnabled},

    ${DirectFileAccessOnPublicComputersEnabled},

    ${SetPhotoURL},

    ${WSSAccessOnPublicComputersEnabled},

    ${SignaturesEnabled},

    ${WacOMEXEnabled},

    ${WacExternalServicesEnabled},

    ${InternalSPMySiteHostURL},

    ${SatisfactionEnabled},

    ${SilverlightEnabled},

    ${InstantMessagingType},

    ${ActiveSyncIntegrationEnabled},

    ${DefaultTheme},

    ${SetPhotoEnabled},

    ${AllowCopyContactsToDeviceAddressBook},

    ${BoxAttachmentsEnabled},

    ${UseISO885915},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${OutboundCharset},

    ${ReportJunkEmailEnabled},

    ${ForceWacViewingFirstOnPrivateComputers},

    ${RecoverDeletedItemsEnabled},

    ${InstantMessagingEnabled},

    ${DropboxAttachmentsEnabled},

    ${DelegateAccessEnabled},

    ${ActionForUnknownFileAndMIMETypes},

    ${WacEditingEnabled},

    ${PublicFoldersEnabled},

    ${ForceSaveAttachmentFilteringEnabled},

    ${LogonAndErrorLanguage},

    [Alias('wv')]
    ${WarningVariable},

    ${WSSAccessOnPrivateComputersEnabled},

    ${AllAddressListsEnabled},

    ${NotesEnabled},

    ${PremiumClientEnabled},

    ${BlockedMimeTypes},

    ${UMIntegrationEnabled},

    ${ThemeSelectionEnabled},

    ${WeatherEnabled},

    [switch]
    ${IsDefault},

    ${AllowOfflineOn},

    ${AllowedFileTypes},

    ${RulesEnabled},

    ${Name},

    [Alias('ev')]
    ${ErrorVariable},

    ${OrganizationEnabled},

    ${OWALightEnabled},

    ${RemindersAndNotificationsEnabled},

    ${UseGB18030},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    ${SkipCreateUnifiedGroupCustomSharepointClassification},

    [switch]
    ${DisableFacebook},

    ${PhoneticSupportEnabled},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-OwaMailboxPolicy') `
                            -Arg ('Set-OwaMailboxPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-OwaMailboxPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-OwaMailboxPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-Partition","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${ApplicationIdentifier},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${LinkedAccount},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${AcceptSecurityIdentifierInformation},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    ${AccountType},

    ${Enabled},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-PartnerApplication') `
                            -Arg ('Set-PartnerApplication', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-PartnerApplication
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-PartnerApplication","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-PcsvDeviceBootConfiguration","Function","Public","PcsvDevice","PcsvDevice","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${GatewayIPAddresses},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-PerimeterConfig') `
                            -Arg ('Set-PerimeterConfig', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-PerimeterConfig
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-PerimeterConfig","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-PhysicalDisk","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Value},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-PolicyTipConfig') `
                            -Arg ('Set-PolicyTipConfig', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-PolicyTipConfig
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-PolicyTipConfig","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [switch]
    ${Force},

    ${IncomingPort},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${DisplayName},

    [Alias('ob')]
    ${OutBuffer},

    ${IncomingPassword},

    [Alias('db')]
    [switch]
    ${Debug},

    ${IncomingSecurity},

    ${EmailAddress},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${ValidateSecret},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${Mailbox},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${ResendVerification},

    ${Identity},

    [Alias('ea')]
    ${ErrorAction},

    ${IncomingUserName},

    [Alias('wv')]
    ${WarningVariable},

    ${IncomingServer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    ${IncomingAuth},

    ${Enabled},

    ${LeaveOnServer},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-PopSubscription') `
                            -Arg ('Set-PopSubscription', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-PopSubscription
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-PopSubscription","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-PrintConfiguration","Function","Public","PrintManagement","PrintManagement","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-Printer","Function","Public","PrintManagement","PrintManagement","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-PrinterProperty","Function","Public","PrintManagement","PrintManagement","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${IssueWarningQuota},

    ${Path},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${RetainDeletedItemsFor},

    ${Name},

    ${MailRecipientGuid},

    ${MaxItemSize},

    ${PerUserReadStateEnabled},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${EformsLocaleId},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    ${MailEnabled},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${ProhibitPostQuota},

    [Alias('ov')]
    ${OutVariable},

    ${AgeLimit},

    [switch]
    ${Force},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-PublicFolder') `
                            -Arg ('Set-PublicFolder', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-PublicFolder
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-PublicFolder","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${LargeItemLimit},

    [Alias('ov')]
    ${OutVariable},

    ${BadItemLimit},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${SkipMerging},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AcceptLargeDataLoss},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-PublicFolderMailboxMigrationRequest') `
                            -Arg ('Set-PublicFolderMailboxMigrationRequest', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-PublicFolderMailboxMigrationRequest
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-PublicFolderMailboxMigrationRequest","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${LargeItemLimit},

    ${RemoteCredential},

    ${RemoteMailboxServerLegacyDN},

    ${BadItemLimit},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${AuthenticationMethod},

    ${BatchName},

    ${SkipMerging},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${PreventCompletion},

    [Alias('ev')]
    ${ErrorVariable},

    ${RemoteMailboxLegacyDN},

    ${Identity},

    ${OutlookAnywhereHostName},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    ${CompletedRequestAgeLimit},

    [switch]
    ${AcceptLargeDataLoss},

    ${RequestExpiryInterval},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-PublicFolderMigrationRequest') `
                            -Arg ('Set-PublicFolderMigrationRequest', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-PublicFolderMigrationRequest
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-PublicFolderMigrationRequest","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wa')]
    ${WarningAction},

    ${AutoReplyEnabled},

    ${Identity},

    ${TNEFEnabled},

    [Alias('ev')]
    ${ErrorVariable},

    ${DeliveryReportEnabled},

    ${RequiredCharsetCoverage},

    ${MeetingForwardNotificationEnabled},

    ${ContentType},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${ByteEncoderTypeFor7BitCharsets},

    ${AutoForwardEnabled},

    ${Name},

    ${TrustedMailInboundEnabled},

    ${LineWrapSize},

    ${CharacterSet},

    ${PreferredInternetCodePageForShiftJis},

    [Alias('ov')]
    ${OutVariable},

    ${NonMimeCharacterSet},

    ${NDREnabled},

    ${TargetDeliveryDomain},

    ${TrustedMailOutboundEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${DisplaySenderName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${AllowedOOFType},

    [Alias('wv')]
    ${WarningVariable},

    ${NDRDiagnosticInfoEnabled},

    [Alias('ob')]
    ${OutBuffer},

    ${IsInternal},

    [Alias('db')]
    [switch]
    ${Debug},

    ${UseSimpleDisplayName},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-RemoteDomain') `
                            -Arg ('Set-RemoteDomain', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-RemoteDomain
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-RemoteDomain","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${DlpRuleId},

    ${Direction},

    ${TransportRuleId},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${ScheduleName},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [switch]
    ${IncludeDLP},

    [Alias('ob')]
    ${OutBuffer},

    ${SenderAddress},

    ${ExpiryDate},

    [Alias('ev')]
    ${ErrorVariable},

    ${ScheduleId},

    [Alias('wa')]
    ${WarningAction},

    ${RecipientAddress},

    ${NotificationEmail},

    ${ReportFrequency},

    ${ReportType},

    ${StartDate},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-ReportSchedule') `
                            -Arg ('Set-ReportSchedule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-ReportSchedule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-ReportSchedule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-ResiliencySetting","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ea')]
    ${ErrorAction},

    ${ResourcePropertySchema},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-ResourceConfig') `
                            -Arg ('Set-ResourceConfig', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-ResourceConfig
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-ResourceConfig","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [switch]
    ${Force},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${RetentionPolicyTagLinks},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${RetentionId},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${IsDefaultArbitrationMailbox},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${IsDefault},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-RetentionPolicy') `
                            -Arg ('Set-RetentionPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-RetentionPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-RetentionPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${MessageClass},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${RetentionEnabled},

    ${OptionalInMailbox},

    ${LocalizedRetentionPolicyTagName},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wa')]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Name},

    ${RetentionAction},

    [Alias('ov')]
    ${OutVariable},

    ${Mailbox},

    ${Comment},

    ${MustDisplayCommentEnabled},

    ${Identity},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('ea')]
    ${ErrorAction},

    ${LocalizedComment},

    ${RetentionId},

    ${AgeLimitForRetention},

    ${SystemTag},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Force},

    ${LegacyManagedFolder},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-RetentionPolicyTag') `
                            -Arg ('Set-RetentionPolicyTag', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-RetentionPolicyTag
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-RetentionPolicyTag","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    ${Type},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-RMSTemplate') `
                            -Arg ('Set-RMSTemplate', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-RMSTemplate
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-RMSTemplate","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Name},

    [Alias('wv')]
    ${WarningVariable},

    ${ExtranetCertificationUrl},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${Default},

    ${Identity},

    ${ExtranetLicensingUrl},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    ${IntranetLicensingUrl},

    ${IntranetCertificationUrl},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-RMSTrustedPublishingDomain') `
                            -Arg ('Set-RMSTrustedPublishingDomain', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-RMSTrustedPublishingDomain
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-RMSTrustedPublishingDomain","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    [switch]
    ${IsDefault},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-RoleAssignmentPolicy') `
                            -Arg ('Set-RoleAssignmentPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-RoleAssignmentPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-RoleAssignmentPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Name},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    [Alias('ov')]
    ${OutVariable},

    ${ManagedBy},

    [switch]
    ${Force},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-RoleGroup') `
                            -Arg ('Set-RoleGroup', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-RoleGroup
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-RoleGroup","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-ScheduledTask","Function","Public","ScheduledTasks","ScheduledTasks","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${Domains},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${Default},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    ${Enabled},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-SharingPolicy') `
                            -Arg ('Set-SharingPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-SharingPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-SharingPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [switch]
    ${Force},

    ${SyncEnabled},

    ${Owners},

    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${ShowInMyClient},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('ea')]
    ${ErrorAction},

    ${SharePointUrl},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    ${RemoveDuplicateMessages},

    ${Members},

    ${Active},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-SiteMailbox') `
                            -Arg ('Set-SiteMailbox', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-SiteMailbox
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-SiteMailbox","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    ${AliasPrefix},

    [Alias('wa')]
    ${WarningAction},

    ${DefaultAliasPrefixEnabled},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-SiteMailboxProvisioningPolicy') `
                            -Arg ('Set-SiteMailboxProvisioningPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-SiteMailboxProvisioningPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-SiteMailboxProvisioningPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-SmbBandwidthLimit","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-SmbClientConfiguration","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-SmbPathAcl","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-SmbServerConfiguration","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-SmbShare","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${SMIMECertificateIssuingCA},

    [Alias('wa')]
    ${WarningAction},

    ${OWACopyRecipientHeaders},

    ${Identity},

    ${OWAIncludeSMIMECapabilitiesInMessage},

    ${OWAEncryptionAlgorithms},

    [Alias('ev')]
    ${ErrorVariable},

    ${OWAAlwaysSign},

    ${OWAUseSecondaryProxiesWhenFindingCertificates},

    ${OWAAlwaysEncrypt},

    ${OWACheckCRLOnSend},

    [Alias('wv')]
    ${WarningVariable},

    ${OWADLExpansionTimeout},

    ${OWAUseKeyIdentifier},

    ${OWAOnlyUseSmartCard},

    [Alias('ea')]
    ${ErrorAction},

    ${OWAIncludeCertificateChainAndRootCertificate},

    ${OWAEncryptTemporaryBuffers},

    ${OWAIncludeCertificateChainWithoutRootCertificate},

    ${OWAForceSMIMEClientUpgrade},

    [Alias('ob')]
    ${OutBuffer},

    ${OWAAllowUserChoiceOfSigningCertificate},

    [Alias('ov')]
    ${OutVariable},

    ${OWASigningAlgorithms},

    ${OWADisableCRLCheck},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${OWABCCEncryptedEmailForking},

    ${OWATripleWrapSignedEncryptedMail},

    ${OWACRLRetrievalTimeout},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${OWACRLConnectionTimeout},

    ${OWAClearSign},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${OWASenderCertificateAttributesToDisplay},

    ${OWASignedEmailCertificateInclusion},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-SmimeConfig') `
                            -Arg ('Set-SmimeConfig', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-SmimeConfig
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-SmimeConfig","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-StoragePool","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-StorageProvider","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-StorageSetting","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-StorageSubSystem","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-StorageTier","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${Password},

    [Alias('wa')]
    ${WarningAction},

    ${IncrementalSyncInterval},

    ${Identity},

    ${Priority},

    ${DisplayName},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Calendar},

    ${Contact},

    [Alias('wv')]
    ${WarningVariable},

    ${RemoteServerPort},

    ${Authentication},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${LargeItemLimit},

    [switch]
    ${RemoteSendEnabled},

    ${SmtpServerName},

    ${BatchName},

    [Alias('ov')]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${AcceptLargeDataLoss},

    ${RequestExpiryInterval},

    [Alias('ob')]
    ${OutBuffer},

    ${BadItemLimit},

    ${SmtpServerPort},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${SkipMerging},

    ${Security},

    ${RefreshToken},

    ${CompletedRequestAgeLimit},

    ${RemoteServerName},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-SyncRequest') `
                            -Arg ('Set-SyncRequest', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-SyncRequest
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-SyncRequest","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${CountryRegionId},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${MobileOperatorId},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${NotificationPhoneNumber},

    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-TextMessagingAccount') `
                            -Arg ('Set-TextMessagingAccount', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-TextMessagingAccount
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-TextMessagingAccount","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${InternalDelayDsnEnabled},

    [Alias('wa')]
    ${WarningAction},

    ${InternalDsnSendHtml},

    ${InternalDsnReportingAuthority},

    ${ExternalDelayDsnEnabled},

    ${DSNConversionMode},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    ${InternalDsnLanguageDetectionEnabled},

    ${AddressBookPolicyRoutingEnabled},

    ${ExternalDsnLanguageDetectionEnabled},

    ${ExternalDsnSendHtml},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Rfc2231EncodingEnabled},

    ${HeaderPromotionModeSetting},

    ${JournalingReportNdrTo},

    ${ConvertDisclaimerWrapperToEml},

    [Alias('ov')]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${ExternalDsnReportingAuthority},

    [Alias('wv')]
    ${WarningVariable},

    ${ExternalDsnDefaultLanguage},

    ${InternalDsnDefaultLanguage},

    ${ExternalPostmasterAddress},

    ${ClearCategories},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-TransportConfig') `
                            -Arg ('Set-TransportConfig', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-TransportConfig
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-TransportConfig","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${ActivationDate},

    ${AddToRecipients},

    ${ApplyHtmlDisclaimerFallbackAction},

    ${ExceptIfRecipientADAttributeContainsWords},

    ${RecipientADAttributeMatchesPatterns},

    ${AttachmentSizeOver},

    ${ExceptIfSenderADAttributeContainsWords},

    ${SetSCL},

    ${AnyOfToHeaderMemberOf},

    ${Disconnect},

    ${ExceptIfSentToMemberOf},

    ${ExceptIfAnyOfCcHeader},

    ${ExceptIfAttachmentMatchesPatterns},

    ${RecipientDomainIs},

    ${ManagerForEvaluatedUser},

    ${SmtpRejectMessageRejectStatusCode},

    [Alias('wv')]
    ${WarningVariable},

    ${ExceptIfHeaderMatchesPatterns},

    ${ExceptIfFromScope},

    ${ADComparisonAttribute},

    ${ExceptIfHeaderContainsWords},

    ${HeaderMatchesPatterns},

    ${ExceptIfAttachmentIsPasswordProtected},

    ${DeleteMessage},

    ${HasSenderOverride},

    ${ExceptIfSubjectOrBodyMatchesPatterns},

    ${ExceptIfHasClassification},

    ${Quarantine},

    ${ExceptIfAnyOfRecipientAddressMatchesPatterns},

    ${ExceptIfContentCharacterSetContainsWords},

    ${BlindCopyTo},

    ${ApplyHtmlDisclaimerLocation},

    ${ExceptIfMessageTypeMatches},

    ${SenderIpRanges},

    ${ExceptIfMessageContainsDataClassifications},

    ${ModerateMessageByUser},

    ${HasNoClassification},

    ${ExceptIfSenderInRecipientList},

    ${HeaderContainsMessageHeader},

    ${RemoveHeader},

    ${HasClassification},

    ${MessageContainsDataClassifications},

    ${ExceptIfFromMemberOf},

    ${RuleSubType},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${SentToScope},

    ${AnyOfToCcHeaderMemberOf},

    ${From},

    ${ExceptIfAnyOfRecipientAddressContainsWords},

    ${ExceptIfWithImportance},

    ${ContentCharacterSetContainsWords},

    ${SubjectContainsWords},

    ${RejectMessageEnhancedStatusCode},

    ${SenderADAttributeMatchesPatterns},

    ${ExceptIfSenderADAttributeMatchesPatterns},

    ${IncidentReportContent},

    ${FromMemberOf},

    ${AttachmentContainsWords},

    ${ExceptIfSCLOver},

    [Alias('ob')]
    ${OutBuffer},

    ${ExceptIfBetweenMemberOf1},

    ${GenerateNotification},

    ${NotifySender},

    ${ExceptIfAttachmentNameMatchesPatterns},

    ${ExceptIfSenderManagementRelationship},

    ${SetAuditSeverity},

    ${AttachmentPropertyContainsWords},

    ${ExceptIfAnyOfToHeader},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${RouteMessageOutboundRequireTls},

    ${WithImportance},

    ${RuleErrorAction},

    ${FromScope},

    ${AttachmentNameMatchesPatterns},

    ${SentTo},

    ${ExceptIfFromAddressMatchesPatterns},

    ${AnyOfCcHeaderMemberOf},

    ${ExceptIfAttachmentSizeOver},

    ${ExceptIfManagerForEvaluatedUser},

    ${ExceptIfFromAddressContainsWords},

    ${AttachmentHasExecutableContent},

    ${RouteMessageOutboundConnector},

    ${SubjectMatchesPatterns},

    ${ExceptIfRecipientDomainIs},

    [Alias('wa')]
    ${WarningAction},

    ${ExceptIfSenderDomainIs},

    ${SenderManagementRelationship},

    ${ExceptIfBetweenMemberOf2},

    ${RedirectMessageTo},

    ${ApplyOME},

    ${AddManagerAsRecipientType},

    ${ExceptIfMessageSizeOver},

    ${RecipientInSenderList},

    ${SenderADAttributeContainsWords},

    ${MessageSizeOver},

    ${ExceptIfRecipientInSenderList},

    ${ExceptIfAttachmentHasExecutableContent},

    ${ExceptIfAttachmentIsUnsupported},

    ${RemoveOME},

    ${RejectMessageReasonText},

    ${RecipientAddressContainsWords},

    ${GenerateIncidentReport},

    ${FromAddressContainsWords},

    ${AnyOfRecipientAddressMatchesPatterns},

    ${ApplyHtmlDisclaimerText},

    ${RecipientAddressMatchesPatterns},

    ${ExceptIfSubjectContainsWords},

    ${ExceptIfFrom},

    ${AnyOfToCcHeader},

    ${ExceptIfSentToScope},

    ${ExceptIfAnyOfToCcHeaderMemberOf},

    ${ModerateMessageByManager},

    ${ADComparisonOperator},

    ${BetweenMemberOf2},

    ${SetHeaderName},

    ${AttachmentProcessingLimitExceeded},

    ${ExceptIfAnyOfCcHeaderMemberOf},

    ${ExceptIfSubjectMatchesPatterns},

    ${Name},

    ${ExceptIfRecipientAddressContainsWords},

    ${HeaderMatchesMessageHeader},

    ${AnyOfRecipientAddressContainsWords},

    ${HeaderContainsWords},

    ${Comments},

    ${SentToMemberOf},

    ${ExceptIfADComparisonAttribute},

    ${ExceptIfSentTo},

    [Alias('ov')]
    ${OutVariable},

    ${ExceptIfADComparisonOperator},

    ${Identity},

    ${ExceptIfAnyOfToHeaderMemberOf},

    ${Mode},

    ${ExceptIfAnyOfToCcHeader},

    ${SubjectOrBodyMatchesPatterns},

    [Alias('db')]
    [switch]
    ${Debug},

    ${ExceptIfAttachmentExtensionMatchesWords},

    [Alias('ev')]
    ${ErrorVariable},

    ${SenderDomainIs},

    ${ExceptIfRecipientAddressMatchesPatterns},

    ${ExceptIfHasNoClassification},

    ${ExceptIfSenderIpRanges},

    ${ExceptIfRecipientADAttributeMatchesPatterns},

    ${RecipientADAttributeContainsWords},

    ${AttachmentIsUnsupported},

    ${ExpiryDate},

    ${AttachmentExtensionMatchesWords},

    ${ExceptIfSubjectOrBodyContainsWords},

    ${LogEventText},

    ${ExceptIfManagerAddresses},

    ${SenderInRecipientList},

    ${AttachmentMatchesPatterns},

    ${DlpPolicy},

    ${ManagerAddresses},

    ${SenderAddressLocation},

    [Alias('ea')]
    ${ErrorAction},

    ${CopyTo},

    ${SubjectOrBodyContainsWords},

    ${ApplyClassification},

    ${SetHeaderValue},

    ${Priority},

    ${AttachmentIsPasswordProtected},

    ${BetweenMemberOf1},

    ${AnyOfCcHeader},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${ExceptIfAttachmentProcessingLimitExceeded},

    ${FromAddressMatchesPatterns},

    ${ExceptIfHeaderMatchesMessageHeader},

    ${SmtpRejectMessageRejectText},

    ${ExceptIfAttachmentContainsWords},

    ${AnyOfToHeader},

    ${ExceptIfHasSenderOverride},

    ${SCLOver},

    ${PrependSubject},

    ${ApplyRightsProtectionTemplate},

    ${MessageTypeMatches},

    ${ExceptIfAttachmentPropertyContainsWords},

    ${StopRuleProcessing},

    ${ExceptIfHeaderContainsMessageHeader},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-TransportRule') `
                            -Arg ('Set-TransportRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-TransportRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-TransportRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${AfterHoursMainMenuCustomPromptEnabled},

    [Alias('wa')]
    ${WarningAction},

    ${SpeechEnabled},

    ${AllowedInCountryOrRegionGroups},

    ${AfterHoursTransferToOperatorEnabled},

    ${Identity},

    ${BusinessLocation},

    ${TimeZoneName},

    ${BusinessHoursMainMenuCustomPromptFilename},

    [Alias('ev')]
    ${ErrorVariable},

    ${OperatorExtension},

    ${DTMFFallbackAutoAttendant},

    ${BusinessHoursTransferToOperatorEnabled},

    ${AfterHoursKeyMappingEnabled},

    ${PilotIdentifierList},

    ${AllowExtensions},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${InfoAnnouncementEnabled},

    ${SendVoiceMsgEnabled},

    ${BusinessName},

    ${ContactScope},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${ForceUpgrade},

    [Alias('ov')]
    ${OutVariable},

    ${BusinessHoursMainMenuCustomPromptEnabled},

    ${AfterHoursKeyMapping},

    ${AllowedInternationalGroups},

    ${WeekStartDay},

    ${MatchedNameSelectionMethod},

    ${BusinessHoursWelcomeGreetingEnabled},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ob')]
    ${OutBuffer},

    ${CallSomeoneEnabled},

    ${ContactAddressList},

    ${BusinessHoursKeyMapping},

    ${InfoAnnouncementFilename},

    ${AfterHoursMainMenuCustomPromptFilename},

    ${BusinessHoursKeyMappingEnabled},

    ${NameLookupEnabled},

    ${AllowDialPlanSubscribers},

    ${AfterHoursWelcomeGreetingFilename},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${ContactRecipientContainer},

    ${BusinessHoursSchedule},

    [Alias('wv')]
    ${WarningVariable},

    ${AfterHoursWelcomeGreetingEnabled},

    ${Language},

    ${HolidaySchedule},

    ${BusinessHoursWelcomeGreetingFilename},

    ${Name},

    ${TimeZone},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-UMAutoAttendant') `
                            -Arg ('Set-UMAutoAttendant', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-UMAutoAttendant
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-UMAutoAttendant","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Priority},

    ${Name},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${CallerIds},

    [Alias('ov')]
    ${OutVariable},

    ${Mailbox},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    ${CallersCanInterruptGreeting},

    ${ScheduleStatus},

    [Alias('wa')]
    ${WarningAction},

    ${TimeOfDay},

    ${CheckAutomaticReplies},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${ExtensionsDialed},

    ${KeyMappings},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-UMCallAnsweringRule') `
                            -Arg ('Set-UMCallAnsweringRule', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-UMCallAnsweringRule
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-UMCallAnsweringRule","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wa')]
    ${WarningAction},

    ${NationalNumberPrefix},

    ${InternationalNumberFormat},

    ${AllowedInCountryOrRegionGroups},

    ${AutomaticSpeechRecognitionEnabled},

    ${Identity},

    ${OutsideLineAccessCode},

    ${AllowDialPlanSubscribers},

    ${AudioCodec},

    ${AllowHeuristicADCallingLineIdResolution},

    ${EquivalentDialPlanPhoneContexts},

    ${OperatorExtension},

    [Alias('db')]
    [switch]
    ${Debug},

    ${TUIPromptEditingEnabled},

    ${DefaultLanguage},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${PilotIdentifierList},

    ${AllowExtensions},

    ${LegacyPromptPublishingPoint},

    ${InfoAnnouncementEnabled},

    ${SendVoiceMsgEnabled},

    ${ContactScope},

    ${MaxRecordingDuration},

    ${WelcomeGreetingEnabled},

    [switch]
    ${ForceUpgrade},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ea')]
    ${ErrorAction},

    ${AllowedInternationalGroups},

    ${Extension},

    ${MaxCallDuration},

    ${WelcomeGreetingFilename},

    ${InternationalAccessCode},

    ${InfoAnnouncementFilename},

    ${NumberingPlanFormats},

    ${CallSomeoneEnabled},

    ${ContactAddressList},

    ${AccessTelephoneNumbers},

    ${CountryOrRegionCode},

    ${LogonFailuresBeforeDisconnect},

    ${FaxEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${ContactRecipientContainer},

    ${UMAutoAttendant},

    ${ConfiguredInternationalGroups},

    [Alias('ev')]
    ${ErrorVariable},

    ${ConfiguredInCountryOrRegionGroups},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${CallAnsweringRulesEnabled},

    ${DialByNamePrimary},

    ${DialByNameSecondary},

    [Alias('ob')]
    ${OutBuffer},

    ${Name},

    ${RecordingIdleTimeout},

    ${InputFailuresBeforeDisconnect},

    ${InCountryOrRegionNumberFormat},

    ${MatchedNameSelectionMethod},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-UMDialPlan') `
                            -Arg ('Set-UMDialPlan', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-UMDialPlan
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-UMDialPlan","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${DelayedSourcePartyInfoEnabled},

    ${IPAddressFamily},

    [Alias('wv')]
    ${WarningVariable},

    ${OutcallsAllowed},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Address},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    ${Simulator},

    [Alias('wa')]
    ${WarningAction},

    ${Status},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${MessageWaitingIndicatorAllowed},

    ${Port},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-UMIPGateway') `
                            -Arg ('Set-UMIPGateway', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-UMIPGateway
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-UMIPGateway","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wa')]
    ${WarningAction},

    ${UMSMSNotificationOption},

    ${AutomaticSpeechRecognitionEnabled},

    ${Identity},

    ${PinlessAccessToVoiceMailEnabled},

    ${PlayOnPhoneEnabled},

    ${AnonymousCallersCanLeaveMessages},

    ${Name},

    ${UMMailboxPolicy},

    [Alias('db')]
    [switch]
    ${Debug},

    ${TUIAccessToEmailEnabled},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${AllowUMCallsFromNonUsers},

    ${CallAnsweringAudioCodec},

    [Alias('ob')]
    ${OutBuffer},

    ${OperatorNumber},

    [Alias('ov')]
    ${OutVariable},

    ${FaxEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${TUIAccessToCalendarEnabled},

    ${ImListMigrationCompleted},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${CallAnsweringRulesEnabled},

    ${MissedCallNotificationEnabled},

    ${SubscriberAccessEnabled},

    [Alias('ev')]
    ${ErrorVariable},

    ${VoiceMailAnalysisEnabled},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-UMMailbox') `
                            -Arg ('Set-UMMailbox', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-UMMailbox
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-UMMailbox","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${FolderToReadEmailsFrom},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${SentVoiceMailPreviewEnabled},

    [Alias('ev')]
    ${ErrorVariable},

    ${ReadOldestUnreadVoiceMessagesFirst},

    ${Identity},

    ${ReceivedVoiceMailPreviewEnabled},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${DefaultPlayOnPhoneNumber},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${Greeting},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-UMMailboxConfiguration') `
                            -Arg ('Set-UMMailboxConfiguration', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-UMMailboxConfiguration
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-UMMailboxConfiguration","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${LockedOut},

    ${SendEmail},

    [Alias('ev')]
    ${ErrorVariable},

    ${NotifyEmail},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${Pin},

    ${PinExpired},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-UMMailboxPIN') `
                            -Arg ('Set-UMMailboxPIN', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-UMMailboxPIN
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-UMMailboxPIN","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wa')]
    ${WarningAction},

    ${VoiceMailPreviewPartnerAssignedID},

    ${AllowVoiceResponseToOtherMessageTypes},

    ${AllowCommonPatterns},

    ${Identity},

    ${AllowDialPlanSubscribers},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${UMDialPlan},

    ${AllowPinlessVoiceMailAccess},

    ${Name},

    [Alias('ev')]
    ${ErrorVariable},

    ${LogonFailuresBeforePINReset},

    ${VoiceMailPreviewPartnerAddress},

    [Alias('db')]
    [switch]
    ${Debug},

    ${AllowedInCountryOrRegionGroups},

    ${MaxGreetingDuration},

    ${AllowAutomaticSpeechRecognition},

    ${PINHistoryCount},

    ${AllowExtensions},

    ${AllowPlayOnPhone},

    ${ResetPINText},

    ${AllowVoiceMailAnalysis},

    ${FaxServerURI},

    ${InformCallerOfVoiceMailAnalysis},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${AllowFax},

    ${FaxMessageText},

    ${VoiceMailPreviewPartnerMaxMessageDuration},

    ${AllowedInternationalGroups},

    ${AllowMissedCallNotifications},

    ${ProtectedVoiceMailText},

    ${AllowSMSNotification},

    ${AllowTUIAccessToEmail},

    [Alias('ov')]
    ${OutVariable},

    ${AllowMessageWaitingIndicator},

    ${SourceForestPolicyNames},

    ${PINLifetime},

    [Alias('ob')]
    ${OutBuffer},

    ${VoiceMailText},

    ${ProtectAuthenticatedVoiceMail},

    ${MinPINLength},

    [switch]
    ${ForceUpgrade},

    ${AllowSubscriberAccess},

    ${UMEnabledText},

    ${AllowVoiceMailPreview},

    ${ProtectUnauthenticatedVoiceMail},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${VoiceMailPreviewPartnerMaxDeliveryDelay},

    ${AllowTUIAccessToCalendar},

    ${AllowCallAnsweringRules},

    ${AllowTUIAccessToDirectory},

    ${RequireProtectedPlayOnPhone},

    ${AllowTUIAccessToPersonalContacts},

    ${MaxLogonAttempts},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-UMMailboxPolicy') `
                            -Arg ('Set-UMMailboxPolicy', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-UMMailboxPolicy
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-UMMailboxPolicy","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-UnifiedAuditSetting') `
                            -Arg ('Set-UnifiedAuditSetting', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-UnifiedAuditSetting
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-UnifiedAuditSetting","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wa')]
    ${WarningAction},

    ${CustomAttribute12},

    ${CustomAttribute10},

    ${RequireSenderAuthenticationEnabled},

    ${HiddenFromAddressListsEnabled},

    ${ExtensionCustomAttribute4},

    [switch]
    ${CalendarMemberReadOnly},

    ${CustomAttribute8},

    ${DisplayName},

    ${CustomAttribute3},

    ${RejectMessagesFromSendersOrMembers},

    ${CustomAttribute5},

    ${CustomAttribute7},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Identity},

    ${Classification},

    ${AcceptMessagesOnlyFromSendersOrMembers},

    ${ExtensionCustomAttribute2},

    [Alias('wv')]
    ${WarningVariable},

    ${CustomAttribute6},

    ${CustomAttribute1},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${ExtensionCustomAttribute3},

    [switch]
    ${HiddenGroupMembershipEnabled},

    ${CustomAttribute9},

    [Alias('ev')]
    ${ErrorVariable},

    ${CustomAttribute14},

    ${MailTip},

    [switch]
    ${ForceUpgrade},

    ${PrimarySmtpAddress},

    ${MailTipTranslations},

    ${CustomAttribute15},

    [Alias('ov')]
    ${OutVariable},

    ${ExtensionCustomAttribute1},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${Notes},

    ${ExtensionCustomAttribute5},

    ${CustomAttribute4},

    [Alias('ob')]
    ${OutBuffer},

    ${Alias},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AutoSubscribeNewMembers},

    ${CustomAttribute2},

    ${CustomAttribute13},

    ${Language},

    ${CustomAttribute11},

    ${EmailAddresses},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-UnifiedGroup') `
                            -Arg ('Set-UnifiedGroup', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-UnifiedGroup
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-UnifiedGroup","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${Company},

    [Alias('wa')]
    ${WarningAction},

    ${Phone},

    ${DisplayName},

    ${Identity},

    ${Office},

    ${CountryOrRegion},

    ${OtherTelephone},

    ${Pager},

    [Alias('ev')]
    ${ErrorVariable},

    ${PhoneticDisplayName},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Fax},

    ${PostOfficeBox},

    ${LastName},

    ${UMDtmfMap},

    [Alias('wv')]
    ${WarningVariable},

    ${ResetPasswordOnNextLogon},

    [Alias('ea')]
    ${ErrorAction},

    ${SeniorityIndex},

    ${City},

    ${AllowUMCallsFromNonUsers},

    ${Title},

    ${MobilePhone},

    ${AssistantName},

    ${CreateDTMFMap},

    [Alias('ov')]
    ${OutVariable},

    ${StateOrProvince},

    ${Initials},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${WebPage},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${PublicFolder},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${Manager},

    ${HomePhone},

    ${OtherFax},

    ${SimpleDisplayName},

    [Alias('ob')]
    ${OutBuffer},

    ${Department},

    ${OtherHomePhone},

    ${FirstName},

    ${WindowsEmailAddress},

    ${Notes},

    ${RemotePowerShellEnabled},

    ${Name},

    ${GeoCoordinates},

    ${StreetAddress},

    ${PostalCode},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-User') `
                            -Arg ('Set-User', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-User
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-User","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${PictureData},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${GroupMailbox},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Cancel},

    ${PictureStream},

    [switch]
    ${Save},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${PhotoType},

    [switch]
    ${Preview},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Set-UserPhoto') `
                            -Arg ('Set-UserPhoto', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Set-UserPhoto
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-UserPhoto","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-VirtualDisk","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-Volume","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-VolumeScrubPolicy","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-VpnConnection","Function","Public","VpnClient","VpnClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-VpnConnectionIPsecConfiguration","Function","Public","VpnClient","VpnClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-VpnConnectionProxy","Function","Public","VpnClient","VpnClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-VpnConnectionTriggerDnsConfiguration","Function","Public","VpnClient","VpnClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-VpnConnectionTriggerTrustedNetwork","Function","Public","VpnClient","VpnClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Show-NetFirewallRule","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Show-NetIPsecRule","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Show-VirtualDisk","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Show-WindowsDeveloperLicenseRegistration","Function","Public","WindowsDeveloperLicense","WindowsDeveloperLicense","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Start-AppBackgroundTask","Function","Public","AppBackgroundTask","AppBackgroundTask","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Start-AuditAssistant') `
                            -Arg ('Start-AuditAssistant', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Start-AuditAssistant
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Start-AuditAssistant","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Start-Dtc","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Start-DtcTransactionsTraceSession","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${Locale},

    ${Direction},

    ${ReportType},

    [Alias('ov')]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ev')]
    ${ErrorVariable},

    ${NotifyAddress},

    [Alias('wa')]
    ${WarningAction},

    ${ReportTitle},

    [Alias('db')]
    [switch]
    ${Debug},

    ${EndDate},

    [Alias('ob')]
    ${OutBuffer},

    ${SenderAddress},

    ${DLPPolicy},

    ${DeliveryStatus},

    [Alias('ea')]
    ${ErrorAction},

    ${TransportRule},

    ${OriginalClientIP},

    ${RecipientAddress},

    ${MessageID},

    ${StartDate},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Start-HistoricalSearch') `
                            -Arg ('Start-HistoricalSearch', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Start-HistoricalSearch
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Start-HistoricalSearch","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${InactiveMailbox},

    [switch]
    ${HoldCleanup},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Start-ManagedFolderAssistant') `
                            -Arg ('Start-ManagedFolderAssistant', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Start-ManagedFolderAssistant
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Start-ManagedFolderAssistant","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [switch]
    ${Validate},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Start-MigrationBatch') `
                            -Arg ('Start-MigrationBatch', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Start-MigrationBatch
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Start-MigrationBatch","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Start-MpScan","Function","Public","Defender","Defender","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Start-NetEventSession","Function","Public","NetEventPacketCapture","NetEventPacketCapture","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Start-PcsvDevice","Function","Public","PcsvDevice","PcsvDevice","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Start-ScheduledTask","Function","Public","ScheduledTasks","ScheduledTasks","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Start-Trace","Function","Public","PSDiagnostics","PSDiagnostics","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${DefaultVoicemailGreeting},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    ${CallAnsweringRuleId},

    [Alias('wa')]
    ${WarningAction},

    ${PhoneNumber},

    ${UMMailbox},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AwayVoicemailGreeting},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Start-UMPhoneSession') `
                            -Arg ('Start-UMPhoneSession', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Start-UMPhoneSession
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Start-UMPhoneSession","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Stop-DscConfiguration","Function","Public","PSDesiredStateConfiguration","PSDesiredStateConfiguration","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Stop-Dtc","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Stop-DtcTransactionsTraceSession","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${JobId},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Stop-HistoricalSearch') `
                            -Arg ('Stop-HistoricalSearch', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Stop-HistoricalSearch
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Stop-HistoricalSearch","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Stop-MigrationBatch') `
                            -Arg ('Stop-MigrationBatch', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Stop-MigrationBatch
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Stop-MigrationBatch","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Stop-NetEventSession","Function","Public","NetEventPacketCapture","NetEventPacketCapture","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Stop-PcsvDevice","Function","Public","PcsvDevice","PcsvDevice","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Stop-ScheduledTask","Function","Public","ScheduledTasks","ScheduledTasks","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Stop-Trace","Function","Public","PSDiagnostics","PSDiagnostics","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Stop-UMPhoneSession') `
                            -Arg ('Stop-UMPhoneSession', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Stop-UMPhoneSession
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Stop-UMPhoneSession","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Suspend-BitLocker","Function","Public","BitLocker","BitLocker","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${SuspendComment},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Suspend-MailboxRestoreRequest') `
                            -Arg ('Suspend-MailboxRestoreRequest', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Suspend-MailboxRestoreRequest
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Suspend-MailboxRestoreRequest","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${ProxyToMailbox},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${SuspendComment},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Suspend-MoveRequest') `
                            -Arg ('Suspend-MoveRequest', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Suspend-MoveRequest
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Suspend-MoveRequest","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Suspend-PrintJob","Function","Public","PrintManagement","PrintManagement","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${SuspendComment},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Suspend-PublicFolderMigrationRequest') `
                            -Arg ('Suspend-PublicFolderMigrationRequest', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Suspend-PublicFolderMigrationRequest
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Suspend-PublicFolderMigrationRequest","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Suspend-SyncRequest') `
                            -Arg ('Suspend-SyncRequest', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Suspend-SyncRequest
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Suspend-SyncRequest","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Sync-NetIPsecRule","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-Location T:","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","T:","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
<# Options include:
     RelativeFilePaths - [bool]
         Always resolve file paths using Resolve-Path -Relative.
         The default is to use some heuristics to guess if relative or absolute is better.

   To customize your own custom options, pass a hashtable to CompleteInput, e.g.
         return [System.Management.Automation.CommandCompletion]::CompleteInput($inputScript, $cursorColumn,
             @{ RelativeFilePaths=$false }
#>

[CmdletBinding(DefaultParameterSetName = 'ScriptInputSet')]
Param(
    [Parameter(ParameterSetName = 'ScriptInputSet', Mandatory = $true, Position = 0)]
    [string] $inputScript,
    
    [Parameter(ParameterSetName = 'ScriptInputSet', Mandatory = $true, Position = 1)]
    [int] $cursorColumn,

    [Parameter(ParameterSetName = 'AstInputSet', Mandatory = $true, Position = 0)]
    [System.Management.Automation.Language.Ast] $ast,

    [Parameter(ParameterSetName = 'AstInputSet', Mandatory = $true, Position = 1)]
    [System.Management.Automation.Language.Token[]] $tokens,

    [Parameter(ParameterSetName = 'AstInputSet', Mandatory = $true, Position = 2)]
    [System.Management.Automation.Language.IScriptPosition] $positionOfCursor,
    
    [Parameter(ParameterSetName = 'ScriptInputSet', Position = 2)]
    [Parameter(ParameterSetName = 'AstInputSet', Position = 3)]
    [Hashtable] $options = $null
)

End
{
    if ($psCmdlet.ParameterSetName -eq 'ScriptInputSet')
    {
        return [System.Management.Automation.CommandCompletion]::CompleteInput(
            <#inputScript#>  $inputScript,
            <#cursorColumn#> $cursorColumn,
            <#options#>      $options)
    }
    else
    {
        return [System.Management.Automation.CommandCompletion]::CompleteInput(
            <#ast#>              $ast,
            <#tokens#>           $tokens,
            <#positionOfCursor#> $positionOfCursor,
            <#options#>          $options)
    }
}
        ","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","TabExpansion2","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    ${TestTextExtractionResults},

    ${ClassificationNames},

    ${TextToClassify},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    ${OutVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Test-DataClassification') `
                            -Arg ('Test-DataClassification', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Test-DataClassification
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Test-DataClassification","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Test-DscConfiguration","Function","Public","PSDesiredStateConfiguration","PSDesiredStateConfiguration","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Test-Dtc","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${RMSOnline},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Recipient},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${Sender},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Test-IRMConfiguration') `
                            -Arg ('Test-IRMConfiguration', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Test-IRMConfiguration
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Test-IRMConfiguration","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [switch]
    ${Archive},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    ${WarningVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Test-MAPIConnectivity') `
                            -Arg ('Test-MAPIConnectivity', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Test-MAPIConnectivity
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Test-MAPIConnectivity","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wa')]
    ${WarningAction},

    ${Endpoint},

    [switch]
    ${ExchangeRemoteMove},

    ${EmailAddress},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${PublicFolder},

    ${TestMailbox},

    [Alias('wv')]
    ${WarningVariable},

    ${ExchangeServer},

    ${Authentication},

    [switch]
    ${ExchangeOutlookAnywhere},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${Compliance},

    ${Port},

    ${RemoteServer},

    [Alias('ov')]
    ${OutVariable},

    ${MailboxPermission},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${SourceMailboxLegacyDN},

    [switch]
    ${Imap},

    [switch]
    ${Autodiscover},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    ${Credentials},

    ${PublicFolderDatabaseServerLegacyDN},

    [Alias('ob')]
    ${OutBuffer},

    ${Security},

    [Alias('ev')]
    ${ErrorVariable},

    ${RPCProxyServer},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Test-MigrationServerAvailability') `
                            -Arg ('Test-MigrationServerAvailability', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Test-MigrationServerAvailability
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Test-MigrationServerAvailability","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Test-NetConnection","Function","Public","NetTCPIP","NetTCPIP","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${OrganizationDomain},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${AppOnly},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${UseCachedToken},

    ${Mailbox},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${ReloadConfig},

    ${Service},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${TargetUri},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Test-OAuthConnectivity') `
                            -Arg ('Test-OAuthConnectivity', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Test-OAuthConnectivity
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Test-OAuthConnectivity","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${UserIdentity},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Test-OrganizationRelationship') `
                            -Arg ('Test-OrganizationRelationship', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Test-OrganizationRelationship
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Test-OrganizationRelationship","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [switch]
    ${UseAppTokenOnly},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    ${RequestorIdentity},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${BypassOwnerCheck},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Test-SiteMailbox') `
                            -Arg ('Test-SiteMailbox', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Test-SiteMailbox
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Test-SiteMailbox","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    ${FileData},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Test-TextExtraction') `
                            -Arg ('Test-TextExtraction', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Test-TextExtraction
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Test-TextExtraction","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-Location U:","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","U:","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Unblock-SmbShareAccess","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    ${DisplayName},

    ${SoftDeletedObject},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Name},

    ${WindowsLiveID},

    [switch]
    ${PublicFolder},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Password},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Undo-SoftDeletedMailbox') `
                            -Arg ('Undo-SoftDeletedMailbox', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Undo-SoftDeletedMailbox
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Undo-SoftDeletedMailbox","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Uninstall-Dtc","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Unlock-BitLocker","Function","Public","BitLocker","BitLocker","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Unregister-AppBackgroundTask","Function","Public","AppBackgroundTask","AppBackgroundTask","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Unregister-ClusteredScheduledTask","Function","Public","ScheduledTasks","ScheduledTasks","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Unregister-IscsiSession","Function","Public","iSCSI","iSCSI","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Unregister-ScheduledTask","Function","Public","ScheduledTasks","ScheduledTasks","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Unregister-StorageSubsystem","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Unregister-WindowsDeveloperLicense","Function","Public","WindowsDeveloperLicense","WindowsDeveloperLicense","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Update-Disk","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${Members},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Update-DistributionGroupMember') `
                            -Arg ('Update-DistributionGroupMember', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Update-DistributionGroupMember
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Update-DistributionGroupMember","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Update-HostStorageCache","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${SuppressOAuthWarning},

    [switch]
    ${ForceUpgrade},

    ${OnPremisesCredentials},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${TenantCredentials},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [Alias('wv')]
    ${WarningVariable},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Update-HybridConfiguration') `
                            -Arg ('Update-HybridConfiguration', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Update-HybridConfiguration
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Update-HybridConfiguration","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Update-IscsiTarget","Function","Public","iSCSI","iSCSI","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Update-IscsiTargetPortal","Function","Public","iSCSI","iSCSI","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Update-MpSignature","Function","Public","Defender","Defender","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Update-NetIPsecRule","Function","Public","NetSecurity","NetSecurity","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${ForceOnlineSync},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${CreateAssociatedDumpster},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [switch]
    ${InvokeSynchronizer},

    [switch]
    ${SuppressStatus},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${ReconcileFolders},

    [Alias('ov')]
    ${OutVariable},

    [switch]
    ${FullSync},

    [Alias('cf')]
    [switch]
    ${Confirm},

    ${FolderId},

    ${Identity},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Update-PublicFolderMailbox') `
                            -Arg ('Update-PublicFolderMailbox', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Update-PublicFolderMailbox
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Update-PublicFolderMailbox","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    ${Members},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Update-RoleGroupMember') `
                            -Arg ('Update-RoleGroupMember', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Update-RoleGroupMember
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Update-RoleGroupMember","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('ea')]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    ${ErrorVariable},

    ${Identity},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wa')]
    ${WarningAction},

    ${Target},

    [switch]
    ${FullSync},

    [switch]
    ${BypassOwnerCheck},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Update-SiteMailbox') `
                            -Arg ('Update-SiteMailbox', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Update-SiteMailbox
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Update-SiteMailbox","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Update-SmbMultichannelConnection","Function","Public","SmbShare","SmbShare","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Update-StoragePool","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Update-StorageProviderCache","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-Location V:","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","V:","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    ${Recipients},

    [Alias('ov')]
    ${OutVariable},

    ${Identity},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Validate-OutboundConnector') `
                            -Arg ('Validate-OutboundConnector', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Validate-OutboundConnector
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Validate-OutboundConnector","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-Location W:","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","W:","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
    param(
    
    ${Comment},

    [Alias('ov')]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    ${WarningVariable},

    [Alias('ob')]
    ${OutBuffer},

    [Alias('ev')]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ea')]
    ${ErrorAction},

    [Alias('wa')]
    ${WarningAction},

    [switch]
    ${AsJob})

    Begin {
        try {
            $positionalArguments = & $script:NewObject collections.arraylist
            foreach ($parameterName in $PSBoundParameters.BoundPositionally)
            {
                $null = $positionalArguments.Add( $PSBoundParameters[$parameterName] )
                $null = $PSBoundParameters.Remove($parameterName)
            }
            $positionalArguments.AddRange($args)

            $clientSideParameters = Get-PSImplicitRemotingClientSideParameters $PSBoundParameters $False

            $scriptCmd = { & $script:InvokeCommand `
                            @clientSideParameters `
                            -HideComputerName `
                            -Session (Get-PSImplicitRemotingSession -CommandName 'Write-AdminAuditLog') `
                            -Arg ('Write-AdminAuditLog', $PSBoundParameters, $positionalArguments) `
                            -Script { param($name, $boundParams, $unboundParams) & $name @boundParams @unboundParams } `
                         }

            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($myInvocation.ExpectingInput, $ExecutionContext)
        } catch {
            throw
        }
    }
    Process { 
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
 }
    End { 
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
 }

    # .ForwardHelpTargetName Write-AdminAuditLog
    # .ForwardHelpCategory Function
    # .RemoteHelpRunspace PSSession
","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Write-AdminAuditLog","Function","Public","tmp_uarpksz0.scq","tmp_uarpksz0.scq","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Write-DtcTransactionsTraceSession","Function","Public","MsDtc","MsDtc","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Write-PrinterNfcTag","Function","Public","PrintManagement","PrintManagement","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Write-VolumeCache","Function","Public","Storage","Storage","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-Location X:","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","X:","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-Location Y:","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Y:","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-Location Z:","None",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Z:","Function","Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Add-AppxPackage
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-AppxPackage","Cmdlet","Public","Appx","Appx",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=289343",,,,,"Add-AppxProvisionedPackage
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-AppxProvisionedPackage","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Add-BitsFile
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-BitsFile","Cmdlet","Public","BitsTransfer","BitsTransfer",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Add-CertificateEnrollmentPolicyServer
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-CertificateEnrollmentPolicyServer","Cmdlet","Public","PKI","PKI",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135194",,,,,"
Add-Computer [-DomainName] <string> -Credential <pscredential> [-ComputerName <string[]>] [-LocalCredential <pscredential>] [-UnjoinDomainCredential <pscredential>] [-OUPath <string>] [-Server <string>] [-Unsecure] [-Options <JoinOptions>] [-Restart] [-PassThru] [-NewName <string>] [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]

Add-Computer [-WorkgroupName] <string> [-ComputerName <string[]>] [-LocalCredential <pscredential>] [-Credential <pscredential>] [-Restart] [-PassThru] [-NewName <string>] [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-Computer","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","SupportedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113278",,,,,"
Add-Content [-Path] <string[]> [-Value] <Object[]> [-PassThru] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Force] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [-Encoding <FileSystemCmdletProviderEncoding>] [-Stream <string>] [<CommonParameters>]

Add-Content [-Value] <Object[]> -LiteralPath <string[]> [-PassThru] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Force] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [-Encoding <FileSystemCmdletProviderEncoding>] [-Stream <string>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-Content","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113279",,,,,"
Add-History [[-InputObject] <psobject[]>] [-Passthru] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-History","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Add-JobTrigger
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-JobTrigger","Cmdlet","Public","PSScheduledJob","PSScheduledJob",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Add-KdsRootKey
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-KdsRootKey","Cmdlet","Public","Kds","Kds",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113280",,,,,"
Add-Member -InputObject <psobject> -TypeName <string> [-PassThru] [<CommonParameters>]

Add-Member [-NotePropertyMembers] <IDictionary> -InputObject <psobject> [-TypeName <string>] [-Force] [-PassThru] [<CommonParameters>]

Add-Member [-MemberType] <PSMemberTypes> [-Name] <string> [[-Value] <Object>] [[-SecondValue] <Object>] -InputObject <psobject> [-TypeName <string>] [-Force] [-PassThru] [<CommonParameters>]

Add-Member [-NotePropertyName] <string> [-NotePropertyValue] <Object> -InputObject <psobject> [-TypeName <string>] [-Force] [-PassThru] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-Member","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Add-MsolAdministrativeUnitMember -AdministrativeUnitObjectId <guid> [-AdministrativeUnitMemberObjectId <guid>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-MsolAdministrativeUnitMember","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Add-MsolAdministrativeUnitMember
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-MsolAdministrativeUnitMember","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Add-MsolForeignGroupToRole -ForeignGroupObjectId <guid> -ForeignCompanyObjectId <guid> -RoleObjectId <guid> [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-MsolForeignGroupToRole","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Add-MsolForeignGroupToRole
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-MsolForeignGroupToRole","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Add-MsolGroupMember -GroupObjectId <guid> [-GroupMemberType <GroupMemberType>] [-GroupMemberObjectId <guid>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-MsolGroupMember","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Add-MsolGroupMember
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-MsolGroupMember","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Add-MsolRoleMember -RoleObjectId <guid> [-RoleMemberType <RoleMemberType>] [-RoleMemberObjectId <guid>] [-RoleMemberEmailAddress <string>] [-TenantId <guid>] [<CommonParameters>]

Add-MsolRoleMember -RoleName <string> [-RoleMemberType <RoleMemberType>] [-RoleMemberObjectId <guid>] [-RoleMemberEmailAddress <string>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-MsolRoleMember","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Add-MsolRoleMember
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-MsolRoleMember","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Add-MsolScopedRoleMember -RoleObjectId <guid> -AdministrativeUnitObjectId <guid> [-RoleMemberObjectId <guid>] [-RoleMemberUserPrincipalName <string>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-MsolScopedRoleMember","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Add-MsolScopedRoleMember
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-MsolScopedRoleMember","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113281",,,,,"
Add-PSSnapin [-Name] <string[]> [-PassThru] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-PSSnapin","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Add-RoleMember
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-RoleMember","Cmdlet","Public","SQLASCMDLETS","SQLASCMDLETS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Add-SqlAvailabilityDatabase
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-SqlAvailabilityDatabase","Cmdlet","Public","SQLPS","SQLPS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Add-SqlAvailabilityGroupListenerStaticIp
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-SqlAvailabilityGroupListenerStaticIp","Cmdlet","Public","SQLPS","SQLPS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135195",,,,,"
Add-Type [-TypeDefinition] <string> [-Language <Language>] [-ReferencedAssemblies <string[]>] [-CodeDomProvider <CodeDomProvider>] [-CompilerParameters <CompilerParameters>] [-OutputAssembly <string>] [-OutputType <OutputAssemblyType>] [-PassThru] [-IgnoreWarnings] [<CommonParameters>]

Add-Type [-Name] <string> [-MemberDefinition] <string[]> [-Namespace <string>] [-UsingNamespace <string[]>] [-Language <Language>] [-ReferencedAssemblies <string[]>] [-CodeDomProvider <CodeDomProvider>] [-CompilerParameters <CompilerParameters>] [-OutputAssembly <string>] [-OutputType <OutputAssemblyType>] [-PassThru] [-IgnoreWarnings] [<CommonParameters>]

Add-Type [-Path] <string[]> [-ReferencedAssemblies <string[]>] [-CompilerParameters <CompilerParameters>] [-OutputAssembly <string>] [-OutputType <OutputAssemblyType>] [-PassThru] [-IgnoreWarnings] [<CommonParameters>]

Add-Type -LiteralPath <string[]> [-ReferencedAssemblies <string[]>] [-CompilerParameters <CompilerParameters>] [-OutputAssembly <string>] [-OutputType <OutputAssemblyType>] [-PassThru] [-IgnoreWarnings] [<CommonParameters>]

Add-Type -AssemblyName <string[]> [-PassThru] [-IgnoreWarnings] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-Type","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=289348",,,,,"Add-WindowsDriver
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-WindowsDriver","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=273947",,,,,"Add-WindowsImage
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-WindowsImage","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=289349",,,,,"Add-WindowsPackage
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-WindowsPackage","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Backup-ASDatabase
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Backup-ASDatabase","Cmdlet","Public","SQLASCMDLETS","SQLASCMDLETS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Backup-SqlDatabase
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Backup-SqlDatabase","Cmdlet","Public","SQLPS","SQLPS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135197",,,,,"
Checkpoint-Computer [-Description] <string> [[-RestorePointType] <string>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Checkpoint-Computer","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113282",,,,,"
Clear-Content [-Path] <string[]> [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Force] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [-Stream <string>] [<CommonParameters>]

Clear-Content -LiteralPath <string[]> [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Force] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [-Stream <string>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Clear-Content","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135198",,,,,"
Clear-EventLog [-LogName] <string[]> [[-ComputerName] <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Clear-EventLog","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","SupportedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135199",,,,,"
Clear-History [[-Id] <int[]>] [[-Count] <int>] [-Newest] [-WhatIf] [-Confirm] [<CommonParameters>]

Clear-History [[-Count] <int>] [-CommandLine <string[]>] [-Newest] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Clear-History","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113283",,,,,"
Clear-Item [-Path] <string[]> [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]

Clear-Item -LiteralPath <string[]> [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Clear-Item","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113284",,,,,"
Clear-ItemProperty [-Path] <string[]> [-Name] <string> [-PassThru] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]

Clear-ItemProperty [-Name] <string> -LiteralPath <string[]> [-PassThru] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Clear-ItemProperty","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Clear-KdsCache
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Clear-KdsCache","Cmdlet","Public","Kds","Kds",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Clear-Tpm
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Clear-Tpm","Cmdlet","Public","TrustedPlatformModule","TrustedPlatformModule",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113285",,,,,"
Clear-Variable [-Name] <string[]> [-Include <string[]>] [-Exclude <string[]>] [-Force] [-PassThru] [-Scope <string>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Clear-Variable","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=289350",,,,,"Clear-WindowsCorruptMountPoint
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Clear-WindowsCorruptMountPoint","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113286",,,,,"
Compare-Object [-ReferenceObject] <psobject[]> [-DifferenceObject] <psobject[]> [-SyncWindow <int>] [-Property <Object[]>] [-ExcludeDifferent] [-IncludeEqual] [-PassThru] [-Culture <string>] [-CaseSensitive] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Compare-Object","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Complete-BitsTransfer
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Complete-BitsTransfer","Cmdlet","Public","BitsTransfer","BitsTransfer",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Complete-DtcDiagnosticTransaction
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Complete-DtcDiagnosticTransaction","Cmdlet","Public","MsDtc","MsDtc",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135200",,,,,"
Complete-Transaction [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Complete-Transaction","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Confirm-MsolDomain -DomainName <string> [-SigningCertificate <string>] [-NextSigningCertificate <string>] [-LogOffUri <string>] [-PassiveLogOnUri <string>] [-ActiveLogOnUri <string>] [-IssuerUri <string>] [-FederationBrandName <string>] [-MetadataExchangeUri <string>] [-PreferredAuthenticationProtocol <AuthenticationProtocol>] [-SupportsMfa <bool>] [-DefaultInteractiveAuthenticationMethod <string>] [-OpenIdConnectDiscoveryEndpoint <string>] [-SigningCertificateUpdateStatus <SigningCertificateUpdateStatus>] [-PromptLoginBehavior <PromptLoginBehavior>] [-ForceTakeover <ForceTakeoverOption>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Confirm-MsolDomain","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Confirm-MsolDomain
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Confirm-MsolDomain","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Confirm-MsolEmailVerifiedDomain -DomainName <string> [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Confirm-MsolEmailVerifiedDomain","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Confirm-MsolEmailVerifiedDomain
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Confirm-MsolEmailVerifiedDomain","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Confirm-SecureBootUEFI
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Confirm-SecureBootUEFI","Cmdlet","Public","SecureBoot","SecureBoot",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Connect-MsolService [<CommonParameters>]

Connect-MsolService [-Credential <pscredential>] [<CommonParameters>]

Connect-MsolService [-CurrentCredential] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Connect-MsolService","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Connect-MsolService
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Connect-MsolService","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=210604",,,,,"
Connect-PSSession -Name <string[]> [-ThrottleLimit <int>] [-WhatIf] [-Confirm] [<CommonParameters>]

Connect-PSSession [-Session] <PSSession[]> [-ThrottleLimit <int>] [-WhatIf] [-Confirm] [<CommonParameters>]

Connect-PSSession [-ComputerName] <string[]> [-ApplicationName <string>] [-ConfigurationName <string>] [-Name <string[]>] [-Credential <pscredential>] [-Authentication <AuthenticationMechanism>] [-CertificateThumbprint <string>] [-Port <int>] [-UseSSL] [-SessionOption <PSSessionOption>] [-ThrottleLimit <int>] [-WhatIf] [-Confirm] [<CommonParameters>]

Connect-PSSession -ComputerName <string[]> -InstanceId <guid[]> [-ApplicationName <string>] [-ConfigurationName <string>] [-Credential <pscredential>] [-Authentication <AuthenticationMechanism>] [-CertificateThumbprint <string>] [-Port <int>] [-UseSSL] [-SessionOption <PSSessionOption>] [-ThrottleLimit <int>] [-WhatIf] [-Confirm] [<CommonParameters>]

Connect-PSSession [-ConnectionUri] <uri[]> [-ConfigurationName <string>] [-AllowRedirection] [-Name <string[]>] [-Credential <pscredential>] [-Authentication <AuthenticationMechanism>] [-CertificateThumbprint <string>] [-SessionOption <PSSessionOption>] [-ThrottleLimit <int>] [-WhatIf] [-Confirm] [<CommonParameters>]

Connect-PSSession [-ConnectionUri] <uri[]> -InstanceId <guid[]> [-ConfigurationName <string>] [-AllowRedirection] [-Credential <pscredential>] [-Authentication <AuthenticationMechanism>] [-CertificateThumbprint <string>] [-SessionOption <PSSessionOption>] [-ThrottleLimit <int>] [-WhatIf] [-Confirm] [<CommonParameters>]

Connect-PSSession -InstanceId <guid[]> [-ThrottleLimit <int>] [-WhatIf] [-Confirm] [<CommonParameters>]

Connect-PSSession [-Id] <int[]> [-ThrottleLimit <int>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Connect-PSSession","Cmdlet","Public","Microsoft.PowerShell.Core",,"OwnedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Connect-WSMan
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Connect-WSMan","Cmdlet","Public","Microsoft.WSMan.Management","Microsoft.WSMan.Management",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135201",,,,,"
ConvertFrom-Csv [-InputObject] <psobject[]> [[-Delimiter] <char>] [-Header <string[]>] [<CommonParameters>]

ConvertFrom-Csv [-InputObject] <psobject[]> -UseCulture [-Header <string[]>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","ConvertFrom-Csv","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=217031",,,,,"
ConvertFrom-Json [-InputObject] <string> [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","ConvertFrom-Json","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113287",,,,,"
ConvertFrom-SecureString [-SecureString] <securestring> [[-SecureKey] <securestring>] [<CommonParameters>]

ConvertFrom-SecureString [-SecureString] <securestring> [-Key <byte[]>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","ConvertFrom-SecureString","Cmdlet","Public","Microsoft.PowerShell.Security","Microsoft.PowerShell.Security","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113288",,,,,"
ConvertFrom-StringData [-StringData] <string> [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","ConvertFrom-StringData","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Convert-MsolDomainToFederated -DomainName <string> [-SupportMultipleDomain] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Convert-MsolDomainToFederated","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Convert-MsolDomainToStandard -PasswordFile <string> -SkipUserConversion <bool> -DomainName <string> [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Convert-MsolDomainToStandard","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Convert-MsolFederatedUser -UserPrincipalName <string> [-NewPassword <string>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Convert-MsolFederatedUser","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Convert-MsolFederatedUser
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Convert-MsolFederatedUser","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113289",,,,,"
Convert-Path [-Path] <string[]> [-UseTransaction] [<CommonParameters>]

Convert-Path -LiteralPath <string[]> [-UseTransaction] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Convert-Path","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135203",,,,,"
ConvertTo-Csv [-InputObject] <psobject> [[-Delimiter] <char>] [-NoTypeInformation] [<CommonParameters>]

ConvertTo-Csv [-InputObject] <psobject> [-UseCulture] [-NoTypeInformation] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","ConvertTo-Csv","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113290",,,,,"
ConvertTo-Html [[-Property] <Object[]>] [[-Head] <string[]>] [[-Title] <string>] [[-Body] <string[]>] [-InputObject <psobject>] [-As <string>] [-CssUri <uri>] [-PostContent <string[]>] [-PreContent <string[]>] [<CommonParameters>]

ConvertTo-Html [[-Property] <Object[]>] [-InputObject <psobject>] [-As <string>] [-Fragment] [-PostContent <string[]>] [-PreContent <string[]>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","ConvertTo-Html","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=217032",,,,,"
ConvertTo-Json [-InputObject] <Object> [-Depth <int>] [-Compress] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","ConvertTo-Json","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113291",,,,,"
ConvertTo-SecureString [-String] <string> [[-SecureKey] <securestring>] [<CommonParameters>]

ConvertTo-SecureString [-String] <string> [-AsPlainText] [-Force] [<CommonParameters>]

ConvertTo-SecureString [-String] <string> [-Key <byte[]>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","ConvertTo-SecureString","Cmdlet","Public","Microsoft.PowerShell.Security","Microsoft.PowerShell.Security","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"ConvertTo-TpmOwnerAuth
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","ConvertTo-TpmOwnerAuth","Cmdlet","Public","TrustedPlatformModule","TrustedPlatformModule",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135204",,,,,"
ConvertTo-Xml [-InputObject] <psobject> [-Depth <int>] [-NoTypeInformation] [-As <string>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","ConvertTo-Xml","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Convert-UrnToPath
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Convert-UrnToPath","Cmdlet","Public","SQLPS","SQLPS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113292",,,,,"
Copy-Item [-Path] <string[]> [[-Destination] <string>] [-Container] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Recurse] [-PassThru] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]

Copy-Item [[-Destination] <string>] -LiteralPath <string[]> [-Container] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Recurse] [-PassThru] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Copy-Item","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113293",,,,,"
Copy-ItemProperty [-Path] <string[]> [-Destination] <string> [-Name] <string> [-PassThru] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]

Copy-ItemProperty [-Destination] <string> [-Name] <string> -LiteralPath <string[]> [-PassThru] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Copy-ItemProperty","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135206",,,,,"
Debug-Process [-Name] <string[]> [-WhatIf] [-Confirm] [<CommonParameters>]

Debug-Process [-Id] <int[]> [-WhatIf] [-Confirm] [<CommonParameters>]

Debug-Process -InputObject <Process[]> [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Debug-Process","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Decode-SqlName
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Decode-SqlName","Cmdlet","Public","SQLPS","SQLPS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Disable-AppBackgroundTaskDiagnosticLog
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-AppBackgroundTaskDiagnosticLog","Cmdlet","Public","AppBackgroundTask","AppBackgroundTask",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135207",,,,,"
Disable-ComputerRestore [-Drive] <string[]> [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-ComputerRestore","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Disable-JobTrigger
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-JobTrigger","Cmdlet","Public","PSScheduledJob","PSScheduledJob",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113294",,,,,"
Disable-PSBreakpoint [-Breakpoint] <Breakpoint[]> [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]

Disable-PSBreakpoint [-Id] <int[]> [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-PSBreakpoint","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=144298",,,,,"
Disable-PSRemoting [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-PSRemoting","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=144299",,,,,"
Disable-PSSessionConfiguration [[-Name] <string[]>] [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-PSSessionConfiguration","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Disable-ScheduledJob
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-ScheduledJob","Cmdlet","Public","PSScheduledJob","PSScheduledJob",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Disable-SqlAlwaysOn
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-SqlAlwaysOn","Cmdlet","Public","SQLPS","SQLPS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Disable-TlsSessionTicketKey
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-TlsSessionTicketKey","Cmdlet","Public","TLS","TLS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Disable-TpmAutoProvisioning
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-TpmAutoProvisioning","Cmdlet","Public","TrustedPlatformModule","TrustedPlatformModule",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Disable-WindowsErrorReporting
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-WindowsErrorReporting","Cmdlet","Public","WindowsErrorReporting","WindowsErrorReporting",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=289351",,,,,"Disable-WindowsOptionalFeature
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-WindowsOptionalFeature","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Disable-WSManCredSSP
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-WSManCredSSP","Cmdlet","Public","Microsoft.WSMan.Management","Microsoft.WSMan.Management",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=210605",,,,,"
Disconnect-PSSession [-Session] <PSSession[]> [-IdleTimeoutSec <int>] [-OutputBufferingMode <OutputBufferingMode>] [-ThrottleLimit <int>] [-WhatIf] [-Confirm] [<CommonParameters>]

Disconnect-PSSession -Name <string[]> [-IdleTimeoutSec <int>] [-OutputBufferingMode <OutputBufferingMode>] [-ThrottleLimit <int>] [-WhatIf] [-Confirm] [<CommonParameters>]

Disconnect-PSSession [-Id] <int[]> [-IdleTimeoutSec <int>] [-OutputBufferingMode <OutputBufferingMode>] [-ThrottleLimit <int>] [-WhatIf] [-Confirm] [<CommonParameters>]

Disconnect-PSSession -InstanceId <guid[]> [-IdleTimeoutSec <int>] [-OutputBufferingMode <OutputBufferingMode>] [-ThrottleLimit <int>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disconnect-PSSession","Cmdlet","Public","Microsoft.PowerShell.Core",,"OwnedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Disconnect-WSMan
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disconnect-WSMan","Cmdlet","Public","Microsoft.WSMan.Management","Microsoft.WSMan.Management",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=289352",,,,,"Dismount-WindowsImage
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Dismount-WindowsImage","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Enable-AppBackgroundTaskDiagnosticLog
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-AppBackgroundTaskDiagnosticLog","Cmdlet","Public","AppBackgroundTask","AppBackgroundTask",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135209",,,,,"
Enable-ComputerRestore [-Drive] <string[]> [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-ComputerRestore","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Enable-JobTrigger
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-JobTrigger","Cmdlet","Public","PSScheduledJob","PSScheduledJob",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113295",,,,,"
Enable-PSBreakpoint [-Id] <int[]> [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]

Enable-PSBreakpoint [-Breakpoint] <Breakpoint[]> [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-PSBreakpoint","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=144300",,,,,"
Enable-PSRemoting [-Force] [-SkipNetworkProfileCheck] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-PSRemoting","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=144301",,,,,"
Enable-PSSessionConfiguration [[-Name] <string[]>] [-Force] [-SecurityDescriptorSddl <string>] [-SkipNetworkProfileCheck] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-PSSessionConfiguration","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Enable-ScheduledJob
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-ScheduledJob","Cmdlet","Public","PSScheduledJob","PSScheduledJob",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Enable-SqlAlwaysOn
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-SqlAlwaysOn","Cmdlet","Public","SQLPS","SQLPS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Enable-TlsSessionTicketKey
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-TlsSessionTicketKey","Cmdlet","Public","TLS","TLS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Enable-TpmAutoProvisioning
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-TpmAutoProvisioning","Cmdlet","Public","TrustedPlatformModule","TrustedPlatformModule",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Enable-WindowsErrorReporting
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-WindowsErrorReporting","Cmdlet","Public","WindowsErrorReporting","WindowsErrorReporting",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=289353",,,,,"Enable-WindowsOptionalFeature
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-WindowsOptionalFeature","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Enable-WSManCredSSP
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-WSManCredSSP","Cmdlet","Public","Microsoft.WSMan.Management","Microsoft.WSMan.Management",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Encode-SqlName
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Encode-SqlName","Cmdlet","Public","SQLPS","SQLPS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135210",,,,,"
Enter-PSSession [-ComputerName] <string> [-EnableNetworkAccess] [-Credential <pscredential>] [-Port <int>] [-UseSSL] [-ConfigurationName <string>] [-ApplicationName <string>] [-SessionOption <PSSessionOption>] [-Authentication <AuthenticationMechanism>] [-CertificateThumbprint <string>] [<CommonParameters>]

Enter-PSSession [[-Session] <PSSession>] [<CommonParameters>]

Enter-PSSession [[-ConnectionUri] <uri>] [-EnableNetworkAccess] [-Credential <pscredential>] [-ConfigurationName <string>] [-AllowRedirection] [-SessionOption <PSSessionOption>] [-Authentication <AuthenticationMechanism>] [-CertificateThumbprint <string>] [<CommonParameters>]

Enter-PSSession [-InstanceId <guid>] [<CommonParameters>]

Enter-PSSession [[-Id] <int>] [<CommonParameters>]

Enter-PSSession [-Name <string>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enter-PSSession","Cmdlet","Public","Microsoft.PowerShell.Core",,"OwnedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135212",,,,,"
Exit-PSSession [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Exit-PSSession","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=273948",,,,,"Expand-WindowsImage
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Expand-WindowsImage","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113296",,,,,"
Export-Alias [-Path] <string> [[-Name] <string[]>] [-PassThru] [-As <ExportAliasFormat>] [-Append] [-Force] [-NoClobber] [-Description <string>] [-Scope <string>] [-WhatIf] [-Confirm] [<CommonParameters>]

Export-Alias [[-Name] <string[]>] -LiteralPath <string> [-PassThru] [-As <ExportAliasFormat>] [-Append] [-Force] [-NoClobber] [-Description <string>] [-Scope <string>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Export-Alias","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Export-BinaryMiLog
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Export-BinaryMiLog","Cmdlet","Public","CimCmdlets","CimCmdlets",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Export-Certificate
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Export-Certificate","Cmdlet","Public","PKI","PKI",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113297",,,,,"
Export-Clixml [-Path] <string> -InputObject <psobject> [-Depth <int>] [-Force] [-NoClobber] [-Encoding <string>] [-WhatIf] [-Confirm] [<CommonParameters>]

Export-Clixml -LiteralPath <string> -InputObject <psobject> [-Depth <int>] [-Force] [-NoClobber] [-Encoding <string>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Export-Clixml","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113298",,,,,"
Export-Console [[-Path] <string>] [-Force] [-NoClobber] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Export-Console","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Export-Counter
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Export-Counter","Cmdlet","Public","Microsoft.PowerShell.Diagnostics","Microsoft.PowerShell.Diagnostics",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113299",,,,,"
Export-Csv [[-Path] <string>] [[-Delimiter] <char>] -InputObject <psobject> [-LiteralPath <string>] [-Force] [-NoClobber] [-Encoding <string>] [-Append] [-NoTypeInformation] [-WhatIf] [-Confirm] [<CommonParameters>]

Export-Csv [[-Path] <string>] -InputObject <psobject> [-LiteralPath <string>] [-Force] [-NoClobber] [-Encoding <string>] [-Append] [-UseCulture] [-NoTypeInformation] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Export-Csv","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=144302",,,,,"
Export-FormatData -InputObject <ExtendedTypeDefinition[]> -Path <string> [-Force] [-NoClobber] [-IncludeScriptBlock] [<CommonParameters>]

Export-FormatData -InputObject <ExtendedTypeDefinition[]> -LiteralPath <string> [-Force] [-NoClobber] [-IncludeScriptBlock] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Export-FormatData","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=141551",,,,,"
Export-ModuleMember [[-Function] <string[]>] [-Cmdlet <string[]>] [-Variable <string[]>] [-Alias <string[]>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Export-ModuleMember","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Export-PfxCertificate
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Export-PfxCertificate","Cmdlet","Public","PKI","PKI",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135213",,,,,"
Export-PSSession [-Session] <PSSession> [-OutputModule] <string> [[-CommandName] <string[]>] [[-FormatTypeName] <string[]>] [-Force] [-Encoding <string>] [-AllowClobber] [-ArgumentList <Object[]>] [-CommandType <CommandTypes>] [-Module <string[]>] [-Certificate <X509Certificate2>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Export-PSSession","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Export-StartLayout
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Export-StartLayout","Cmdlet","Public","StartScreen","StartScreen",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Export-TlsSessionTicketKey
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Export-TlsSessionTicketKey","Cmdlet","Public","TLS","TLS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?linkid=325581",,,,,"Export-WindowsDriver
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Export-WindowsDriver","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=273949",,,,,"Export-WindowsImage
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Export-WindowsImage","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113300",,,,,"
ForEach-Object [-Process] <scriptblock[]> [-InputObject <psobject>] [-Begin <scriptblock>] [-End <scriptblock>] [-RemainingScripts <scriptblock[]>] [-WhatIf] [-Confirm] [<CommonParameters>]

ForEach-Object [-MemberName] <string> [-InputObject <psobject>] [-ArgumentList <Object[]>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","ForEach-Object","Cmdlet","Public","Microsoft.PowerShell.Core",,"None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113301",,,,,"
Format-Custom [[-Property] <Object[]>] [-Depth <int>] [-GroupBy <Object>] [-View <string>] [-ShowError] [-DisplayError] [-Force] [-Expand <string>] [-InputObject <psobject>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Format-Custom","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113302",,,,,"
Format-List [[-Property] <Object[]>] [-GroupBy <Object>] [-View <string>] [-ShowError] [-DisplayError] [-Force] [-Expand <string>] [-InputObject <psobject>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Format-List","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Format-SecureBootUEFI
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Format-SecureBootUEFI","Cmdlet","Public","SecureBoot","SecureBoot",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113303",,,,,"
Format-Table [[-Property] <Object[]>] [-AutoSize] [-HideTableHeaders] [-Wrap] [-GroupBy <Object>] [-View <string>] [-ShowError] [-DisplayError] [-Force] [-Expand <string>] [-InputObject <psobject>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Format-Table","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113304",,,,,"
Format-Wide [[-Property] <Object>] [-AutoSize] [-Column <int>] [-GroupBy <Object>] [-View <string>] [-ShowError] [-DisplayError] [-Force] [-Expand <string>] [-InputObject <psobject>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Format-Wide","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113305",,,,,"
Get-Acl [[-Path] <string[]>] [-Audit] [-AllCentralAccessPolicies] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-UseTransaction] [<CommonParameters>]

Get-Acl -InputObject <psobject> [-Audit] [-AllCentralAccessPolicies] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-UseTransaction] [<CommonParameters>]

Get-Acl [-LiteralPath <string[]>] [-Audit] [-AllCentralAccessPolicies] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-UseTransaction] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Acl","Cmdlet","Public","Microsoft.PowerShell.Security","Microsoft.PowerShell.Security","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113306",,,,,"
Get-Alias [[-Name] <string[]>] [-Exclude <string[]>] [-Scope <string>] [<CommonParameters>]

Get-Alias [-Exclude <string[]>] [-Scope <string>] [-Definition <string[]>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Alias","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-AppxPackage
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-AppxPackage","Cmdlet","Public","Appx","Appx",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-AppxPackageManifest
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-AppxPackageManifest","Cmdlet","Public","Appx","Appx",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=289354",,,,,"Get-AppxProvisionedPackage
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-AppxProvisionedPackage","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113307",,,,,"
Get-AuthenticodeSignature [-FilePath] <string[]> [<CommonParameters>]

Get-AuthenticodeSignature -LiteralPath <string[]> [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-AuthenticodeSignature","Cmdlet","Public","Microsoft.PowerShell.Security","Microsoft.PowerShell.Security","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-BitsTransfer
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-BitsTransfer","Cmdlet","Public","BitsTransfer","BitsTransfer",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-Certificate
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Certificate","Cmdlet","Public","PKI","PKI",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-CertificateAutoEnrollmentPolicy
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CertificateAutoEnrollmentPolicy","Cmdlet","Public","PKI","PKI",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-CertificateEnrollmentPolicyServer
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CertificateEnrollmentPolicyServer","Cmdlet","Public","PKI","PKI",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-CertificateNotificationTask
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CertificateNotificationTask","Cmdlet","Public","PKI","PKI",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113308",,,,,"
Get-ChildItem [[-Path] <string[]>] [[-Filter] <string>] [-Include <string[]>] [-Exclude <string[]>] [-Recurse] [-Force] [-Name] [-UseTransaction] [-Attributes <FlagsExpression[FileAttributes]>] [-Directory] [-File] [-Hidden] [-ReadOnly] [-System] [<CommonParameters>]

Get-ChildItem [[-Filter] <string>] -LiteralPath <string[]> [-Include <string[]>] [-Exclude <string[]>] [-Recurse] [-Force] [-Name] [-UseTransaction] [-Attributes <FlagsExpression[FileAttributes]>] [-Directory] [-File] [-Hidden] [-ReadOnly] [-System] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ChildItem","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-CimAssociatedInstance
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CimAssociatedInstance","Cmdlet","Public","CimCmdlets","CimCmdlets",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-CimClass
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CimClass","Cmdlet","Public","CimCmdlets","CimCmdlets",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-CimInstance
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CimInstance","Cmdlet","Public","CimCmdlets","CimCmdlets",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-CimSession
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CimSession","Cmdlet","Public","CimCmdlets","CimCmdlets",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=394370",,,,,"
Get-CmsMessage [-Content] <string> [<CommonParameters>]

Get-CmsMessage [-Path] <string> [<CommonParameters>]

Get-CmsMessage [-LiteralPath] <string> [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CmsMessage","Cmdlet","Public","Microsoft.PowerShell.Security","Microsoft.PowerShell.Security","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113309",,,,,"
Get-Command [[-ArgumentList] <Object[]>] [-Verb <string[]>] [-Noun <string[]>] [-Module <string[]>] [-TotalCount <int>] [-Syntax] [-All] [-ListImported] [-ParameterName <string[]>] [-ParameterType <PSTypeName[]>] [<CommonParameters>]

Get-Command [[-Name] <string[]>] [[-ArgumentList] <Object[]>] [-Module <string[]>] [-CommandType <CommandTypes>] [-TotalCount <int>] [-Syntax] [-All] [-ListImported] [-ParameterName <string[]>] [-ParameterType <PSTypeName[]>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Command","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135215",,,,,"
Get-ComputerRestorePoint [[-RestorePoint] <int[]>] [<CommonParameters>]

Get-ComputerRestorePoint -LastStatus [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ComputerRestorePoint","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113310",,,,,"
Get-Content [-Path] <string[]> [-ReadCount <long>] [-TotalCount <long>] [-Tail <int>] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Force] [-Credential <pscredential>] [-UseTransaction] [-Delimiter <string>] [-Wait] [-Raw] [-Encoding <FileSystemCmdletProviderEncoding>] [-Stream <string>] [<CommonParameters>]

Get-Content -LiteralPath <string[]> [-ReadCount <long>] [-TotalCount <long>] [-Tail <int>] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Force] [-Credential <pscredential>] [-UseTransaction] [-Delimiter <string>] [-Wait] [-Raw] [-Encoding <FileSystemCmdletProviderEncoding>] [-Stream <string>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Content","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=219982",,,,,"
Get-ControlPanelItem [[-Name] <string[]>] [-Category <string[]>] [<CommonParameters>]

Get-ControlPanelItem -CanonicalName <string[]> [-Category <string[]>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ControlPanelItem","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-Counter
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Counter","Cmdlet","Public","Microsoft.PowerShell.Diagnostics","Microsoft.PowerShell.Diagnostics",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113311",,,,,"
Get-Credential [-Credential] <pscredential> [<CommonParameters>]

Get-Credential [[-UserName] <string>] -Message <string> [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Credential","Cmdlet","Public","Microsoft.PowerShell.Security","Microsoft.PowerShell.Security","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113312",,,,,"
Get-Culture [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Culture","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-DAPolicyChange
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DAPolicyChange","Cmdlet","Public","NetSecurity","NetSecurity",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113313",,,,,"
Get-Date [[-Date] <datetime>] [-Year <int>] [-Month <int>] [-Day <int>] [-Hour <int>] [-Minute <int>] [-Second <int>] [-Millisecond <int>] [-DisplayHint <DisplayHintType>] [-Format <string>] [<CommonParameters>]

Get-Date [[-Date] <datetime>] [-Year <int>] [-Month <int>] [-Day <int>] [-Hour <int>] [-Minute <int>] [-Second <int>] [-Millisecond <int>] [-DisplayHint <DisplayHintType>] [-UFormat <string>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Date","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113453",,,,,"
Get-Event [[-SourceIdentifier] <string>] [<CommonParameters>]

Get-Event [-EventIdentifier] <int> [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Event","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113314",,,,,"
Get-EventLog [-LogName] <string> [[-InstanceId] <long[]>] [-ComputerName <string[]>] [-Newest <int>] [-After <datetime>] [-Before <datetime>] [-UserName <string[]>] [-Index <int[]>] [-EntryType <string[]>] [-Source <string[]>] [-Message <string>] [-AsBaseObject] [<CommonParameters>]

Get-EventLog [-ComputerName <string[]>] [-List] [-AsString] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-EventLog","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","SupportedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135155",,,,,"
Get-EventSubscriber [[-SourceIdentifier] <string>] [-Force] [<CommonParameters>]

Get-EventSubscriber [-SubscriptionId] <int> [-Force] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-EventSubscriber","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113315",,,,,"
Get-ExecutionPolicy [[-Scope] <ExecutionPolicyScope>] [-List] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ExecutionPolicy","Cmdlet","Public","Microsoft.PowerShell.Security","Microsoft.PowerShell.Security","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=144303",,,,,"
Get-FormatData [[-TypeName] <string[]>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-FormatData","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113316",,,,,"
Get-Help [[-Name] <string>] [-Path <string>] [-Category <string[]>] [-Component <string[]>] [-Functionality <string[]>] [-Role <string[]>] [-Full] [<CommonParameters>]

Get-Help [[-Name] <string>] -Detailed [-Path <string>] [-Category <string[]>] [-Component <string[]>] [-Functionality <string[]>] [-Role <string[]>] [<CommonParameters>]

Get-Help [[-Name] <string>] -Examples [-Path <string>] [-Category <string[]>] [-Component <string[]>] [-Functionality <string[]>] [-Role <string[]>] [<CommonParameters>]

Get-Help [[-Name] <string>] -Parameter <string> [-Path <string>] [-Category <string[]>] [-Component <string[]>] [-Functionality <string[]>] [-Role <string[]>] [<CommonParameters>]

Get-Help [[-Name] <string>] -Online [-Path <string>] [-Category <string[]>] [-Component <string[]>] [-Functionality <string[]>] [-Role <string[]>] [<CommonParameters>]

Get-Help [[-Name] <string>] -ShowWindow [-Path <string>] [-Category <string[]>] [-Component <string[]>] [-Functionality <string[]>] [-Role <string[]>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Help","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113317",,,,,"
Get-History [[-Id] <long[]>] [[-Count] <int>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-History","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113318",,,,,"
Get-Host [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Host","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135217",,,,,"
Get-HotFix [[-Id] <string[]>] [-ComputerName <string[]>] [-Credential <pscredential>] [<CommonParameters>]

Get-HotFix [-Description <string[]>] [-ComputerName <string[]>] [-Credential <pscredential>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-HotFix","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","SupportedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113319",,,,,"
Get-Item [-Path] <string[]> [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Force] [-Credential <pscredential>] [-UseTransaction] [-Stream <string[]>] [<CommonParameters>]

Get-Item -LiteralPath <string[]> [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Force] [-Credential <pscredential>] [-UseTransaction] [-Stream <string[]>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Item","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113320",,,,,"
Get-ItemProperty [-Path] <string[]> [[-Name] <string[]>] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-UseTransaction] [<CommonParameters>]

Get-ItemProperty [[-Name] <string[]>] -LiteralPath <string[]> [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-UseTransaction] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ItemProperty","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113328",,,,,"
Get-Job [[-Id] <int[]>] [-IncludeChildJob] [-ChildJobState <JobState>] [-HasMoreData <bool>] [-Before <datetime>] [-After <datetime>] [-Newest <int>] [<CommonParameters>]

Get-Job [-IncludeChildJob] [-ChildJobState <JobState>] [-HasMoreData <bool>] [-Before <datetime>] [-After <datetime>] [-Newest <int>] [-Command <string[]>] [<CommonParameters>]

Get-Job [-InstanceId] <guid[]> [-IncludeChildJob] [-ChildJobState <JobState>] [-HasMoreData <bool>] [-Before <datetime>] [-After <datetime>] [-Newest <int>] [<CommonParameters>]

Get-Job [-Name] <string[]> [-IncludeChildJob] [-ChildJobState <JobState>] [-HasMoreData <bool>] [-Before <datetime>] [-After <datetime>] [-Newest <int>] [<CommonParameters>]

Get-Job [-State] <JobState> [-IncludeChildJob] [-ChildJobState <JobState>] [-HasMoreData <bool>] [-Before <datetime>] [-After <datetime>] [-Newest <int>] [<CommonParameters>]

Get-Job [-Filter] <hashtable> [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Job","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-JobTrigger
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-JobTrigger","Cmdlet","Public","PSScheduledJob","PSScheduledJob",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-KdsConfiguration
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-KdsConfiguration","Cmdlet","Public","Kds","Kds",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-KdsRootKey
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-KdsRootKey","Cmdlet","Public","Kds","Kds",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113321",,,,,"
Get-Location [-PSProvider <string[]>] [-PSDrive <string[]>] [-UseTransaction] [<CommonParameters>]

Get-Location [-Stack] [-StackName <string[]>] [-UseTransaction] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Location","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113322",,,,,"
Get-Member [[-Name] <string[]>] [-InputObject <psobject>] [-MemberType <PSMemberTypes>] [-View <PSMemberViewTypes>] [-Static] [-Force] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Member","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=141552",,,,,"
Get-Module [[-Name] <string[]>] [-FullyQualifiedName <ModuleSpecification[]>] [-All] [<CommonParameters>]

Get-Module [[-Name] <string[]>] -CimSession <CimSession> [-FullyQualifiedName <ModuleSpecification[]>] [-ListAvailable] [-Refresh] [-CimResourceUri <uri>] [-CimNamespace <string>] [<CommonParameters>]

Get-Module [[-Name] <string[]>] -PSSession <PSSession> [-FullyQualifiedName <ModuleSpecification[]>] [-ListAvailable] [-Refresh] [<CommonParameters>]

Get-Module [[-Name] <string[]>] -ListAvailable [-FullyQualifiedName <ModuleSpecification[]>] [-All] [-Refresh] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Module","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Get-MsolAccountSku [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolAccountSku","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-MsolAccountSku
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolAccountSku","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Get-MsolAdministrativeUnit [-UserObjectId <guid>] [-UserPrincipalName <string>] [-SearchString <string>] [-MaxResults <int>] [-TenantId <guid>] [<CommonParameters>]

Get-MsolAdministrativeUnit -ObjectId <guid> [-TenantId <guid>] [<CommonParameters>]

Get-MsolAdministrativeUnit -All [-UserObjectId <guid>] [-UserPrincipalName <string>] [-SearchString <string>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolAdministrativeUnit","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-MsolAdministrativeUnit
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolAdministrativeUnit","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Get-MsolAdministrativeUnitMember [-AdministrativeUnitObjectId <guid>] [-MaxResults <int>] [-TenantId <guid>] [<CommonParameters>]

Get-MsolAdministrativeUnitMember -All [-AdministrativeUnitObjectId <guid>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolAdministrativeUnitMember","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-MsolAdministrativeUnitMember
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolAdministrativeUnitMember","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Get-MsolCompanyInformation [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolCompanyInformation","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-MsolCompanyInformation
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolCompanyInformation","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Get-MsolContact [-HasErrorsOnly <bool>] [-SearchString <string>] [-MaxResults <int>] [-TenantId <guid>] [<CommonParameters>]

Get-MsolContact -ObjectId <guid> [-TenantId <guid>] [<CommonParameters>]

Get-MsolContact -All [-HasErrorsOnly <bool>] [-SearchString <string>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolContact","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-MsolContact
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolContact","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Get-MsolDirSyncConfiguration [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolDirSyncConfiguration","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-MsolDirSyncConfiguration
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolDirSyncConfiguration","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Get-MsolDirSyncFeatures [-Feature <string>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolDirSyncFeatures","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-MsolDirSyncFeatures
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolDirSyncFeatures","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Get-MsolDirSyncProvisioningError [-ErrorCategory <string>] [-PropertyName <string>] [-PropertyValue <string>] [-SearchString <string>] [-SortField <SortField>] [-SortDirection <SortDirection>] [-MaxResults <int>] [-TenantId <guid>] [<CommonParameters>]

Get-MsolDirSyncProvisioningError -All [-ErrorCategory <string>] [-PropertyName <string>] [-PropertyValue <string>] [-SearchString <string>] [-SortField <SortField>] [-SortDirection <SortDirection>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolDirSyncProvisioningError","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-MsolDirSyncProvisioningError
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolDirSyncProvisioningError","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Get-MsolDomain [-Status <DomainStatus>] [-Authentication <DomainAuthenticationType>] [-Capability <DomainCapabilities>] [-TenantId <guid>] [<CommonParameters>]

Get-MsolDomain -DomainName <string> [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolDomain","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-MsolDomain
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolDomain","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Get-MsolDomainFederationSettings -DomainName <string> [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolDomainFederationSettings","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-MsolDomainFederationSettings
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolDomainFederationSettings","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Get-MsolDomainVerificationDns -DomainName <string> [-Mode <DomainVerificationMode>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolDomainVerificationDns","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-MsolDomainVerificationDns
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolDomainVerificationDns","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Get-MsolFederationProperty -DomainName <string> [-SupportMultipleDomain] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolFederationProperty","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Get-MsolGroup [-UserObjectId <guid>] [-IsAgentRole] [-UserPrincipalName <string>] [-GroupType <GroupType>] [-HasErrorsOnly] [-HasLicenseErrorsOnly <bool>] [-SearchString <string>] [-MaxResults <int>] [-TenantId <guid>] [<CommonParameters>]

Get-MsolGroup -ObjectId <guid> [-TenantId <guid>] [<CommonParameters>]

Get-MsolGroup -All [-UserObjectId <guid>] [-IsAgentRole] [-UserPrincipalName <string>] [-GroupType <GroupType>] [-HasErrorsOnly] [-HasLicenseErrorsOnly <bool>] [-SearchString <string>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolGroup","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-MsolGroup
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolGroup","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Get-MsolGroupMember [-GroupObjectId <guid>] [-MemberObjectTypes <string[]>] [-SearchString <string>] [-MaxResults <int>] [-TenantId <guid>] [<CommonParameters>]

Get-MsolGroupMember -All [-GroupObjectId <guid>] [-MemberObjectTypes <string[]>] [-SearchString <string>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolGroupMember","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-MsolGroupMember
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolGroupMember","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Get-MsolHasObjectsWithDirSyncProvisioningErrors [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolHasObjectsWithDirSyncProvisioningErrors","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-MsolHasObjectsWithDirSyncProvisioningErrors
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolHasObjectsWithDirSyncProvisioningErrors","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Get-MsolPartnerContract [-DomainName <string>] [-SearchKey <PartnerContractSearchKey>] [-MaxResults <int>] [-TenantId <guid>] [<CommonParameters>]

Get-MsolPartnerContract -All [-DomainName <string>] [-SearchKey <PartnerContractSearchKey>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolPartnerContract","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-MsolPartnerContract
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolPartnerContract","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Get-MsolPartnerInformation [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolPartnerInformation","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-MsolPartnerInformation
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolPartnerInformation","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Get-MsolPasswordPolicy -DomainName <string> [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolPasswordPolicy","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-MsolPasswordPolicy
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolPasswordPolicy","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Get-MsolRole [-TenantId <guid>] [<CommonParameters>]

Get-MsolRole -ObjectId <guid> [-TenantId <guid>] [<CommonParameters>]

Get-MsolRole -RoleName <string> [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolRole","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-MsolRole
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolRole","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Get-MsolRoleMember [-RoleObjectId <guid>] [-MemberObjectTypes <string[]>] [-SearchString <string>] [-MaxResults <int>] [-TenantId <guid>] [<CommonParameters>]

Get-MsolRoleMember -All [-RoleObjectId <guid>] [-MemberObjectTypes <string[]>] [-SearchString <string>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolRoleMember","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-MsolRoleMember
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolRoleMember","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Get-MsolScopedRoleMember [-AdministrativeUnitObjectId <guid>] [-RoleObjectId <guid>] [-MaxResults <int>] [-TenantId <guid>] [<CommonParameters>]

Get-MsolScopedRoleMember -All [-AdministrativeUnitObjectId <guid>] [-RoleObjectId <guid>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolScopedRoleMember","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-MsolScopedRoleMember
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolScopedRoleMember","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Get-MsolServicePrincipal [-SearchString <string>] [-MaxResults <int>] [-TenantId <guid>] [<CommonParameters>]

Get-MsolServicePrincipal -ObjectId <guid> [-TenantId <guid>] [<CommonParameters>]

Get-MsolServicePrincipal -AppPrincipalId <guid> [-TenantId <guid>] [<CommonParameters>]

Get-MsolServicePrincipal -ServicePrincipalName <string> [-TenantId <guid>] [<CommonParameters>]

Get-MsolServicePrincipal -All [-SearchString <string>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolServicePrincipal","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-MsolServicePrincipal
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolServicePrincipal","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Get-MsolServicePrincipalCredential -ObjectId <guid> -ReturnKeyValues <bool> [-TenantId <guid>] [<CommonParameters>]

Get-MsolServicePrincipalCredential -ReturnKeyValues <bool> -AppPrincipalId <guid> [-TenantId <guid>] [<CommonParameters>]

Get-MsolServicePrincipalCredential -ReturnKeyValues <bool> -ServicePrincipalName <string> [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolServicePrincipalCredential","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-MsolServicePrincipalCredential
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolServicePrincipalCredential","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Get-MsolSubscription [-TenantId <guid>] [<CommonParameters>]

Get-MsolSubscription -SubscriptionId <guid> [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolSubscription","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-MsolSubscription
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolSubscription","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Get-MsolUser [-ReturnDeletedUsers] [-City <string>] [-Country <string>] [-Department <string>] [-DomainName <string>] [-EnabledFilter <UserEnabledFilter>] [-State <string>] [-Synchronized] [-Title <string>] [-HasErrorsOnly] [-LicenseReconciliationNeededOnly] [-UnlicensedUsersOnly] [-UsageLocation <string>] [-SearchString <string>] [-MaxResults <int>] [-TenantId <guid>] [<CommonParameters>]

Get-MsolUser -ObjectId <guid> [-ReturnDeletedUsers] [-TenantId <guid>] [<CommonParameters>]

Get-MsolUser -UserPrincipalName <string> [-ReturnDeletedUsers] [-TenantId <guid>] [<CommonParameters>]

Get-MsolUser -All [-ReturnDeletedUsers] [-City <string>] [-Country <string>] [-Department <string>] [-DomainName <string>] [-EnabledFilter <UserEnabledFilter>] [-State <string>] [-Synchronized] [-Title <string>] [-HasErrorsOnly] [-LicenseReconciliationNeededOnly] [-UnlicensedUsersOnly] [-UsageLocation <string>] [-SearchString <string>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolUser","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-MsolUser
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolUser","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Get-MsolUserByStrongAuthentication [-RoleObjectId <guid>] [-Requirements <StrongAuthenticationRequirement[]>] [-RequirementUnsetOnly] [-SearchString <string>] [-MaxResults <int>] [-TenantId <guid>] [<CommonParameters>]

Get-MsolUserByStrongAuthentication -All [-RoleObjectId <guid>] [-Requirements <StrongAuthenticationRequirement[]>] [-RequirementUnsetOnly] [-SearchString <string>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolUserByStrongAuthentication","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-MsolUserByStrongAuthentication
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolUserByStrongAuthentication","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Get-MsolUserRole -ObjectId <guid> [-TenantId <guid>] [<CommonParameters>]

Get-MsolUserRole -UserPrincipalName <string> [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolUserRole","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-MsolUserRole
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MsolUserRole","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113323",,,,,"
Get-PfxCertificate [-FilePath] <string[]> [<CommonParameters>]

Get-PfxCertificate -LiteralPath <string[]> [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PfxCertificate","Cmdlet","Public","Microsoft.PowerShell.Security","Microsoft.PowerShell.Security","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-PfxData
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PfxData","Cmdlet","Public","PKI","PKI",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113324",,,,,"
Get-Process [[-Name] <string[]>] [-ComputerName <string[]>] [-Module] [-FileVersionInfo] [<CommonParameters>]

Get-Process [[-Name] <string[]>] -IncludeUserName [<CommonParameters>]

Get-Process -Id <int[]> -IncludeUserName [<CommonParameters>]

Get-Process -Id <int[]> [-ComputerName <string[]>] [-Module] [-FileVersionInfo] [<CommonParameters>]

Get-Process -InputObject <Process[]> -IncludeUserName [<CommonParameters>]

Get-Process -InputObject <Process[]> [-ComputerName <string[]>] [-Module] [-FileVersionInfo] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Process","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","SupportedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113325",,,,,"
Get-PSBreakpoint [[-Script] <string[]>] [<CommonParameters>]

Get-PSBreakpoint [-Type] <BreakpointType[]> [-Script <string[]>] [<CommonParameters>]

Get-PSBreakpoint -Command <string[]> [-Script <string[]>] [<CommonParameters>]

Get-PSBreakpoint -Variable <string[]> [-Script <string[]>] [<CommonParameters>]

Get-PSBreakpoint [-Id] <int[]> [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PSBreakpoint","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113326",,,,,"
Get-PSCallStack [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PSCallStack","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113327",,,,,"
Get-PSDrive [[-Name] <string[]>] [-Scope <string>] [-PSProvider <string[]>] [-UseTransaction] [<CommonParameters>]

Get-PSDrive [-LiteralName] <string[]> [-Scope <string>] [-PSProvider <string[]>] [-UseTransaction] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PSDrive","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113329",,,,,"
Get-PSProvider [[-PSProvider] <string[]>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PSProvider","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135219",,,,,"
Get-PSSession [-Name <string[]>] [<CommonParameters>]

Get-PSSession [-ComputerName] <string[]> -InstanceId <guid[]> [-ApplicationName <string>] [-ConfigurationName <string>] [-Credential <pscredential>] [-Authentication <AuthenticationMechanism>] [-CertificateThumbprint <string>] [-Port <int>] [-UseSSL] [-ThrottleLimit <int>] [-State <SessionFilterState>] [-SessionOption <PSSessionOption>] [<CommonParameters>]

Get-PSSession [-ComputerName] <string[]> [-ApplicationName <string>] [-ConfigurationName <string>] [-Name <string[]>] [-Credential <pscredential>] [-Authentication <AuthenticationMechanism>] [-CertificateThumbprint <string>] [-Port <int>] [-UseSSL] [-ThrottleLimit <int>] [-State <SessionFilterState>] [-SessionOption <PSSessionOption>] [<CommonParameters>]

Get-PSSession [-ConnectionUri] <uri[]> -InstanceId <guid[]> [-ConfigurationName <string>] [-AllowRedirection] [-Credential <pscredential>] [-Authentication <AuthenticationMechanism>] [-CertificateThumbprint <string>] [-ThrottleLimit <int>] [-State <SessionFilterState>] [-SessionOption <PSSessionOption>] [<CommonParameters>]

Get-PSSession [-ConnectionUri] <uri[]> [-ConfigurationName <string>] [-AllowRedirection] [-Name <string[]>] [-Credential <pscredential>] [-Authentication <AuthenticationMechanism>] [-CertificateThumbprint <string>] [-ThrottleLimit <int>] [-State <SessionFilterState>] [-SessionOption <PSSessionOption>] [<CommonParameters>]

Get-PSSession [-InstanceId <guid[]>] [<CommonParameters>]

Get-PSSession [-Id] <int[]> [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PSSession","Cmdlet","Public","Microsoft.PowerShell.Core",,"OwnedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=144304",,,,,"
Get-PSSessionConfiguration [[-Name] <string[]>] [-Force] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PSSessionConfiguration","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113330",,,,,"
Get-PSSnapin [[-Name] <string[]>] [-Registered] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PSSnapin","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113446",,,,,"
Get-Random [[-Maximum] <Object>] [-SetSeed <int>] [-Minimum <Object>] [<CommonParameters>]

Get-Random [-InputObject] <Object[]> [-SetSeed <int>] [-Count <int>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Random","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-ScheduledJob
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ScheduledJob","Cmdlet","Public","PSScheduledJob","PSScheduledJob",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-ScheduledJobOption
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ScheduledJobOption","Cmdlet","Public","PSScheduledJob","PSScheduledJob",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-SecureBootPolicy
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SecureBootPolicy","Cmdlet","Public","SecureBoot","SecureBoot",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-SecureBootUEFI
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-SecureBootUEFI","Cmdlet","Public","SecureBoot","SecureBoot",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113332",,,,,"
Get-Service [[-Name] <string[]>] [-ComputerName <string[]>] [-DependentServices] [-RequiredServices] [-Include <string[]>] [-Exclude <string[]>] [<CommonParameters>]

Get-Service -DisplayName <string[]> [-ComputerName <string[]>] [-DependentServices] [-RequiredServices] [-Include <string[]>] [-Exclude <string[]>] [<CommonParameters>]

Get-Service [-ComputerName <string[]>] [-DependentServices] [-RequiredServices] [-Include <string[]>] [-Exclude <string[]>] [-InputObject <ServiceController[]>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Service","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","SupportedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-Tpm
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Tpm","Cmdlet","Public","TrustedPlatformModule","TrustedPlatformModule",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-TpmEndorsementKeyInfo
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-TpmEndorsementKeyInfo","Cmdlet","Public","TrustedPlatformModule","TrustedPlatformModule",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-TpmSupportedFeature
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-TpmSupportedFeature","Cmdlet","Public","TrustedPlatformModule","TrustedPlatformModule",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113333",,,,,"
Get-TraceSource [[-Name] <string[]>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-TraceSource","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135220",,,,,"
Get-Transaction [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Transaction","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-TroubleshootingPack
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-TroubleshootingPack","Cmdlet","Public","TroubleshootingPack","TroubleshootingPack",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=217033",,,,,"
Get-TypeData [[-TypeName] <string[]>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-TypeData","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113334",,,,,"
Get-UICulture [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-UICulture","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113335",,,,,"
Get-Unique [-InputObject <psobject>] [-AsString] [<CommonParameters>]

Get-Unique [-InputObject <psobject>] [-OnType] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Unique","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113336",,,,,"
Get-Variable [[-Name] <string[]>] [-ValueOnly] [-Include <string[]>] [-Exclude <string[]>] [-Scope <string>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Variable","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=216343",,,,,"Get-WIMBootEntry
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-WIMBootEntry","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-WinAcceptLanguageFromLanguageListOptOut
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-WinAcceptLanguageFromLanguageListOptOut","Cmdlet","Public","International","International",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-WinCultureFromLanguageListOptOut
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-WinCultureFromLanguageListOptOut","Cmdlet","Public","International","International",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-WinDefaultInputMethodOverride
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-WinDefaultInputMethodOverride","Cmdlet","Public","International","International",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=289355",,,,,"Get-WindowsDriver
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-WindowsDriver","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=289356",,,,,"Get-WindowsEdition
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-WindowsEdition","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-WindowsErrorReporting
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-WindowsErrorReporting","Cmdlet","Public","WindowsErrorReporting","WindowsErrorReporting",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=289357",,,,,"Get-WindowsImage
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-WindowsImage","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=273950",,,,,"Get-WindowsImageContent
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-WindowsImageContent","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=289358",,,,,"Get-WindowsOptionalFeature
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-WindowsOptionalFeature","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=289359",,,,,"Get-WindowsPackage
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-WindowsPackage","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-WindowsSearchSetting
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-WindowsSearchSetting","Cmdlet","Public","WindowsSearch","WindowsSearch",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-WinEvent
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-WinEvent","Cmdlet","Public","Microsoft.PowerShell.Diagnostics","Microsoft.PowerShell.Diagnostics",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-WinHomeLocation
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-WinHomeLocation","Cmdlet","Public","International","International",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-WinLanguageBarOption
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-WinLanguageBarOption","Cmdlet","Public","International","International",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-WinSystemLocale
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-WinSystemLocale","Cmdlet","Public","International","International",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-WinUILanguageOverride
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-WinUILanguageOverride","Cmdlet","Public","International","International",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-WinUserLanguageList
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-WinUserLanguageList","Cmdlet","Public","International","International",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113337",,,,,"
Get-WmiObject [-Class] <string> [[-Property] <string[]>] [-Filter <string>] [-Amended] [-DirectRead] [-AsJob] [-Impersonation <ImpersonationLevel>] [-Authentication <AuthenticationLevel>] [-Locale <string>] [-EnableAllPrivileges] [-Authority <string>] [-Credential <pscredential>] [-ThrottleLimit <int>] [-ComputerName <string[]>] [-Namespace <string>] [<CommonParameters>]

Get-WmiObject [[-Class] <string>] [-Recurse] [-Amended] [-List] [-AsJob] [-Impersonation <ImpersonationLevel>] [-Authentication <AuthenticationLevel>] [-Locale <string>] [-EnableAllPrivileges] [-Authority <string>] [-Credential <pscredential>] [-ThrottleLimit <int>] [-ComputerName <string[]>] [-Namespace <string>] [<CommonParameters>]

Get-WmiObject -Query <string> [-Amended] [-DirectRead] [-AsJob] [-Impersonation <ImpersonationLevel>] [-Authentication <AuthenticationLevel>] [-Locale <string>] [-EnableAllPrivileges] [-Authority <string>] [-Credential <pscredential>] [-ThrottleLimit <int>] [-ComputerName <string[]>] [-Namespace <string>] [<CommonParameters>]

Get-WmiObject [-Amended] [-AsJob] [-Impersonation <ImpersonationLevel>] [-Authentication <AuthenticationLevel>] [-Locale <string>] [-EnableAllPrivileges] [-Authority <string>] [-Credential <pscredential>] [-ThrottleLimit <int>] [-ComputerName <string[]>] [-Namespace <string>] [<CommonParameters>]

Get-WmiObject [-Amended] [-AsJob] [-Impersonation <ImpersonationLevel>] [-Authentication <AuthenticationLevel>] [-Locale <string>] [-EnableAllPrivileges] [-Authority <string>] [-Credential <pscredential>] [-ThrottleLimit <int>] [-ComputerName <string[]>] [-Namespace <string>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-WmiObject","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","OwnedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-WSManCredSSP
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-WSManCredSSP","Cmdlet","Public","Microsoft.WSMan.Management","Microsoft.WSMan.Management",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Get-WSManInstance
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-WSManInstance","Cmdlet","Public","Microsoft.WSMan.Management","Microsoft.WSMan.Management",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113338",,,,,"
Group-Object [[-Property] <Object[]>] [-NoElement] [-AsHashTable] [-AsString] [-InputObject <psobject>] [-Culture <string>] [-CaseSensitive] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Group-Object","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113339",,,,,"
Import-Alias [-Path] <string> [-Scope <string>] [-PassThru] [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]

Import-Alias -LiteralPath <string> [-Scope <string>] [-PassThru] [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Import-Alias","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Import-BinaryMiLog
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Import-BinaryMiLog","Cmdlet","Public","CimCmdlets","CimCmdlets",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Import-Certificate
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Import-Certificate","Cmdlet","Public","PKI","PKI",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113340",,,,,"
Import-Clixml [-Path] <string[]> [-IncludeTotalCount] [-Skip <uint64>] [-First <uint64>] [<CommonParameters>]

Import-Clixml -LiteralPath <string[]> [-IncludeTotalCount] [-Skip <uint64>] [-First <uint64>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Import-Clixml","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Import-Counter
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Import-Counter","Cmdlet","Public","Microsoft.PowerShell.Diagnostics","Microsoft.PowerShell.Diagnostics",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113341",,,,,"
Import-Csv [[-Path] <string[]>] [[-Delimiter] <char>] [-LiteralPath <string[]>] [-Header <string[]>] [-Encoding <string>] [<CommonParameters>]

Import-Csv [[-Path] <string[]>] -UseCulture [-LiteralPath <string[]>] [-Header <string[]>] [-Encoding <string>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Import-Csv","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113342",,,,,"
Import-LocalizedData [[-BindingVariable] <string>] [[-UICulture] <string>] [-BaseDirectory <string>] [-FileName <string>] [-SupportedCommand <string[]>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Import-LocalizedData","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=141553",,,,,"
Import-Module [-Name] <string[]> [-Global] [-Prefix <string>] [-Function <string[]>] [-Cmdlet <string[]>] [-Variable <string[]>] [-Alias <string[]>] [-Force] [-PassThru] [-AsCustomObject] [-MinimumVersion <version>] [-RequiredVersion <version>] [-ArgumentList <Object[]>] [-DisableNameChecking] [-NoClobber] [-Scope <string>] [<CommonParameters>]

Import-Module [-Name] <string[]> -PSSession <PSSession> [-Global] [-Prefix <string>] [-Function <string[]>] [-Cmdlet <string[]>] [-Variable <string[]>] [-Alias <string[]>] [-Force] [-PassThru] [-AsCustomObject] [-MinimumVersion <version>] [-RequiredVersion <version>] [-ArgumentList <Object[]>] [-DisableNameChecking] [-NoClobber] [-Scope <string>] [<CommonParameters>]

Import-Module [-Name] <string[]> -CimSession <CimSession> [-Global] [-Prefix <string>] [-Function <string[]>] [-Cmdlet <string[]>] [-Variable <string[]>] [-Alias <string[]>] [-Force] [-PassThru] [-AsCustomObject] [-MinimumVersion <version>] [-RequiredVersion <version>] [-ArgumentList <Object[]>] [-DisableNameChecking] [-NoClobber] [-Scope <string>] [-CimResourceUri <uri>] [-CimNamespace <string>] [<CommonParameters>]

Import-Module [-Assembly] <Assembly[]> [-Global] [-Prefix <string>] [-Function <string[]>] [-Cmdlet <string[]>] [-Variable <string[]>] [-Alias <string[]>] [-Force] [-PassThru] [-AsCustomObject] [-ArgumentList <Object[]>] [-DisableNameChecking] [-NoClobber] [-Scope <string>] [<CommonParameters>]

Import-Module [-ModuleInfo] <psmoduleinfo[]> [-Global] [-Prefix <string>] [-Function <string[]>] [-Cmdlet <string[]>] [-Variable <string[]>] [-Alias <string[]>] [-Force] [-PassThru] [-AsCustomObject] [-ArgumentList <Object[]>] [-DisableNameChecking] [-NoClobber] [-Scope <string>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Import-Module","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Import-PfxCertificate
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Import-PfxCertificate","Cmdlet","Public","PKI","PKI",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135221",,,,,"
Import-PSSession [-Session] <PSSession> [[-CommandName] <string[]>] [[-FormatTypeName] <string[]>] [-Prefix <string>] [-DisableNameChecking] [-AllowClobber] [-ArgumentList <Object[]>] [-CommandType <CommandTypes>] [-Module <string[]>] [-Certificate <X509Certificate2>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Import-PSSession","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Import-StartLayout
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Import-StartLayout","Cmdlet","Public","StartScreen","StartScreen",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Import-TpmOwnerAuth
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Import-TpmOwnerAuth","Cmdlet","Public","TrustedPlatformModule","TrustedPlatformModule",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Initialize-Tpm
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Initialize-Tpm","Cmdlet","Public","TrustedPlatformModule","TrustedPlatformModule",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Invoke-ASCmd
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Invoke-ASCmd","Cmdlet","Public","SQLASCMDLETS","SQLASCMDLETS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Invoke-CimMethod
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Invoke-CimMethod","Cmdlet","Public","CimCmdlets","CimCmdlets",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135225",,,,,"
Invoke-Command [-ScriptBlock] <scriptblock> [-NoNewScope] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]

Invoke-Command [[-Session] <PSSession[]>] [-FilePath] <string> [-ThrottleLimit <int>] [-AsJob] [-HideComputerName] [-JobName <string>] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]

Invoke-Command [[-Session] <PSSession[]>] [-ScriptBlock] <scriptblock> [-ThrottleLimit <int>] [-AsJob] [-HideComputerName] [-JobName <string>] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]

Invoke-Command [[-ComputerName] <string[]>] [-ScriptBlock] <scriptblock> [-Credential <pscredential>] [-Port <int>] [-UseSSL] [-ConfigurationName <string>] [-ApplicationName <string>] [-ThrottleLimit <int>] [-AsJob] [-InDisconnectedSession] [-SessionName <string[]>] [-HideComputerName] [-JobName <string>] [-SessionOption <PSSessionOption>] [-Authentication <AuthenticationMechanism>] [-EnableNetworkAccess] [-InputObject <psobject>] [-ArgumentList <Object[]>] [-CertificateThumbprint <string>] [<CommonParameters>]

Invoke-Command [[-ComputerName] <string[]>] [-FilePath] <string> [-Credential <pscredential>] [-Port <int>] [-UseSSL] [-ConfigurationName <string>] [-ApplicationName <string>] [-ThrottleLimit <int>] [-AsJob] [-InDisconnectedSession] [-SessionName <string[]>] [-HideComputerName] [-JobName <string>] [-SessionOption <PSSessionOption>] [-Authentication <AuthenticationMechanism>] [-EnableNetworkAccess] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]

Invoke-Command [[-ConnectionUri] <uri[]>] [-ScriptBlock] <scriptblock> [-Credential <pscredential>] [-ConfigurationName <string>] [-ThrottleLimit <int>] [-AsJob] [-InDisconnectedSession] [-HideComputerName] [-JobName <string>] [-AllowRedirection] [-SessionOption <PSSessionOption>] [-Authentication <AuthenticationMechanism>] [-EnableNetworkAccess] [-InputObject <psobject>] [-ArgumentList <Object[]>] [-CertificateThumbprint <string>] [<CommonParameters>]

Invoke-Command [[-ConnectionUri] <uri[]>] [-FilePath] <string> [-Credential <pscredential>] [-ConfigurationName <string>] [-ThrottleLimit <int>] [-AsJob] [-InDisconnectedSession] [-HideComputerName] [-JobName <string>] [-AllowRedirection] [-SessionOption <PSSessionOption>] [-Authentication <AuthenticationMechanism>] [-EnableNetworkAccess] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Invoke-Command","Cmdlet","Public","Microsoft.PowerShell.Core",,"OwnedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113343",,,,,"
Invoke-Expression [-Command] <string> [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Invoke-Expression","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113344",,,,,"
Invoke-History [[-Id] <string>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Invoke-History","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113345",,,,,"
Invoke-Item [-Path] <string[]> [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]

Invoke-Item -LiteralPath <string[]> [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Invoke-Item","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Invoke-PolicyEvaluation
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Invoke-PolicyEvaluation","Cmdlet","Public","SQLPS","SQLPS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Invoke-ProcessCube
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Invoke-ProcessCube","Cmdlet","Public","SQLASCMDLETS","SQLASCMDLETS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Invoke-ProcessDimension
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Invoke-ProcessDimension","Cmdlet","Public","SQLASCMDLETS","SQLASCMDLETS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Invoke-ProcessPartition
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Invoke-ProcessPartition","Cmdlet","Public","SQLASCMDLETS","SQLASCMDLETS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=217034",,,,,"
Invoke-RestMethod [-Uri] <uri> [-Method <WebRequestMethod>] [-WebSession <WebRequestSession>] [-SessionVariable <string>] [-Credential <pscredential>] [-UseDefaultCredentials] [-CertificateThumbprint <string>] [-Certificate <X509Certificate>] [-UserAgent <string>] [-DisableKeepAlive] [-TimeoutSec <int>] [-Headers <IDictionary>] [-MaximumRedirection <int>] [-Proxy <uri>] [-ProxyCredential <pscredential>] [-ProxyUseDefaultCredentials] [-Body <Object>] [-ContentType <string>] [-TransferEncoding <string>] [-InFile <string>] [-OutFile <string>] [-PassThru] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Invoke-RestMethod","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Invoke-Sqlcmd
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Invoke-Sqlcmd","Cmdlet","Public","SQLPS","SQLPS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Invoke-TroubleshootingPack
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Invoke-TroubleshootingPack","Cmdlet","Public","TroubleshootingPack","TroubleshootingPack",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=217035",,,,,"
Invoke-WebRequest [-Uri] <uri> [-UseBasicParsing] [-WebSession <WebRequestSession>] [-SessionVariable <string>] [-Credential <pscredential>] [-UseDefaultCredentials] [-CertificateThumbprint <string>] [-Certificate <X509Certificate>] [-UserAgent <string>] [-DisableKeepAlive] [-TimeoutSec <int>] [-Headers <IDictionary>] [-MaximumRedirection <int>] [-Method <WebRequestMethod>] [-Proxy <uri>] [-ProxyCredential <pscredential>] [-ProxyUseDefaultCredentials] [-Body <Object>] [-ContentType <string>] [-TransferEncoding <string>] [-InFile <string>] [-OutFile <string>] [-PassThru] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Invoke-WebRequest","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113346",,,,,"
Invoke-WmiMethod [-Class] <string> [-Name] <string> [[-ArgumentList] <Object[]>] [-AsJob] [-Impersonation <ImpersonationLevel>] [-Authentication <AuthenticationLevel>] [-Locale <string>] [-EnableAllPrivileges] [-Authority <string>] [-Credential <pscredential>] [-ThrottleLimit <int>] [-ComputerName <string[]>] [-Namespace <string>] [-WhatIf] [-Confirm] [<CommonParameters>]

Invoke-WmiMethod [-Name] <string> -InputObject <wmi> [-ArgumentList <Object[]>] [-AsJob] [-ThrottleLimit <int>] [-WhatIf] [-Confirm] [<CommonParameters>]

Invoke-WmiMethod [-Name] <string> -Path <string> [-ArgumentList <Object[]>] [-AsJob] [-Impersonation <ImpersonationLevel>] [-Authentication <AuthenticationLevel>] [-Locale <string>] [-EnableAllPrivileges] [-Authority <string>] [-Credential <pscredential>] [-ThrottleLimit <int>] [-ComputerName <string[]>] [-Namespace <string>] [-WhatIf] [-Confirm] [<CommonParameters>]

Invoke-WmiMethod [-Name] <string> [-AsJob] [-Impersonation <ImpersonationLevel>] [-Authentication <AuthenticationLevel>] [-Locale <string>] [-EnableAllPrivileges] [-Authority <string>] [-Credential <pscredential>] [-ThrottleLimit <int>] [-ComputerName <string[]>] [-Namespace <string>] [-WhatIf] [-Confirm] [<CommonParameters>]

Invoke-WmiMethod [-Name] <string> [-AsJob] [-Impersonation <ImpersonationLevel>] [-Authentication <AuthenticationLevel>] [-Locale <string>] [-EnableAllPrivileges] [-Authority <string>] [-Credential <pscredential>] [-ThrottleLimit <int>] [-ComputerName <string[]>] [-Namespace <string>] [-WhatIf] [-Confirm] [<CommonParameters>]

Invoke-WmiMethod [-Name] <string> [-AsJob] [-Impersonation <ImpersonationLevel>] [-Authentication <AuthenticationLevel>] [-Locale <string>] [-EnableAllPrivileges] [-Authority <string>] [-Credential <pscredential>] [-ThrottleLimit <int>] [-ComputerName <string[]>] [-Namespace <string>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Invoke-WmiMethod","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","OwnedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Invoke-WSManAction
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Invoke-WSManAction","Cmdlet","Public","Microsoft.WSMan.Management","Microsoft.WSMan.Management",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Join-DtcDiagnosticResourceManager
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Join-DtcDiagnosticResourceManager","Cmdlet","Public","MsDtc","MsDtc",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113347",,,,,"
Join-Path [-Path] <string[]> [-ChildPath] <string> [-Resolve] [-Credential <pscredential>] [-UseTransaction] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Join-Path","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Join-SqlAvailabilityGroup
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Join-SqlAvailabilityGroup","Cmdlet","Public","SQLPS","SQLPS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135227",,,,,"
Limit-EventLog [-LogName] <string[]> [-ComputerName <string[]>] [-RetentionDays <int>] [-OverflowAction <OverflowAction>] [-MaximumSize <long>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Limit-EventLog","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","SupportedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113348",,,,,"
Measure-Command [-Expression] <scriptblock> [-InputObject <psobject>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Measure-Command","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113349",,,,,"
Measure-Object [[-Property] <string[]>] [-InputObject <psobject>] [-Sum] [-Average] [-Maximum] [-Minimum] [<CommonParameters>]

Measure-Object [[-Property] <string[]>] [-InputObject <psobject>] [-Line] [-Word] [-Character] [-IgnoreWhiteSpace] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Measure-Object","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Merge-Partition
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Merge-Partition","Cmdlet","Public","SQLASCMDLETS","SQLASCMDLETS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=289360",,,,,"Mount-WindowsImage
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Mount-WindowsImage","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113350",,,,,"
Move-Item [-Path] <string[]> [[-Destination] <string>] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-PassThru] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]

Move-Item [[-Destination] <string>] -LiteralPath <string[]> [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-PassThru] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Move-Item","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113351",,,,,"
Move-ItemProperty [-Path] <string[]> [-Destination] <string> [-Name] <string[]> [-PassThru] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]

Move-ItemProperty [-Destination] <string> [-Name] <string[]> -LiteralPath <string[]> [-PassThru] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Move-ItemProperty","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113352",,,,,"
New-Alias [-Name] <string> [-Value] <string> [-Description <string>] [-Option <ScopedItemOptions>] [-PassThru] [-Scope <string>] [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-Alias","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-CertificateNotificationTask
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-CertificateNotificationTask","Cmdlet","Public","PKI","PKI",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-CimInstance
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-CimInstance","Cmdlet","Public","CimCmdlets","CimCmdlets",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-CimSession
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-CimSession","Cmdlet","Public","CimCmdlets","CimCmdlets",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-CimSessionOption
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-CimSessionOption","Cmdlet","Public","CimCmdlets","CimCmdlets",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-DtcDiagnosticTransaction
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-DtcDiagnosticTransaction","Cmdlet","Public","MsDtc","MsDtc",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135234",,,,,"
New-Event [-SourceIdentifier] <string> [[-Sender] <psobject>] [[-EventArguments] <psobject[]>] [[-MessageData] <psobject>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-Event","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135235",,,,,"
New-EventLog [-LogName] <string> [-Source] <string[]> [[-ComputerName] <string[]>] [-CategoryResourceFile <string>] [-MessageResourceFile <string>] [-ParameterResourceFile <string>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-EventLog","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","SupportedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113353",,,,,"
New-Item [-Path] <string[]> [-ItemType <string>] [-Value <Object>] [-Force] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]

New-Item [[-Path] <string[]>] -Name <string> [-ItemType <string>] [-Value <Object>] [-Force] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-Item","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113354",,,,,"
New-ItemProperty [-Path] <string[]> [-Name] <string> [-PropertyType <string>] [-Value <Object>] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]

New-ItemProperty [-Name] <string> -LiteralPath <string[]> [-PropertyType <string>] [-Value <Object>] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-ItemProperty","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-JobTrigger
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-JobTrigger","Cmdlet","Public","PSScheduledJob","PSScheduledJob",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=141554",,,,,"
New-Module [-ScriptBlock] <scriptblock> [-Function <string[]>] [-Cmdlet <string[]>] [-ReturnResult] [-AsCustomObject] [-ArgumentList <Object[]>] [<CommonParameters>]

New-Module [-Name] <string> [-ScriptBlock] <scriptblock> [-Function <string[]>] [-Cmdlet <string[]>] [-ReturnResult] [-AsCustomObject] [-ArgumentList <Object[]>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-Module","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=141555",,,,,"
New-ModuleManifest [-Path] <string> [-NestedModules <Object[]>] [-Guid <guid>] [-Author <string>] [-CompanyName <string>] [-Copyright <string>] [-RootModule <string>] [-ModuleVersion <version>] [-Description <string>] [-ProcessorArchitecture <ProcessorArchitecture>] [-PowerShellVersion <version>] [-ClrVersion <version>] [-DotNetFrameworkVersion <version>] [-PowerShellHostName <string>] [-PowerShellHostVersion <version>] [-RequiredModules <Object[]>] [-TypesToProcess <string[]>] [-FormatsToProcess <string[]>] [-ScriptsToProcess <string[]>] [-RequiredAssemblies <string[]>] [-FileList <string[]>] [-ModuleList <Object[]>] [-FunctionsToExport <string[]>] [-AliasesToExport <string[]>] [-VariablesToExport <string[]>] [-CmdletsToExport <string[]>] [-PrivateData <Object>] [-HelpInfoUri <string>] [-PassThru] [-DefaultCommandPrefix <string>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-ModuleManifest","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
New-MsolAdministrativeUnit [-DisplayName <string>] [-Description <string>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MsolAdministrativeUnit","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-MsolAdministrativeUnit
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MsolAdministrativeUnit","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
New-MsolDomain [-Name <string>] [-Authentication <DomainAuthenticationType>] [-VerificationMethod <DomainVerificationMethod>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MsolDomain","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-MsolDomain
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MsolDomain","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
New-MsolFederatedDomain -DomainName <string> [-SupportMultipleDomain] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MsolFederatedDomain","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
New-MsolGroup [-DisplayName <string>] [-Description <string>] [-ManagedBy <string>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MsolGroup","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-MsolGroup
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MsolGroup","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
New-MsolLicenseOptions -AccountSkuId <string> [-DisabledPlans <List[string]>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MsolLicenseOptions","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-MsolLicenseOptions
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MsolLicenseOptions","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
New-MsolServicePrincipal -DisplayName <string> [-ServicePrincipalNames <string[]>] [-AppPrincipalId <guid>] [-AccountEnabled <bool>] [-Addresses <RedirectUri[]>] [-Type <ServicePrincipalCredentialType>] [-Value <string>] [-StartDate <datetime>] [-EndDate <datetime>] [-Usage <ServicePrincipalCredentialUsage>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MsolServicePrincipal","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-MsolServicePrincipal
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MsolServicePrincipal","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
New-MsolServicePrincipalAddresses -Address <string> [-AddressType <AddressType>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MsolServicePrincipalAddresses","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-MsolServicePrincipalAddresses
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MsolServicePrincipalAddresses","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
New-MsolServicePrincipalCredential -ObjectId <guid> [-Type <ServicePrincipalCredentialType>] [-Value <string>] [-StartDate <datetime>] [-EndDate <datetime>] [-Usage <ServicePrincipalCredentialUsage>] [-TenantId <guid>] [<CommonParameters>]

New-MsolServicePrincipalCredential -ServicePrincipalName <string> [-Type <ServicePrincipalCredentialType>] [-Value <string>] [-StartDate <datetime>] [-EndDate <datetime>] [-Usage <ServicePrincipalCredentialUsage>] [-TenantId <guid>] [<CommonParameters>]

New-MsolServicePrincipalCredential -AppPrincipalId <guid> [-Type <ServicePrincipalCredentialType>] [-Value <string>] [-StartDate <datetime>] [-EndDate <datetime>] [-Usage <ServicePrincipalCredentialUsage>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MsolServicePrincipalCredential","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-MsolServicePrincipalCredential
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MsolServicePrincipalCredential","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
New-MsolUser [-ImmutableId <string>] [-UserPrincipalName <string>] [-BlockCredential <bool>] [-City <string>] [-Country <string>] [-Department <string>] [-DisplayName <string>] [-Fax <string>] [-FirstName <string>] [-LastName <string>] [-LastPasswordChangeTimestamp <datetime>] [-MobilePhone <string>] [-Office <string>] [-PasswordNeverExpires <bool>] [-PhoneNumber <string>] [-PostalCode <string>] [-PreferredLanguage <string>] [-SoftDeletionTimestamp <datetime>] [-State <string>] [-StreetAddress <string>] [-StrongPasswordRequired <bool>] [-Title <string>] [-UsageLocation <string>] [-AlternateEmailAddresses <string[]>] [-StrongAuthenticationMethods <StrongAuthenticationMethod[]>] [-AlternateMobilePhones <string[]>] [-StrongAuthenticationRequirements <StrongAuthenticationRequirement[]>] [-StsRefreshTokensValidFrom <datetime>] [-UserType <UserType>] [-Password <string>] [-LicenseOptions <LicenseOption[]>] [-ForceChangePassword <bool>] [-LicenseAssignment <string[]>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MsolUser","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-MsolUser
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MsolUser","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
New-MsolWellKnownGroup -WellKnownGroupName <string> [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MsolWellKnownGroup","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-MsolWellKnownGroup
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-MsolWellKnownGroup","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-NetIPsecAuthProposal
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-NetIPsecAuthProposal","Cmdlet","Public","NetSecurity","NetSecurity",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-NetIPsecMainModeCryptoProposal
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-NetIPsecMainModeCryptoProposal","Cmdlet","Public","NetSecurity","NetSecurity",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-NetIPsecQuickModeCryptoProposal
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-NetIPsecQuickModeCryptoProposal","Cmdlet","Public","NetSecurity","NetSecurity",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113355",,,,,"
New-Object [-TypeName] <string> [[-ArgumentList] <Object[]>] [-Property <IDictionary>] [<CommonParameters>]

New-Object [-ComObject] <string> [-Strict] [-Property <IDictionary>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-Object","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113357",,,,,"
New-PSDrive [-Name] <string> [-PSProvider] <string> [-Root] <string> [-Description <string>] [-Scope <string>] [-Persist] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-PSDrive","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135237",,,,,"
New-PSSession [[-ComputerName] <string[]>] [-Credential <pscredential>] [-Name <string[]>] [-EnableNetworkAccess] [-Port <int>] [-UseSSL] [-ConfigurationName <string>] [-ApplicationName <string>] [-ThrottleLimit <int>] [-SessionOption <PSSessionOption>] [-Authentication <AuthenticationMechanism>] [-CertificateThumbprint <string>] [<CommonParameters>]

New-PSSession [-ConnectionUri] <uri[]> [-Credential <pscredential>] [-Name <string[]>] [-EnableNetworkAccess] [-ConfigurationName <string>] [-ThrottleLimit <int>] [-AllowRedirection] [-SessionOption <PSSessionOption>] [-Authentication <AuthenticationMechanism>] [-CertificateThumbprint <string>] [<CommonParameters>]

New-PSSession [[-Session] <PSSession[]>] [-Name <string[]>] [-EnableNetworkAccess] [-ThrottleLimit <int>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-PSSession","Cmdlet","Public","Microsoft.PowerShell.Core",,"OwnedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=217036",,,,,"
New-PSSessionConfigurationFile [-Path] <string> [-SchemaVersion <version>] [-Guid <guid>] [-Author <string>] [-CompanyName <string>] [-Copyright <string>] [-Description <string>] [-PowerShellVersion <version>] [-SessionType <SessionType>] [-ModulesToImport <Object[]>] [-AssembliesToLoad <string[]>] [-VisibleAliases <string[]>] [-VisibleCmdlets <string[]>] [-VisibleFunctions <string[]>] [-VisibleProviders <string[]>] [-AliasDefinitions <hashtable[]>] [-FunctionDefinitions <hashtable[]>] [-VariableDefinitions <Object>] [-EnvironmentVariables <Object>] [-TypesToProcess <string[]>] [-FormatsToProcess <string[]>] [-LanguageMode <PSLanguageMode>] [-ExecutionPolicy <ExecutionPolicy>] [-ScriptsToProcess <string[]>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-PSSessionConfigurationFile","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=144305",,,,,"
New-PSSessionOption [-MaximumRedirection <int>] [-NoCompression] [-NoMachineProfile] [-Culture <cultureinfo>] [-UICulture <cultureinfo>] [-MaximumReceivedDataSizePerCommand <int>] [-MaximumReceivedObjectSize <int>] [-OutputBufferingMode <OutputBufferingMode>] [-ApplicationArguments <psprimitivedictionary>] [-OpenTimeout <int>] [-CancelTimeout <int>] [-IdleTimeout <int>] [-ProxyAccessType <ProxyAccessType>] [-ProxyAuthentication <AuthenticationMechanism>] [-ProxyCredential <pscredential>] [-SkipCACheck] [-SkipCNCheck] [-SkipRevocationCheck] [-OperationTimeout <int>] [-NoEncryption] [-UseUTF16] [-IncludePortInSPN] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-PSSessionOption","Cmdlet","Public","Microsoft.PowerShell.Core",,"None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=210608",,,,,"
New-PSTransportOption [-MaxIdleTimeoutSec <int>] [-ProcessIdleTimeoutSec <int>] [-MaxSessions <int>] [-MaxConcurrentCommandsPerSession <int>] [-MaxSessionsPerUser <int>] [-MaxMemoryPerSessionMB <int>] [-MaxProcessesPerSession <int>] [-MaxConcurrentUsers <int>] [-IdleTimeoutSec <int>] [-OutputBufferingMode <OutputBufferingMode>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-PSTransportOption","Cmdlet","Public","Microsoft.PowerShell.Core",,"None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-PSWorkflowExecutionOption
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-PSWorkflowExecutionOption","Cmdlet","Public","PSWorkflow","PSWorkflow",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-RestoreFolder
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-RestoreFolder","Cmdlet","Public","SQLASCMDLETS","SQLASCMDLETS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-RestoreLocation
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-RestoreLocation","Cmdlet","Public","SQLASCMDLETS","SQLASCMDLETS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-ScheduledJobOption
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-ScheduledJobOption","Cmdlet","Public","PSScheduledJob","PSScheduledJob",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-SelfSignedCertificate
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-SelfSignedCertificate","Cmdlet","Public","PKI","PKI",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113359",,,,,"
New-Service [-Name] <string> [-BinaryPathName] <string> [-DisplayName <string>] [-Description <string>] [-StartupType <ServiceStartMode>] [-Credential <pscredential>] [-DependsOn <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-Service","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-SqlAvailabilityGroup
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-SqlAvailabilityGroup","Cmdlet","Public","SQLPS","SQLPS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-SqlAvailabilityGroupListener
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-SqlAvailabilityGroupListener","Cmdlet","Public","SQLPS","SQLPS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-SqlAvailabilityReplica
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-SqlAvailabilityReplica","Cmdlet","Public","SQLPS","SQLPS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-SqlHADREndpoint
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-SqlHADREndpoint","Cmdlet","Public","SQLPS","SQLPS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113360",,,,,"
New-TimeSpan [[-Start] <datetime>] [[-End] <datetime>] [<CommonParameters>]

New-TimeSpan [-Days <int>] [-Hours <int>] [-Minutes <int>] [-Seconds <int>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-TimeSpan","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-TlsSessionTicketKey
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-TlsSessionTicketKey","Cmdlet","Public","TLS","TLS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113361",,,,,"
New-Variable [-Name] <string> [[-Value] <Object>] [-Description <string>] [-Option <ScopedItemOptions>] [-Visibility <SessionStateEntryVisibility>] [-Force] [-PassThru] [-Scope <string>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-Variable","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135238",,,,,"
New-WebServiceProxy [-Uri] <uri> [[-Class] <string>] [[-Namespace] <string>] [<CommonParameters>]

New-WebServiceProxy [-Uri] <uri> [[-Class] <string>] [[-Namespace] <string>] [-Credential <pscredential>] [<CommonParameters>]

New-WebServiceProxy [-Uri] <uri> [[-Class] <string>] [[-Namespace] <string>] [-UseDefaultCredential] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-WebServiceProxy","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?linkid=331576",,,,,"New-WindowsCustomImage
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-WindowsCustomImage","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=273951",,,,,"New-WindowsImage
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-WindowsImage","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-WinEvent
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-WinEvent","Cmdlet","Public","Microsoft.PowerShell.Diagnostics","Microsoft.PowerShell.Diagnostics",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-WinUserLanguageList
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-WinUserLanguageList","Cmdlet","Public","International","International",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-WSManInstance
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-WSManInstance","Cmdlet","Public","Microsoft.WSMan.Management","Microsoft.WSMan.Management",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"New-WSManSessionOption
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-WSManSessionOption","Cmdlet","Public","Microsoft.WSMan.Management","Microsoft.WSMan.Management",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=389089",,,,,"Optimize-WindowsImage
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Optimize-WindowsImage","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113362",,,,,"
Out-Default [-Transcript] [-InputObject <psobject>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Out-Default","Cmdlet","Public","Microsoft.PowerShell.Core",,"None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113363",,,,,"
Out-File [-FilePath] <string> [[-Encoding] <string>] [-Append] [-Force] [-NoClobber] [-Width <int>] [-InputObject <psobject>] [-WhatIf] [-Confirm] [<CommonParameters>]

Out-File [[-Encoding] <string>] -LiteralPath <string> [-Append] [-Force] [-NoClobber] [-Width <int>] [-InputObject <psobject>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Out-File","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113364",,,,,"
Out-GridView [-InputObject <psobject>] [-Title <string>] [-PassThru] [<CommonParameters>]

Out-GridView [-InputObject <psobject>] [-Title <string>] [-Wait] [<CommonParameters>]

Out-GridView [-InputObject <psobject>] [-Title <string>] [-OutputMode <OutputModeOption>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Out-GridView","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113365",,,,,"
Out-Host [-Paging] [-InputObject <psobject>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Out-Host","Cmdlet","Public","Microsoft.PowerShell.Core",,"None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113366",,,,,"
Out-Null [-InputObject <psobject>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Out-Null","Cmdlet","Public","Microsoft.PowerShell.Core",,"None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113367",,,,,"
Out-Printer [[-Name] <string>] [-InputObject <psobject>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Out-Printer","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113368",,,,,"
Out-String [-Stream] [-Width <int>] [-InputObject <psobject>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Out-String","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113369",,,,,"
Pop-Location [-PassThru] [-StackName <string>] [-UseTransaction] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Pop-Location","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=394373",,,,,"
Protect-CmsMessage [-To] <CmsMessageRecipient[]> [-Content] <psobject> [[-OutFile] <string>] [<CommonParameters>]

Protect-CmsMessage [-To] <CmsMessageRecipient[]> [-Path] <string> [[-OutFile] <string>] [<CommonParameters>]

Protect-CmsMessage [-To] <CmsMessageRecipient[]> [-LiteralPath] <string> [[-OutFile] <string>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Protect-CmsMessage","Cmdlet","Public","Microsoft.PowerShell.Security","Microsoft.PowerShell.Security","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113370",,,,,"
Push-Location [[-Path] <string>] [-PassThru] [-StackName <string>] [-UseTransaction] [<CommonParameters>]

Push-Location [-LiteralPath <string>] [-PassThru] [-StackName <string>] [-UseTransaction] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Push-Location","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113371",,,,,"
Read-Host [[-Prompt] <Object>] [-AsSecureString] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Read-Host","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Receive-DtcDiagnosticTransaction
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Receive-DtcDiagnosticTransaction","Cmdlet","Public","MsDtc","MsDtc",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113372",,,,,"
Receive-Job [-Job] <Job[]> [[-Location] <string[]>] [-Keep] [-NoRecurse] [-Force] [-Wait] [-AutoRemoveJob] [-WriteEvents] [-WriteJobInResults] [<CommonParameters>]

Receive-Job [-Job] <Job[]> [[-ComputerName] <string[]>] [-Keep] [-NoRecurse] [-Force] [-Wait] [-AutoRemoveJob] [-WriteEvents] [-WriteJobInResults] [<CommonParameters>]

Receive-Job [-Job] <Job[]> [[-Session] <PSSession[]>] [-Keep] [-NoRecurse] [-Force] [-Wait] [-AutoRemoveJob] [-WriteEvents] [-WriteJobInResults] [<CommonParameters>]

Receive-Job [-Name] <string[]> [-Keep] [-NoRecurse] [-Force] [-Wait] [-AutoRemoveJob] [-WriteEvents] [-WriteJobInResults] [<CommonParameters>]

Receive-Job [-InstanceId] <guid[]> [-Keep] [-NoRecurse] [-Force] [-Wait] [-AutoRemoveJob] [-WriteEvents] [-WriteJobInResults] [<CommonParameters>]

Receive-Job [-Id] <int[]> [-Keep] [-NoRecurse] [-Force] [-Wait] [-AutoRemoveJob] [-WriteEvents] [-WriteJobInResults] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Receive-Job","Cmdlet","Public","Microsoft.PowerShell.Core",,"SupportedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=217037",,,,,"
Receive-PSSession [-Session] <PSSession> [-OutTarget <OutTarget>] [-JobName <string>] [-WhatIf] [-Confirm] [<CommonParameters>]

Receive-PSSession [-Id] <int> [-OutTarget <OutTarget>] [-JobName <string>] [-WhatIf] [-Confirm] [<CommonParameters>]

Receive-PSSession [-ComputerName] <string> -Name <string> [-ApplicationName <string>] [-ConfigurationName <string>] [-OutTarget <OutTarget>] [-JobName <string>] [-Credential <pscredential>] [-Authentication <AuthenticationMechanism>] [-CertificateThumbprint <string>] [-Port <int>] [-UseSSL] [-SessionOption <PSSessionOption>] [-WhatIf] [-Confirm] [<CommonParameters>]

Receive-PSSession [-ComputerName] <string> -InstanceId <guid> [-ApplicationName <string>] [-ConfigurationName <string>] [-OutTarget <OutTarget>] [-JobName <string>] [-Credential <pscredential>] [-Authentication <AuthenticationMechanism>] [-CertificateThumbprint <string>] [-Port <int>] [-UseSSL] [-SessionOption <PSSessionOption>] [-WhatIf] [-Confirm] [<CommonParameters>]

Receive-PSSession [-ConnectionUri] <uri> -Name <string> [-ConfigurationName <string>] [-AllowRedirection] [-OutTarget <OutTarget>] [-JobName <string>] [-Credential <pscredential>] [-Authentication <AuthenticationMechanism>] [-CertificateThumbprint <string>] [-SessionOption <PSSessionOption>] [-WhatIf] [-Confirm] [<CommonParameters>]

Receive-PSSession [-ConnectionUri] <uri> -InstanceId <guid> [-ConfigurationName <string>] [-AllowRedirection] [-OutTarget <OutTarget>] [-JobName <string>] [-Credential <pscredential>] [-Authentication <AuthenticationMechanism>] [-CertificateThumbprint <string>] [-SessionOption <PSSessionOption>] [-WhatIf] [-Confirm] [<CommonParameters>]

Receive-PSSession [-InstanceId] <guid> [-OutTarget <OutTarget>] [-JobName <string>] [-WhatIf] [-Confirm] [<CommonParameters>]

Receive-PSSession [-Name] <string> [-OutTarget <OutTarget>] [-JobName <string>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Receive-PSSession","Cmdlet","Public","Microsoft.PowerShell.Core",,"OwnedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Redo-MsolProvisionContact -ObjectId <guid> [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Redo-MsolProvisionContact","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Redo-MsolProvisionContact
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Redo-MsolProvisionContact","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Redo-MsolProvisionGroup -ObjectId <guid> [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Redo-MsolProvisionGroup","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Redo-MsolProvisionGroup
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Redo-MsolProvisionGroup","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Redo-MsolProvisionUser -ObjectId <guid> [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Redo-MsolProvisionUser","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Redo-MsolProvisionUser
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Redo-MsolProvisionUser","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Register-CimIndicationEvent
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Register-CimIndicationEvent","Cmdlet","Public","CimCmdlets","CimCmdlets",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135243",,,,,"
Register-EngineEvent [-SourceIdentifier] <string> [[-Action] <scriptblock>] [-MessageData <psobject>] [-SupportEvent] [-Forward] [-MaxTriggerCount <int>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Register-EngineEvent","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135244",,,,,"
Register-ObjectEvent [-InputObject] <psobject> [-EventName] <string> [[-SourceIdentifier] <string>] [[-Action] <scriptblock>] [-MessageData <psobject>] [-SupportEvent] [-Forward] [-MaxTriggerCount <int>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Register-ObjectEvent","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=144306",,,,,"
Register-PSSessionConfiguration [-Name] <string> [-ProcessorArchitecture <string>] [-SessionType <PSSessionType>] [-ApplicationBase <string>] [-RunAsCredential <pscredential>] [-ThreadApartmentState <ApartmentState>] [-ThreadOptions <PSThreadOptions>] [-AccessMode <PSSessionConfigurationAccessMode>] [-UseSharedProcess] [-StartupScript <string>] [-MaximumReceivedDataSizePerCommandMB <double>] [-MaximumReceivedObjectSizeMB <double>] [-SecurityDescriptorSddl <string>] [-ShowSecurityDescriptorUI] [-Force] [-NoServiceRestart] [-PSVersion <version>] [-SessionTypeOption <PSSessionTypeOption>] [-TransportOption <PSTransportOption>] [-ModulesToImport <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]

Register-PSSessionConfiguration [-Name] <string> [-AssemblyName] <string> [-ConfigurationTypeName] <string> [-ProcessorArchitecture <string>] [-ApplicationBase <string>] [-RunAsCredential <pscredential>] [-ThreadApartmentState <ApartmentState>] [-ThreadOptions <PSThreadOptions>] [-AccessMode <PSSessionConfigurationAccessMode>] [-UseSharedProcess] [-StartupScript <string>] [-MaximumReceivedDataSizePerCommandMB <double>] [-MaximumReceivedObjectSizeMB <double>] [-SecurityDescriptorSddl <string>] [-ShowSecurityDescriptorUI] [-Force] [-NoServiceRestart] [-PSVersion <version>] [-SessionTypeOption <PSSessionTypeOption>] [-TransportOption <PSTransportOption>] [-ModulesToImport <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]

Register-PSSessionConfiguration [-Name] <string> -Path <string> [-ProcessorArchitecture <string>] [-RunAsCredential <pscredential>] [-ThreadApartmentState <ApartmentState>] [-ThreadOptions <PSThreadOptions>] [-AccessMode <PSSessionConfigurationAccessMode>] [-UseSharedProcess] [-StartupScript <string>] [-MaximumReceivedDataSizePerCommandMB <double>] [-MaximumReceivedObjectSizeMB <double>] [-SecurityDescriptorSddl <string>] [-ShowSecurityDescriptorUI] [-Force] [-NoServiceRestart] [-TransportOption <PSTransportOption>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Register-PSSessionConfiguration","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Register-ScheduledJob
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Register-ScheduledJob","Cmdlet","Public","PSScheduledJob","PSScheduledJob",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135245",,,,,"
Register-WmiEvent [-Class] <string> [[-SourceIdentifier] <string>] [[-Action] <scriptblock>] [-Namespace <string>] [-Credential <pscredential>] [-ComputerName <string>] [-Timeout <long>] [-MessageData <psobject>] [-SupportEvent] [-Forward] [-MaxTriggerCount <int>] [<CommonParameters>]

Register-WmiEvent [-Query] <string> [[-SourceIdentifier] <string>] [[-Action] <scriptblock>] [-Namespace <string>] [-Credential <pscredential>] [-ComputerName <string>] [-Timeout <long>] [-MessageData <psobject>] [-SupportEvent] [-Forward] [-MaxTriggerCount <int>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Register-WmiEvent","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","OwnedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Remove-AppxPackage
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-AppxPackage","Cmdlet","Public","Appx","Appx",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=289361",,,,,"Remove-AppxProvisionedPackage
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-AppxProvisionedPackage","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Remove-BitsTransfer
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-BitsTransfer","Cmdlet","Public","BitsTransfer","BitsTransfer",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Remove-CertificateEnrollmentPolicyServer
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-CertificateEnrollmentPolicyServer","Cmdlet","Public","PKI","PKI",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Remove-CertificateNotificationTask
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-CertificateNotificationTask","Cmdlet","Public","PKI","PKI",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Remove-CimInstance
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-CimInstance","Cmdlet","Public","CimCmdlets","CimCmdlets",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Remove-CimSession
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-CimSession","Cmdlet","Public","CimCmdlets","CimCmdlets",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135246",,,,,"
Remove-Computer [[-UnjoinDomainCredential] <pscredential>] [-Restart] [-Force] [-PassThru] [-WorkgroupName <string>] [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-Computer -UnjoinDomainCredential <pscredential> [-LocalCredential <pscredential>] [-Restart] [-ComputerName <string[]>] [-Force] [-PassThru] [-WorkgroupName <string>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-Computer","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","SupportedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135247",,,,,"
Remove-Event [-SourceIdentifier] <string> [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-Event [-EventIdentifier] <int> [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-Event","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135248",,,,,"
Remove-EventLog [-LogName] <string[]> [[-ComputerName] <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-EventLog [[-ComputerName] <string[]>] [-Source <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-EventLog","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","SupportedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113373",,,,,"
Remove-Item [-Path] <string[]> [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Recurse] [-Force] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [-Stream <string[]>] [<CommonParameters>]

Remove-Item -LiteralPath <string[]> [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Recurse] [-Force] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [-Stream <string[]>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-Item","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113374",,,,,"
Remove-ItemProperty [-Path] <string[]> [-Name] <string[]> [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]

Remove-ItemProperty [-Name] <string[]> -LiteralPath <string[]> [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-ItemProperty","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113377",,,,,"
Remove-Job [-Id] <int[]> [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-Job [-Job] <Job[]> [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-Job [-InstanceId] <guid[]> [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-Job [-Filter] <hashtable> [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-Job [-Name] <string[]> [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-Job [-State] <JobState> [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-Job [-Command <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-Job","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Remove-JobTrigger
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-JobTrigger","Cmdlet","Public","PSScheduledJob","PSScheduledJob",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=141556",,,,,"
Remove-Module [-Name] <string[]> [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-Module [-ModuleInfo] <psmoduleinfo[]> [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-Module","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Remove-MsolAdministrativeUnit -ObjectId <guid> [-Force] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MsolAdministrativeUnit","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Remove-MsolAdministrativeUnit
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MsolAdministrativeUnit","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Remove-MsolAdministrativeUnitMember -AdministrativeUnitObjectId <guid> [-AdministrativeUnitMemberObjectId <guid>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MsolAdministrativeUnitMember","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Remove-MsolAdministrativeUnitMember
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MsolAdministrativeUnitMember","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Remove-MsolApplicationPassword -UserPrincipalName <string> -PasswordId <string> [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MsolApplicationPassword","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Remove-MsolApplicationPassword
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MsolApplicationPassword","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Remove-MsolContact -ObjectId <guid> [-Force] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MsolContact","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Remove-MsolContact
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MsolContact","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Remove-MsolDomain -DomainName <string> [-Force] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MsolDomain","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Remove-MsolDomain
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MsolDomain","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Remove-MsolFederatedDomain -DomainName <string> [-SupportMultipleDomain] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MsolFederatedDomain","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Remove-MsolForeignGroupFromRole -ForeignGroupObjectId <guid> -ForeignCompanyObjectId <guid> -RoleObjectId <guid> [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MsolForeignGroupFromRole","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Remove-MsolForeignGroupFromRole
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MsolForeignGroupFromRole","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Remove-MsolGroup -ObjectId <guid> [-Force] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MsolGroup","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Remove-MsolGroup
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MsolGroup","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Remove-MsolGroupMember -GroupObjectId <guid> [-GroupMemberType <GroupMemberType>] [-GroupMemberObjectId <guid>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MsolGroupMember","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Remove-MsolGroupMember
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MsolGroupMember","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Remove-MsolRoleMember -RoleObjectId <guid> [-RoleMemberType <RoleMemberType>] [-RoleMemberObjectId <guid>] [-RoleMemberEmailAddress <string>] [-TenantId <guid>] [<CommonParameters>]

Remove-MsolRoleMember -RoleName <string> [-RoleMemberType <RoleMemberType>] [-RoleMemberObjectId <guid>] [-RoleMemberEmailAddress <string>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MsolRoleMember","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Remove-MsolRoleMember
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MsolRoleMember","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Remove-MsolScopedRoleMember -RoleObjectId <guid> -AdministrativeUnitObjectId <guid> [-RoleMemberObjectId <guid>] [-RoleMemberUserPrincipalName <string>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MsolScopedRoleMember","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Remove-MsolScopedRoleMember
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MsolScopedRoleMember","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Remove-MsolServicePrincipal -ObjectId <guid> [-TenantId <guid>] [<CommonParameters>]

Remove-MsolServicePrincipal -AppPrincipalId <guid> [-TenantId <guid>] [<CommonParameters>]

Remove-MsolServicePrincipal -ServicePrincipalName <string> [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MsolServicePrincipal","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Remove-MsolServicePrincipal
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MsolServicePrincipal","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Remove-MsolServicePrincipalCredential -ObjectId <guid> -KeyIds <guid[]> [-TenantId <guid>] [<CommonParameters>]

Remove-MsolServicePrincipalCredential -KeyIds <guid[]> -AppPrincipalId <guid> [-TenantId <guid>] [<CommonParameters>]

Remove-MsolServicePrincipalCredential -KeyIds <guid[]> -ServicePrincipalName <string> [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MsolServicePrincipalCredential","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Remove-MsolServicePrincipalCredential
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MsolServicePrincipalCredential","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Remove-MsolUser -ObjectId <guid> [-RemoveFromRecycleBin] [-Force] [-TenantId <guid>] [<CommonParameters>]

Remove-MsolUser -UserPrincipalName <string> [-RemoveFromRecycleBin] [-Force] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MsolUser","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Remove-MsolUser
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-MsolUser","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113375",,,,,"
Remove-PSBreakpoint [-Breakpoint] <Breakpoint[]> [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-PSBreakpoint [-Id] <int[]> [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-PSBreakpoint","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113376",,,,,"
Remove-PSDrive [-Name] <string[]> [-PSProvider <string[]>] [-Scope <string>] [-Force] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]

Remove-PSDrive [-LiteralName] <string[]> [-PSProvider <string[]>] [-Scope <string>] [-Force] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-PSDrive","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135250",,,,,"
Remove-PSSession [-Id] <int[]> [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-PSSession [-Session] <PSSession[]> [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-PSSession -InstanceId <guid[]> [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-PSSession -Name <string[]> [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-PSSession [-ComputerName] <string[]> [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-PSSession","Cmdlet","Public","Microsoft.PowerShell.Core",,"OwnedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113378",,,,,"
Remove-PSSnapin [-Name] <string[]> [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-PSSnapin","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Remove-RoleMember
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-RoleMember","Cmdlet","Public","SQLASCMDLETS","SQLASCMDLETS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Remove-SqlAvailabilityDatabase
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-SqlAvailabilityDatabase","Cmdlet","Public","SQLPS","SQLPS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Remove-SqlAvailabilityGroup
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-SqlAvailabilityGroup","Cmdlet","Public","SQLPS","SQLPS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Remove-SqlAvailabilityReplica
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-SqlAvailabilityReplica","Cmdlet","Public","SQLPS","SQLPS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=217038",,,,,"
Remove-TypeData -TypeData <TypeData> [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-TypeData [-TypeName] <string> [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-TypeData -Path <string[]> [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-TypeData","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113380",,,,,"
Remove-Variable [-Name] <string[]> [-Include <string[]>] [-Exclude <string[]>] [-Force] [-Scope <string>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-Variable","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=289362",,,,,"Remove-WindowsDriver
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-WindowsDriver","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=273952",,,,,"Remove-WindowsImage
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-WindowsImage","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=289363",,,,,"Remove-WindowsPackage
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-WindowsPackage","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113381",,,,,"
Remove-WmiObject [-Class] <string> [-AsJob] [-Impersonation <ImpersonationLevel>] [-Authentication <AuthenticationLevel>] [-Locale <string>] [-EnableAllPrivileges] [-Authority <string>] [-Credential <pscredential>] [-ThrottleLimit <int>] [-ComputerName <string[]>] [-Namespace <string>] [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-WmiObject -InputObject <wmi> [-AsJob] [-ThrottleLimit <int>] [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-WmiObject -Path <string> [-AsJob] [-Impersonation <ImpersonationLevel>] [-Authentication <AuthenticationLevel>] [-Locale <string>] [-EnableAllPrivileges] [-Authority <string>] [-Credential <pscredential>] [-ThrottleLimit <int>] [-ComputerName <string[]>] [-Namespace <string>] [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-WmiObject [-AsJob] [-Impersonation <ImpersonationLevel>] [-Authentication <AuthenticationLevel>] [-Locale <string>] [-EnableAllPrivileges] [-Authority <string>] [-Credential <pscredential>] [-ThrottleLimit <int>] [-ComputerName <string[]>] [-Namespace <string>] [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-WmiObject [-AsJob] [-Impersonation <ImpersonationLevel>] [-Authentication <AuthenticationLevel>] [-Locale <string>] [-EnableAllPrivileges] [-Authority <string>] [-Credential <pscredential>] [-ThrottleLimit <int>] [-ComputerName <string[]>] [-Namespace <string>] [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-WmiObject [-AsJob] [-Impersonation <ImpersonationLevel>] [-Authentication <AuthenticationLevel>] [-Locale <string>] [-EnableAllPrivileges] [-Authority <string>] [-Credential <pscredential>] [-ThrottleLimit <int>] [-ComputerName <string[]>] [-Namespace <string>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-WmiObject","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","OwnedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Remove-WSManInstance
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-WSManInstance","Cmdlet","Public","Microsoft.WSMan.Management","Microsoft.WSMan.Management",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=219990",,,,,"
Rename-Computer [-NewName] <string> [-ComputerName <string>] [-PassThru] [-DomainCredential <pscredential>] [-LocalCredential <pscredential>] [-Force] [-Restart] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Rename-Computer","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","SupportedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113382",,,,,"
Rename-Item [-Path] <string> [-NewName] <string> [-Force] [-PassThru] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]

Rename-Item [-NewName] <string> -LiteralPath <string> [-Force] [-PassThru] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Rename-Item","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113383",,,,,"
Rename-ItemProperty [-Path] <string> [-Name] <string> [-NewName] <string> [-PassThru] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]

Rename-ItemProperty [-Name] <string> [-NewName] <string> -LiteralPath <string> [-PassThru] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Rename-ItemProperty","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=289364",,,,,"Repair-WindowsImage
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Repair-WindowsImage","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135252",,,,,"
Reset-ComputerMachinePassword [-Server <string>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Reset-ComputerMachinePassword","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Reset-MsolStrongAuthenticationMethodByUpn -UserPrincipalName <string> [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Reset-MsolStrongAuthenticationMethodByUpn","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Reset-MsolStrongAuthenticationMethodByUpn
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Reset-MsolStrongAuthenticationMethodByUpn","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Resolve-DnsName [-Name] <string> [[-Type] <RecordType>] [-Server <string[]>] [-DnsOnly] [-CacheOnly] [-DnssecOk] [-DnssecCd] [-NoHostsFile] [-LlmnrNetbiosOnly] [-LlmnrFallback] [-LlmnrOnly] [-NetbiosFallback] [-NoIdn] [-NoRecursion] [-QuickTimeout] [-TcpOnly] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Resolve-DnsName","Cmdlet","Public","DnsClient","DnsClient","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113384",,,,,"
Resolve-Path [-Path] <string[]> [-Relative] [-Credential <pscredential>] [-UseTransaction] [<CommonParameters>]

Resolve-Path -LiteralPath <string[]> [-Relative] [-Credential <pscredential>] [-UseTransaction] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Resolve-Path","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135253",,,,,"
Restart-Computer [[-ComputerName] <string[]>] [[-Credential] <pscredential>] [-DcomAuthentication <AuthenticationLevel>] [-Impersonation <ImpersonationLevel>] [-WsmanAuthentication <string>] [-Protocol <string>] [-Force] [-Wait] [-Timeout <int>] [-For <WaitForServiceTypes>] [-Delay <int16>] [-WhatIf] [-Confirm] [<CommonParameters>]

Restart-Computer [[-ComputerName] <string[]>] [[-Credential] <pscredential>] [-AsJob] [-DcomAuthentication <AuthenticationLevel>] [-Impersonation <ImpersonationLevel>] [-Force] [-ThrottleLimit <int>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Restart-Computer","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","OwnedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113385",,,,,"
Restart-Service [-InputObject] <ServiceController[]> [-Force] [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]

Restart-Service [-Name] <string[]> [-Force] [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]

Restart-Service -DisplayName <string[]> [-Force] [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Restart-Service","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Restore-ASDatabase
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Restore-ASDatabase","Cmdlet","Public","SQLASCMDLETS","SQLASCMDLETS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135254",,,,,"
Restore-Computer [-RestorePoint] <int> [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Restore-Computer","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Restore-MsolUser -ObjectId <guid> [-AutoReconcileProxyConflicts] [-NewUserPrincipalName <string>] [-TenantId <guid>] [<CommonParameters>]

Restore-MsolUser -UserPrincipalName <string> [-AutoReconcileProxyConflicts] [-NewUserPrincipalName <string>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Restore-MsolUser","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Restore-MsolUser
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Restore-MsolUser","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Restore-SqlDatabase
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Restore-SqlDatabase","Cmdlet","Public","SQLPS","SQLPS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Resume-BitsTransfer
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Resume-BitsTransfer","Cmdlet","Public","BitsTransfer","BitsTransfer",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=210611",,,,,"
Resume-Job [-Id] <int[]> [-Wait] [-WhatIf] [-Confirm] [<CommonParameters>]

Resume-Job [-Job] <Job[]> [-Wait] [-WhatIf] [-Confirm] [<CommonParameters>]

Resume-Job [-Name] <string[]> [-Wait] [-WhatIf] [-Confirm] [<CommonParameters>]

Resume-Job [-InstanceId] <guid[]> [-Wait] [-WhatIf] [-Confirm] [<CommonParameters>]

Resume-Job [-State] <JobState> [-Wait] [-WhatIf] [-Confirm] [<CommonParameters>]

Resume-Job [-Filter] <hashtable> [-Wait] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Resume-Job","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113386",,,,,"
Resume-Service [-InputObject] <ServiceController[]> [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]

Resume-Service [-Name] <string[]> [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]

Resume-Service -DisplayName <string[]> [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Resume-Service","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Resume-SqlAvailabilityDatabase
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Resume-SqlAvailabilityDatabase","Cmdlet","Public","SQLPS","SQLPS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=210612",,,,,"
Save-Help [-DestinationPath] <string[]> [[-Module] <psmoduleinfo[]>] [[-UICulture] <cultureinfo[]>] [-Credential <pscredential>] [-UseDefaultCredentials] [-Force] [<CommonParameters>]

Save-Help [[-Module] <psmoduleinfo[]>] [[-UICulture] <cultureinfo[]>] -LiteralPath <string[]> [-Credential <pscredential>] [-UseDefaultCredentials] [-Force] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Save-Help","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=289365",,,,,"Save-WindowsImage
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Save-WindowsImage","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113387",,,,,"
Select-Object [[-Property] <Object[]>] [-InputObject <psobject>] [-ExcludeProperty <string[]>] [-ExpandProperty <string>] [-Unique] [-Last <int>] [-First <int>] [-Skip <int>] [-Wait] [<CommonParameters>]

Select-Object [-InputObject <psobject>] [-Unique] [-Wait] [-Index <int[]>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Select-Object","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113388",,,,,"
Select-String [-Pattern] <string[]> [-Path] <string[]> [-SimpleMatch] [-CaseSensitive] [-Quiet] [-List] [-Include <string[]>] [-Exclude <string[]>] [-NotMatch] [-AllMatches] [-Encoding <string>] [-Context <int[]>] [<CommonParameters>]

Select-String [-Pattern] <string[]> -InputObject <psobject> [-SimpleMatch] [-CaseSensitive] [-Quiet] [-List] [-Include <string[]>] [-Exclude <string[]>] [-NotMatch] [-AllMatches] [-Encoding <string>] [-Context <int[]>] [<CommonParameters>]

Select-String [-Pattern] <string[]> -LiteralPath <string[]> [-SimpleMatch] [-CaseSensitive] [-Quiet] [-List] [-Include <string[]>] [-Exclude <string[]>] [-NotMatch] [-AllMatches] [-Encoding <string>] [-Context <int[]>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Select-String","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135255",,,,,"
Select-Xml [-XPath] <string> [-Xml] <XmlNode[]> [-Namespace <hashtable>] [<CommonParameters>]

Select-Xml [-XPath] <string> [-Path] <string[]> [-Namespace <hashtable>] [<CommonParameters>]

Select-Xml [-XPath] <string> -LiteralPath <string[]> [-Namespace <hashtable>] [<CommonParameters>]

Select-Xml [-XPath] <string> -Content <string[]> [-Namespace <hashtable>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Select-Xml","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Send-DtcDiagnosticTransaction
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Send-DtcDiagnosticTransaction","Cmdlet","Public","MsDtc","MsDtc",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135256",,,,,"
Send-MailMessage [-To] <string[]> [-Subject] <string> [[-Body] <string>] [[-SmtpServer] <string>] -From <string> [-Attachments <string[]>] [-Bcc <string[]>] [-BodyAsHtml] [-Encoding <Encoding>] [-Cc <string[]>] [-DeliveryNotificationOption <DeliveryNotificationOptions>] [-Priority <MailPriority>] [-Credential <pscredential>] [-UseSsl] [-Port <int>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Send-MailMessage","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113389",,,,,"
Set-Acl [-Path] <string[]> [-AclObject] <Object> [[-CentralAccessPolicy] <string>] [-ClearCentralAccessPolicy] [-Passthru] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]

Set-Acl [-InputObject] <psobject> [-AclObject] <Object> [-Passthru] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]

Set-Acl [-AclObject] <Object> [[-CentralAccessPolicy] <string>] -LiteralPath <string[]> [-ClearCentralAccessPolicy] [-Passthru] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-Acl","Cmdlet","Public","Microsoft.PowerShell.Security","Microsoft.PowerShell.Security","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113390",,,,,"
Set-Alias [-Name] <string> [-Value] <string> [-Description <string>] [-Option <ScopedItemOptions>] [-PassThru] [-Scope <string>] [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-Alias","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-AppBackgroundTaskResourcePolicy
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-AppBackgroundTaskResourcePolicy","Cmdlet","Public","AppBackgroundTask","AppBackgroundTask",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=293633",,,,,"Set-AppXProvisionedDataFile
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-AppXProvisionedDataFile","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113391",,,,,"
Set-AuthenticodeSignature [-FilePath] <string[]> [-Certificate] <X509Certificate2> [-IncludeChain <string>] [-TimestampServer <string>] [-HashAlgorithm <string>] [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]

Set-AuthenticodeSignature [-Certificate] <X509Certificate2> -LiteralPath <string[]> [-IncludeChain <string>] [-TimestampServer <string>] [-HashAlgorithm <string>] [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-AuthenticodeSignature","Cmdlet","Public","Microsoft.PowerShell.Security","Microsoft.PowerShell.Security","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-BitsTransfer
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-BitsTransfer","Cmdlet","Public","BitsTransfer","BitsTransfer",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-CertificateAutoEnrollmentPolicy
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-CertificateAutoEnrollmentPolicy","Cmdlet","Public","PKI","PKI",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-CimInstance
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-CimInstance","Cmdlet","Public","CimCmdlets","CimCmdlets",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113392",,,,,"
Set-Content [-Path] <string[]> [-Value] <Object[]> [-PassThru] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Force] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [-Encoding <FileSystemCmdletProviderEncoding>] [-Stream <string>] [<CommonParameters>]

Set-Content [-Value] <Object[]> -LiteralPath <string[]> [-PassThru] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Force] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [-Encoding <FileSystemCmdletProviderEncoding>] [-Stream <string>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-Content","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-Culture
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-Culture","Cmdlet","Public","International","International",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113393",,,,,"
Set-Date [-Date] <datetime> [-DisplayHint <DisplayHintType>] [-WhatIf] [-Confirm] [<CommonParameters>]

Set-Date [-Adjust] <timespan> [-DisplayHint <DisplayHintType>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-Date","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-DscLocalConfigurationManager
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-DscLocalConfigurationManager","Cmdlet","Public","PSDesiredStateConfiguration","PSDesiredStateConfiguration",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113394",,,,,"
Set-ExecutionPolicy [-ExecutionPolicy] <ExecutionPolicy> [[-Scope] <ExecutionPolicyScope>] [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-ExecutionPolicy","Cmdlet","Public","Microsoft.PowerShell.Security","Microsoft.PowerShell.Security","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113395",,,,,"
Set-Item [-Path] <string[]> [[-Value] <Object>] [-Force] [-PassThru] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]

Set-Item [[-Value] <Object>] -LiteralPath <string[]> [-Force] [-PassThru] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-Item","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113396",,,,,"
Set-ItemProperty [-Path] <string[]> [-Name] <string> [-Value] <Object> [-PassThru] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]

Set-ItemProperty [-Path] <string[]> -InputObject <psobject> [-PassThru] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]

Set-ItemProperty -LiteralPath <string[]> -InputObject <psobject> [-PassThru] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]

Set-ItemProperty [-Name] <string> [-Value] <Object> -LiteralPath <string[]> [-PassThru] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-UseTransaction] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-ItemProperty","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-JobTrigger
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-JobTrigger","Cmdlet","Public","PSScheduledJob","PSScheduledJob",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-KdsConfiguration
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-KdsConfiguration","Cmdlet","Public","Kds","Kds",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113397",,,,,"
Set-Location [[-Path] <string>] [-PassThru] [-UseTransaction] [<CommonParameters>]

Set-Location -LiteralPath <string> [-PassThru] [-UseTransaction] [<CommonParameters>]

Set-Location [-PassThru] [-StackName <string>] [-UseTransaction] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-Location","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Set-MsolADFSContext -Computer <string> [-ADFSUserCredentials <pscredential>] [-LogFile <string>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolADFSContext","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Set-MsolAdministrativeUnit [-ObjectId <guid>] [-DisplayName <string>] [-Description <string>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolAdministrativeUnit","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-MsolAdministrativeUnit
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolAdministrativeUnit","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Set-MsolCompanyContactInformation [-TechnicalNotificationEmails <string[]>] [-MarketingNotificationEmails <string[]>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolCompanyContactInformation","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-MsolCompanyContactInformation
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolCompanyContactInformation","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Set-MsolCompanySecurityComplianceContactInformation [-SecurityComplianceNotificationEmails <string[]>] [-SecurityComplianceNotificationPhones <string[]>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolCompanySecurityComplianceContactInformation","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-MsolCompanySecurityComplianceContactInformation
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolCompanySecurityComplianceContactInformation","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Set-MsolCompanySettings [-SelfServePasswordResetEnabled <bool>] [-UsersPermissionToCreateGroupsEnabled <bool>] [-UsersPermissionToCreateLOBAppsEnabled <bool>] [-UsersPermissionToReadOtherUsersEnabled <bool>] [-UsersPermissionToUserConsentToAppEnabled <bool>] [-DefaultUsageLocation <string>] [-AllowAdHocSubscriptions <bool>] [-AllowEmailVerifiedUsers <bool>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolCompanySettings","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-MsolCompanySettings
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolCompanySettings","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Set-MsolDirSyncConfiguration -AccidentalDeletionThreshold <uint32> [-Force] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolDirSyncConfiguration","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-MsolDirSyncConfiguration
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolDirSyncConfiguration","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Set-MsolDirSyncEnabled -EnableDirSync <bool> [-Force] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolDirSyncEnabled","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-MsolDirSyncEnabled
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolDirSyncEnabled","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Set-MsolDirSyncFeature -Feature <string> -Enable <bool> [-Force] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolDirSyncFeature","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-MsolDirSyncFeature
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolDirSyncFeature","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Set-MsolDomain [-Name <string>] [-IsDefault] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolDomain","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-MsolDomain
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolDomain","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Set-MsolDomainAuthentication -DomainName <string> -Authentication <DomainAuthenticationType> [-SigningCertificate <string>] [-NextSigningCertificate <string>] [-LogOffUri <string>] [-PassiveLogOnUri <string>] [-ActiveLogOnUri <string>] [-IssuerUri <string>] [-FederationBrandName <string>] [-MetadataExchangeUri <string>] [-PreferredAuthenticationProtocol <AuthenticationProtocol>] [-SupportsMfa <bool>] [-DefaultInteractiveAuthenticationMethod <string>] [-OpenIdConnectDiscoveryEndpoint <string>] [-SigningCertificateUpdateStatus <SigningCertificateUpdateStatus>] [-PromptLoginBehavior <PromptLoginBehavior>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolDomainAuthentication","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-MsolDomainAuthentication
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolDomainAuthentication","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Set-MsolDomainFederationSettings -DomainName <string> [-SigningCertificate <string>] [-NextSigningCertificate <string>] [-LogOffUri <string>] [-PassiveLogOnUri <string>] [-ActiveLogOnUri <string>] [-IssuerUri <string>] [-FederationBrandName <string>] [-MetadataExchangeUri <string>] [-PreferredAuthenticationProtocol <AuthenticationProtocol>] [-SupportsMfa <bool>] [-DefaultInteractiveAuthenticationMethod <string>] [-OpenIdConnectDiscoveryEndpoint <string>] [-SigningCertificateUpdateStatus <SigningCertificateUpdateStatus>] [-PromptLoginBehavior <PromptLoginBehavior>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolDomainFederationSettings","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-MsolDomainFederationSettings
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolDomainFederationSettings","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Set-MsolGroup [-ObjectId <guid>] [-DisplayName <string>] [-Description <string>] [-ManagedBy <string>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolGroup","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-MsolGroup
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolGroup","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Set-MsolPartnerInformation [-ObjectId <guid>] [-CompanyType <CompanyType>] [-PartnerCompanyName <string>] [-PartnerSupportTelephones <string[]>] [-PartnerSupportEmails <string[]>] [-PartnerCommerceUrl <string>] [-PartnerSupportUrl <string>] [-PartnerHelpUrl <string>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolPartnerInformation","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-MsolPartnerInformation
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolPartnerInformation","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Set-MsolPasswordPolicy -DomainName <string> [-ValidityPeriod <uint32>] [-NotificationDays <uint32>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolPasswordPolicy","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-MsolPasswordPolicy
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolPasswordPolicy","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Set-MsolServicePrincipal [-ObjectId <guid>] [-AppPrincipalId <guid>] [-DisplayName <string>] [-ServicePrincipalNames <string[]>] [-AccountEnabled <bool>] [-Addresses <RedirectUri[]>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolServicePrincipal","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-MsolServicePrincipal
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolServicePrincipal","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Set-MsolUser [-ImmutableId <string>] [-ObjectId <guid>] [-UserPrincipalName <string>] [-BlockCredential <bool>] [-City <string>] [-Country <string>] [-Department <string>] [-DisplayName <string>] [-Fax <string>] [-FirstName <string>] [-LastName <string>] [-LastPasswordChangeTimestamp <datetime>] [-MobilePhone <string>] [-Office <string>] [-PasswordNeverExpires <bool>] [-PhoneNumber <string>] [-PostalCode <string>] [-PreferredLanguage <string>] [-SoftDeletionTimestamp <datetime>] [-State <string>] [-StreetAddress <string>] [-StrongPasswordRequired <bool>] [-Title <string>] [-UsageLocation <string>] [-AlternateEmailAddresses <string[]>] [-StrongAuthenticationMethods <StrongAuthenticationMethod[]>] [-AlternateMobilePhones <string[]>] [-StrongAuthenticationRequirements <StrongAuthenticationRequirement[]>] [-StsRefreshTokensValidFrom <datetime>] [-UserType <UserType>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolUser","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-MsolUser
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolUser","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Set-MsolUserLicense -ObjectId <guid> [-LicenseOptions <LicenseOption[]>] [-AddLicenses <string[]>] [-RemoveLicenses <string[]>] [-TenantId <guid>] [<CommonParameters>]

Set-MsolUserLicense -UserPrincipalName <string> [-LicenseOptions <LicenseOption[]>] [-AddLicenses <string[]>] [-RemoveLicenses <string[]>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolUserLicense","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-MsolUserLicense
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolUserLicense","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Set-MsolUserPassword -ObjectId <guid> [-NewPassword <string>] [-ForceChangePassword <bool>] [-ForceChangePasswordOnly <bool>] [-TenantId <guid>] [<CommonParameters>]

Set-MsolUserPassword -UserPrincipalName <string> [-NewPassword <string>] [-ForceChangePassword <bool>] [-ForceChangePasswordOnly <bool>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolUserPassword","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-MsolUserPassword
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolUserPassword","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Set-MsolUserPrincipalName -ObjectId <guid> -NewUserPrincipalName <string> [-ImmutableId <string>] [-NewPassword <string>] [-TenantId <guid>] [<CommonParameters>]

Set-MsolUserPrincipalName -NewUserPrincipalName <string> -UserPrincipalName <string> [-ImmutableId <string>] [-NewPassword <string>] [-TenantId <guid>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolUserPrincipalName","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-MsolUserPrincipalName
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MsolUserPrincipalName","Cmdlet","Public","MSOnlineExtended","MSOnlineExtended",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113449",,,,,"
Set-PSBreakpoint [-Script] <string[]> [-Line] <int[]> [[-Column] <int>] [-Action <scriptblock>] [<CommonParameters>]

Set-PSBreakpoint [[-Script] <string[]>] -Command <string[]> [-Action <scriptblock>] [<CommonParameters>]

Set-PSBreakpoint [[-Script] <string[]>] -Variable <string[]> [-Action <scriptblock>] [-Mode <VariableAccessMode>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-PSBreakpoint","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113398",,,,,"
Set-PSDebug [-Trace <int>] [-Step] [-Strict] [<CommonParameters>]

Set-PSDebug [-Off] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-PSDebug","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=144307",,,,,"
Set-PSSessionConfiguration [-Name] <string> [-ApplicationBase <string>] [-RunAsCredential <pscredential>] [-ThreadApartmentState <ApartmentState>] [-ThreadOptions <PSThreadOptions>] [-AccessMode <PSSessionConfigurationAccessMode>] [-UseSharedProcess] [-StartupScript <string>] [-MaximumReceivedDataSizePerCommandMB <double>] [-MaximumReceivedObjectSizeMB <double>] [-SecurityDescriptorSddl <string>] [-ShowSecurityDescriptorUI] [-Force] [-NoServiceRestart] [-PSVersion <version>] [-SessionTypeOption <PSSessionTypeOption>] [-TransportOption <PSTransportOption>] [-ModulesToImport <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]

Set-PSSessionConfiguration [-Name] <string> [-AssemblyName] <string> [-ConfigurationTypeName] <string> [-ApplicationBase <string>] [-RunAsCredential <pscredential>] [-ThreadApartmentState <ApartmentState>] [-ThreadOptions <PSThreadOptions>] [-AccessMode <PSSessionConfigurationAccessMode>] [-UseSharedProcess] [-StartupScript <string>] [-MaximumReceivedDataSizePerCommandMB <double>] [-MaximumReceivedObjectSizeMB <double>] [-SecurityDescriptorSddl <string>] [-ShowSecurityDescriptorUI] [-Force] [-NoServiceRestart] [-PSVersion <version>] [-SessionTypeOption <PSSessionTypeOption>] [-TransportOption <PSTransportOption>] [-ModulesToImport <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]

Set-PSSessionConfiguration [-Name] <string> -Path <string> [-RunAsCredential <pscredential>] [-ThreadApartmentState <ApartmentState>] [-ThreadOptions <PSThreadOptions>] [-AccessMode <PSSessionConfigurationAccessMode>] [-UseSharedProcess] [-StartupScript <string>] [-MaximumReceivedDataSizePerCommandMB <double>] [-MaximumReceivedObjectSizeMB <double>] [-SecurityDescriptorSddl <string>] [-ShowSecurityDescriptorUI] [-Force] [-NoServiceRestart] [-TransportOption <PSTransportOption>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-PSSessionConfiguration","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-ScheduledJob
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-ScheduledJob","Cmdlet","Public","PSScheduledJob","PSScheduledJob",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-ScheduledJobOption
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-ScheduledJobOption","Cmdlet","Public","PSScheduledJob","PSScheduledJob",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-SecureBootUEFI
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-SecureBootUEFI","Cmdlet","Public","SecureBoot","SecureBoot",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113399",,,,,"
Set-Service [-Name] <string> [-ComputerName <string[]>] [-DisplayName <string>] [-Description <string>] [-StartupType <ServiceStartMode>] [-Status <string>] [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]

Set-Service [-ComputerName <string[]>] [-DisplayName <string>] [-Description <string>] [-StartupType <ServiceStartMode>] [-Status <string>] [-InputObject <ServiceController>] [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-Service","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","SupportedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-SqlAvailabilityGroup
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-SqlAvailabilityGroup","Cmdlet","Public","SQLPS","SQLPS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-SqlAvailabilityGroupListener
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-SqlAvailabilityGroupListener","Cmdlet","Public","SQLPS","SQLPS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-SqlAvailabilityReplica
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-SqlAvailabilityReplica","Cmdlet","Public","SQLPS","SQLPS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-SqlHADREndpoint
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-SqlHADREndpoint","Cmdlet","Public","SQLPS","SQLPS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113450",,,,,"
Set-StrictMode -Version <version> [<CommonParameters>]

Set-StrictMode -Off [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-StrictMode","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-TpmOwnerAuth
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-TpmOwnerAuth","Cmdlet","Public","TrustedPlatformModule","TrustedPlatformModule",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113400",,,,,"
Set-TraceSource [-Name] <string[]> [[-Option] <PSTraceSourceOptions>] [-ListenerOption <TraceOptions>] [-FilePath <string>] [-Force] [-Debugger] [-PSHost] [-PassThru] [<CommonParameters>]

Set-TraceSource [-Name] <string[]> [-RemoveListener <string[]>] [<CommonParameters>]

Set-TraceSource [-Name] <string[]> [-RemoveFileListener <string[]>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-TraceSource","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113401",,,,,"
Set-Variable [-Name] <string[]> [[-Value] <Object>] [-Include <string[]>] [-Exclude <string[]>] [-Description <string>] [-Option <ScopedItemOptions>] [-Force] [-Visibility <SessionStateEntryVisibility>] [-PassThru] [-Scope <string>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-Variable","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-WinAcceptLanguageFromLanguageListOptOut
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-WinAcceptLanguageFromLanguageListOptOut","Cmdlet","Public","International","International",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-WinCultureFromLanguageListOptOut
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-WinCultureFromLanguageListOptOut","Cmdlet","Public","International","International",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-WinDefaultInputMethodOverride
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-WinDefaultInputMethodOverride","Cmdlet","Public","International","International",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=289366",,,,,"Set-WindowsEdition
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-WindowsEdition","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=289367",,,,,"Set-WindowsProductKey
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-WindowsProductKey","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-WindowsSearchSetting
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-WindowsSearchSetting","Cmdlet","Public","WindowsSearch","WindowsSearch",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-WinHomeLocation
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-WinHomeLocation","Cmdlet","Public","International","International",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-WinLanguageBarOption
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-WinLanguageBarOption","Cmdlet","Public","International","International",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-WinSystemLocale
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-WinSystemLocale","Cmdlet","Public","International","International",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-WinUILanguageOverride
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-WinUILanguageOverride","Cmdlet","Public","International","International",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-WinUserLanguageList
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-WinUserLanguageList","Cmdlet","Public","International","International",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113402",,,,,"
Set-WmiInstance [-Class] <string> [[-Arguments] <hashtable>] [-PutType <PutType>] [-AsJob] [-Impersonation <ImpersonationLevel>] [-Authentication <AuthenticationLevel>] [-Locale <string>] [-EnableAllPrivileges] [-Authority <string>] [-Credential <pscredential>] [-ThrottleLimit <int>] [-ComputerName <string[]>] [-Namespace <string>] [-WhatIf] [-Confirm] [<CommonParameters>]

Set-WmiInstance -InputObject <wmi> [-Arguments <hashtable>] [-PutType <PutType>] [-AsJob] [-ThrottleLimit <int>] [-WhatIf] [-Confirm] [<CommonParameters>]

Set-WmiInstance -Path <string> [-Arguments <hashtable>] [-PutType <PutType>] [-AsJob] [-Impersonation <ImpersonationLevel>] [-Authentication <AuthenticationLevel>] [-Locale <string>] [-EnableAllPrivileges] [-Authority <string>] [-Credential <pscredential>] [-ThrottleLimit <int>] [-ComputerName <string[]>] [-Namespace <string>] [-WhatIf] [-Confirm] [<CommonParameters>]

Set-WmiInstance [-PutType <PutType>] [-AsJob] [-Impersonation <ImpersonationLevel>] [-Authentication <AuthenticationLevel>] [-Locale <string>] [-EnableAllPrivileges] [-Authority <string>] [-Credential <pscredential>] [-ThrottleLimit <int>] [-ComputerName <string[]>] [-Namespace <string>] [-WhatIf] [-Confirm] [<CommonParameters>]

Set-WmiInstance [-PutType <PutType>] [-AsJob] [-Impersonation <ImpersonationLevel>] [-Authentication <AuthenticationLevel>] [-Locale <string>] [-EnableAllPrivileges] [-Authority <string>] [-Credential <pscredential>] [-ThrottleLimit <int>] [-ComputerName <string[]>] [-Namespace <string>] [-WhatIf] [-Confirm] [<CommonParameters>]

Set-WmiInstance [-PutType <PutType>] [-AsJob] [-Impersonation <ImpersonationLevel>] [-Authentication <AuthenticationLevel>] [-Locale <string>] [-EnableAllPrivileges] [-Authority <string>] [-Credential <pscredential>] [-ThrottleLimit <int>] [-ComputerName <string[]>] [-Namespace <string>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-WmiInstance","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","OwnedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-WSManInstance
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-WSManInstance","Cmdlet","Public","Microsoft.WSMan.Management","Microsoft.WSMan.Management",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Set-WSManQuickConfig
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-WSManQuickConfig","Cmdlet","Public","Microsoft.WSMan.Management","Microsoft.WSMan.Management",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=217448",,,,,"
Show-Command [[-Name] <string>] [-Height <double>] [-Width <double>] [-NoCommonParameter] [-ErrorPopup] [-PassThru] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Show-Command","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=219983",,,,,"
Show-ControlPanelItem [-Name] <string[]> [<CommonParameters>]

Show-ControlPanelItem -CanonicalName <string[]> [<CommonParameters>]

Show-ControlPanelItem [[-InputObject] <ControlPanelItem[]>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Show-ControlPanelItem","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135257",,,,,"
Show-EventLog [[-ComputerName] <string>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Show-EventLog","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","SupportedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113403",,,,,"
Sort-Object [[-Property] <Object[]>] [-Descending] [-Unique] [-InputObject <psobject>] [-Culture <string>] [-CaseSensitive] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Sort-Object","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113404",,,,,"
Split-Path [-Path] <string[]> [-Parent] [-Resolve] [-Credential <pscredential>] [-UseTransaction] [<CommonParameters>]

Split-Path [-Path] <string[]> [-Qualifier] [-Resolve] [-Credential <pscredential>] [-UseTransaction] [<CommonParameters>]

Split-Path [-Path] <string[]> [-NoQualifier] [-Resolve] [-Credential <pscredential>] [-UseTransaction] [<CommonParameters>]

Split-Path [-Path] <string[]> [-Leaf] [-Resolve] [-Credential <pscredential>] [-UseTransaction] [<CommonParameters>]

Split-Path [-Path] <string[]> [-Resolve] [-IsAbsolute] [-Credential <pscredential>] [-UseTransaction] [<CommonParameters>]

Split-Path -LiteralPath <string[]> [-Resolve] [-Credential <pscredential>] [-UseTransaction] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Split-Path","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=273953",,,,,"Split-WindowsImage
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Split-WindowsImage","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Start-BitsTransfer
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Start-BitsTransfer","Cmdlet","Public","BitsTransfer","BitsTransfer",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Start-DscConfiguration
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Start-DscConfiguration","Cmdlet","Public","PSDesiredStateConfiguration","PSDesiredStateConfiguration",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Start-DtcDiagnosticResourceManager
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Start-DtcDiagnosticResourceManager","Cmdlet","Public","MsDtc","MsDtc",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113405",,,,,"
Start-Job [-ScriptBlock] <scriptblock> [[-InitializationScript] <scriptblock>] [-Name <string>] [-Credential <pscredential>] [-Authentication <AuthenticationMechanism>] [-RunAs32] [-PSVersion <version>] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]

Start-Job [-DefinitionName] <string> [[-DefinitionPath] <string>] [[-Type] <string>] [<CommonParameters>]

Start-Job [-FilePath] <string> [[-InitializationScript] <scriptblock>] [-Name <string>] [-Credential <pscredential>] [-Authentication <AuthenticationMechanism>] [-RunAs32] [-PSVersion <version>] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]

Start-Job [[-InitializationScript] <scriptblock>] -LiteralPath <string> [-Name <string>] [-Credential <pscredential>] [-Authentication <AuthenticationMechanism>] [-RunAs32] [-PSVersion <version>] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Start-Job","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135261",,,,,"
Start-Process [-FilePath] <string> [[-ArgumentList] <string[]>] [-Credential <pscredential>] [-WorkingDirectory <string>] [-LoadUserProfile] [-NoNewWindow] [-PassThru] [-RedirectStandardError <string>] [-RedirectStandardInput <string>] [-RedirectStandardOutput <string>] [-Wait] [-WindowStyle <ProcessWindowStyle>] [-UseNewEnvironment] [<CommonParameters>]

Start-Process [-FilePath] <string> [[-ArgumentList] <string[]>] [-WorkingDirectory <string>] [-PassThru] [-Verb <string>] [-Wait] [-WindowStyle <ProcessWindowStyle>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Start-Process","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113406",,,,,"
Start-Service [-InputObject] <ServiceController[]> [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]

Start-Service [-Name] <string[]> [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]

Start-Service -DisplayName <string[]> [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Start-Service","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113407",,,,,"
Start-Sleep [-Seconds] <int> [<CommonParameters>]

Start-Sleep -Milliseconds <int> [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Start-Sleep","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135262",,,,,"
Start-Transaction [-Timeout <int>] [-Independent] [-RollbackPreference <RollbackSeverity>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Start-Transaction","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Start-Transcript
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Start-Transcript","Cmdlet","Public","Microsoft.PowerShell.Host","Microsoft.PowerShell.Host",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135263",,,,,"
Stop-Computer [[-ComputerName] <string[]>] [[-Credential] <pscredential>] [-AsJob] [-Authentication <AuthenticationLevel>] [-Impersonation <ImpersonationLevel>] [-ThrottleLimit <int>] [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Stop-Computer","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","SupportedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Stop-DtcDiagnosticResourceManager
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Stop-DtcDiagnosticResourceManager","Cmdlet","Public","MsDtc","MsDtc",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113413",,,,,"
Stop-Job [-Id] <int[]> [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]

Stop-Job [-Job] <Job[]> [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]

Stop-Job [-Name] <string[]> [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]

Stop-Job [-InstanceId] <guid[]> [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]

Stop-Job [-State] <JobState> [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]

Stop-Job [-Filter] <hashtable> [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Stop-Job","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113412",,,,,"
Stop-Process [-Id] <int[]> [-PassThru] [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]

Stop-Process -Name <string[]> [-PassThru] [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]

Stop-Process [-InputObject] <Process[]> [-PassThru] [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Stop-Process","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113414",,,,,"
Stop-Service [-InputObject] <ServiceController[]> [-Force] [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]

Stop-Service [-Name] <string[]> [-Force] [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]

Stop-Service -DisplayName <string[]> [-Force] [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Stop-Service","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Stop-Transcript
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Stop-Transcript","Cmdlet","Public","Microsoft.PowerShell.Host","Microsoft.PowerShell.Host",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Suspend-BitsTransfer
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Suspend-BitsTransfer","Cmdlet","Public","BitsTransfer","BitsTransfer",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=210613",,,,,"
Suspend-Job [-Id] <int[]> [-Force] [-Wait] [-WhatIf] [-Confirm] [<CommonParameters>]

Suspend-Job [-Job] <Job[]> [-Force] [-Wait] [-WhatIf] [-Confirm] [<CommonParameters>]

Suspend-Job [-InstanceId] <guid[]> [-Force] [-Wait] [-WhatIf] [-Confirm] [<CommonParameters>]

Suspend-Job [-Name] <string[]> [-Force] [-Wait] [-WhatIf] [-Confirm] [<CommonParameters>]

Suspend-Job [-State] <JobState> [-Force] [-Wait] [-WhatIf] [-Confirm] [<CommonParameters>]

Suspend-Job [-Filter] <hashtable> [-Force] [-Wait] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Suspend-Job","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113416",,,,,"
Suspend-Service [-InputObject] <ServiceController[]> [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]

Suspend-Service [-Name] <string[]> [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]

Suspend-Service -DisplayName <string[]> [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Suspend-Service","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Suspend-SqlAvailabilityDatabase
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Suspend-SqlAvailabilityDatabase","Cmdlet","Public","SQLPS","SQLPS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Switch-Certificate
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Switch-Certificate","Cmdlet","Public","PKI","PKI",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Switch-SqlAvailabilityGroup
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Switch-SqlAvailabilityGroup","Cmdlet","Public","SQLPS","SQLPS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113417",,,,,"
Tee-Object [-FilePath] <string> [-InputObject <psobject>] [-Append] [<CommonParameters>]

Tee-Object -LiteralPath <string> [-InputObject <psobject>] [<CommonParameters>]

Tee-Object -Variable <string> [-InputObject <psobject>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Tee-Object","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Test-Certificate
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Test-Certificate","Cmdlet","Public","PKI","PKI",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=137749",,,,,"
Test-ComputerSecureChannel [-Repair] [-Server <string>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Test-ComputerSecureChannel","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135266",,,,,"
Test-Connection [-ComputerName] <string[]> [-AsJob] [-Authentication <AuthenticationLevel>] [-BufferSize <int>] [-Count <int>] [-Impersonation <ImpersonationLevel>] [-ThrottleLimit <int>] [-TimeToLive <int>] [-Delay <int>] [<CommonParameters>]

Test-Connection [-ComputerName] <string[]> [-Source] <string[]> [-AsJob] [-Authentication <AuthenticationLevel>] [-BufferSize <int>] [-Count <int>] [-Credential <pscredential>] [-Impersonation <ImpersonationLevel>] [-ThrottleLimit <int>] [-TimeToLive <int>] [-Delay <int>] [<CommonParameters>]

Test-Connection [-ComputerName] <string[]> [-Authentication <AuthenticationLevel>] [-BufferSize <int>] [-Count <int>] [-Impersonation <ImpersonationLevel>] [-TimeToLive <int>] [-Delay <int>] [-Quiet] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Test-Connection","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","OwnedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Test-KdsRootKey
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Test-KdsRootKey","Cmdlet","Public","Kds","Kds",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=141557",,,,,"
Test-ModuleManifest [-Path] <string> [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Test-ModuleManifest","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113418",,,,,"
Test-Path [-Path] <string[]> [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-PathType <TestPathType>] [-IsValid] [-Credential <pscredential>] [-UseTransaction] [-OlderThan <datetime>] [-NewerThan <datetime>] [<CommonParameters>]

Test-Path -LiteralPath <string[]> [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-PathType <TestPathType>] [-IsValid] [-Credential <pscredential>] [-UseTransaction] [-OlderThan <datetime>] [-NewerThan <datetime>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Test-Path","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=217039",,,,,"
Test-PSSessionConfigurationFile [-Path] <string> [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Test-PSSessionConfigurationFile","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Test-SqlAvailabilityGroup
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Test-SqlAvailabilityGroup","Cmdlet","Public","SQLPS","SQLPS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Test-SqlAvailabilityReplica
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Test-SqlAvailabilityReplica","Cmdlet","Public","SQLPS","SQLPS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Test-SqlDatabaseReplicaState
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Test-SqlDatabaseReplicaState","Cmdlet","Public","SQLPS","SQLPS",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Test-WSMan
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Test-WSMan","Cmdlet","Public","Microsoft.WSMan.Management","Microsoft.WSMan.Management",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113419",,,,,"
Trace-Command [-Name] <string[]> [-Expression] <scriptblock> [[-Option] <PSTraceSourceOptions>] [-InputObject <psobject>] [-ListenerOption <TraceOptions>] [-FilePath <string>] [-Force] [-Debugger] [-PSHost] [<CommonParameters>]

Trace-Command [-Name] <string[]> [-Command] <string> [[-Option] <PSTraceSourceOptions>] [-InputObject <psobject>] [-ArgumentList <Object[]>] [-ListenerOption <TraceOptions>] [-FilePath <string>] [-Force] [-Debugger] [-PSHost] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Trace-Command","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=217450",,,,,"
Unblock-File [-Path] <string[]> [-WhatIf] [-Confirm] [<CommonParameters>]

Unblock-File -LiteralPath <string[]> [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Unblock-File","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Unblock-Tpm
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Unblock-Tpm","Cmdlet","Public","TrustedPlatformModule","TrustedPlatformModule",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Undo-DtcDiagnosticTransaction
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Undo-DtcDiagnosticTransaction","Cmdlet","Public","MsDtc","MsDtc",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135268",,,,,"
Undo-Transaction [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Undo-Transaction","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=394374",,,,,"
Unprotect-CmsMessage [-EventLogRecord] <EventLogRecord> [[-To] <CmsMessageRecipient[]>] [-IncludeContext] [<CommonParameters>]

Unprotect-CmsMessage [-Content] <string> [[-To] <CmsMessageRecipient[]>] [-IncludeContext] [<CommonParameters>]

Unprotect-CmsMessage [-Path] <string> [[-To] <CmsMessageRecipient[]>] [-IncludeContext] [<CommonParameters>]

Unprotect-CmsMessage [-LiteralPath] <string> [[-To] <CmsMessageRecipient[]>] [-IncludeContext] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Unprotect-CmsMessage","Cmdlet","Public","Microsoft.PowerShell.Security","Microsoft.PowerShell.Security","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135269",,,,,"
Unregister-Event [-SourceIdentifier] <string> [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]

Unregister-Event [-SubscriptionId] <int> [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Unregister-Event","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=144308",,,,,"
Unregister-PSSessionConfiguration [-Name] <string> [-Force] [-NoServiceRestart] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Unregister-PSSessionConfiguration","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Unregister-ScheduledJob
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Unregister-ScheduledJob","Cmdlet","Public","PSScheduledJob","PSScheduledJob",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"Update-DscConfiguration
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Update-DscConfiguration","Cmdlet","Public","PSDesiredStateConfiguration","PSDesiredStateConfiguration",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113420",,,,,"
Update-FormatData [[-AppendPath] <string[]>] [-PrependPath <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Update-FormatData","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=210614",,,,,"
Update-Help [[-Module] <string[]>] [[-SourcePath] <string[]>] [[-UICulture] <cultureinfo[]>] [-Recurse] [-Credential <pscredential>] [-UseDefaultCredentials] [-Force] [<CommonParameters>]

Update-Help [[-Module] <string[]>] [[-UICulture] <cultureinfo[]>] [-LiteralPath <string[]>] [-Recurse] [-Credential <pscredential>] [-UseDefaultCredentials] [-Force] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Update-Help","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113447",,,,,"
Update-List [[-Property] <string>] [-Add <Object[]>] [-Remove <Object[]>] [-InputObject <psobject>] [<CommonParameters>]

Update-List [[-Property] <string>] -Replace <Object[]> [-InputObject <psobject>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Update-List","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,,"
Update-MsolFederatedDomain -DomainName <string> [-SupportMultipleDomain] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Update-MsolFederatedDomain","Cmdlet","Public","MSOnline","MSOnline","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113421",,,,,"
Update-TypeData [[-AppendPath] <string[]>] [-PrependPath <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]

Update-TypeData -TypeName <string> [-MemberType <PSMemberTypes>] [-MemberName <string>] [-Value <Object>] [-SecondValue <Object>] [-TypeConverter <type>] [-TypeAdapter <type>] [-SerializationMethod <string>] [-TargetTypeForDeserialization <type>] [-SerializationDepth <int>] [-DefaultDisplayProperty <string>] [-InheritPropertySerializationSet <bool>] [-StringSerializationSource <string>] [-DefaultDisplayPropertySet <string[]>] [-DefaultKeyPropertySet <string[]>] [-PropertySerializationSet <string[]>] [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]

Update-TypeData [-TypeData] <TypeData[]> [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Update-TypeData","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=216344",,,,,"Update-WIMBootEntry
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Update-WIMBootEntry","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135271",,,,,"
Use-Transaction [-TransactedScript] <scriptblock> [-UseTransaction] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Use-Transaction","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkId=289368",,,,,"Use-WindowsUnattend
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Use-WindowsUnattend","Cmdlet","Public","Dism","Dism",,,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135276",,,,,"
Wait-Event [[-SourceIdentifier] <string>] [-Timeout <int>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Wait-Event","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113422",,,,,"
Wait-Job [-Id] <int[]> [-Any] [-Timeout <int>] [-Force] [<CommonParameters>]

Wait-Job [-Job] <Job[]> [-Any] [-Timeout <int>] [-Force] [<CommonParameters>]

Wait-Job [-Name] <string[]> [-Any] [-Timeout <int>] [-Force] [<CommonParameters>]

Wait-Job [-InstanceId] <guid[]> [-Any] [-Timeout <int>] [-Force] [<CommonParameters>]

Wait-Job [-State] <JobState> [-Any] [-Timeout <int>] [-Force] [<CommonParameters>]

Wait-Job [-Filter] <hashtable> [-Any] [-Timeout <int>] [-Force] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Wait-Job","Cmdlet","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135277",,,,,"
Wait-Process [-Name] <string[]> [[-Timeout] <int>] [<CommonParameters>]

Wait-Process [-Id] <int[]> [[-Timeout] <int>] [<CommonParameters>]

Wait-Process [[-Timeout] <int>] -InputObject <Process[]> [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Wait-Process","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113423",,,,,"
Where-Object [-Property] <string> [[-Value] <Object>] [-InputObject <psobject>] [-EQ] [<CommonParameters>]

Where-Object [-FilterScript] <scriptblock> [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -CLT [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -LE [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -NotContains [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -CNotContains [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -CLE [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -In [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -CIn [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -NotIn [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -CNotIn [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -Is [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -Like [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -CEQ [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -NE [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -CNE [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -GT [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -CGT [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -Match [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -CLike [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -CMatch [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -IsNot [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -NotLike [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -CNotMatch [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -Contains [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -CContains [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -LT [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -CNotLike [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -NotMatch [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -GE [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -CGE [-InputObject <psobject>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Where-Object","Cmdlet","Public","Microsoft.PowerShell.Core",,"None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113424",,,,,"
Write-Debug [-Message] <string> [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Write-Debug","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113425",,,,,"
Write-Error [-Message] <string> [-Category <ErrorCategory>] [-ErrorId <string>] [-TargetObject <Object>] [-RecommendedAction <string>] [-CategoryActivity <string>] [-CategoryReason <string>] [-CategoryTargetName <string>] [-CategoryTargetType <string>] [<CommonParameters>]

Write-Error -Exception <Exception> [-Message <string>] [-Category <ErrorCategory>] [-ErrorId <string>] [-TargetObject <Object>] [-RecommendedAction <string>] [-CategoryActivity <string>] [-CategoryReason <string>] [-CategoryTargetName <string>] [-CategoryTargetType <string>] [<CommonParameters>]

Write-Error -ErrorRecord <ErrorRecord> [-RecommendedAction <string>] [-CategoryActivity <string>] [-CategoryReason <string>] [-CategoryTargetName <string>] [-CategoryTargetType <string>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Write-Error","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=135281",,,,,"
Write-EventLog [-LogName] <string> [-Source] <string> [-EventId] <int> [[-EntryType] <EventLogEntryType>] [-Message] <string> [-Category <int16>] [-RawData <byte[]>] [-ComputerName <string>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Write-EventLog","Cmdlet","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","SupportedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113426",,,,,"
Write-Host [[-Object] <Object>] [-NoNewline] [-Separator <Object>] [-ForegroundColor <ConsoleColor>] [-BackgroundColor <ConsoleColor>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Write-Host","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113427",,,,,"
Write-Output [-InputObject] <psobject[]> [-NoEnumerate] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Write-Output","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113428",,,,,"
Write-Progress [-Activity] <string> [[-Status] <string>] [[-Id] <int>] [-PercentComplete <int>] [-SecondsRemaining <int>] [-CurrentOperation <string>] [-ParentId <int>] [-Completed] [-SourceId <int>] [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Write-Progress","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113429",,,,,"
Write-Verbose [-Message] <string> [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Write-Verbose","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"http://go.microsoft.com/fwlink/?LinkID=113430",,,,,"
Write-Warning [-Message] <string> [<CommonParameters>]
","ReadOnly",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Write-Warning","Cmdlet","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
